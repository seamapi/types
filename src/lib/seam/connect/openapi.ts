export default {
  components: {
    schemas: {
      access_code: {
        properties: {
          access_code_id: {
            description: 'Unique identifier for the access code.',
            format: 'uuid',
            type: 'string',
          },
          code: {
            description:
              'Code used for access. Typically, a numeric or alphanumeric string.',
            nullable: true,
            type: 'string',
          },
          common_code_key: {
            description:
              'Unique identifier for a group of access codes that share the same code.',
            nullable: true,
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the access code was created.',
            format: 'date-time',
            type: 'string',
          },
          device_id: {
            description:
              'Unique identifier for the device associated with the access code.',
            format: 'uuid',
            type: 'string',
          },
          ends_at: {
            description:
              'Date and time after which the time-bound access code becomes inactive.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          errors: {
            description:
              'Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues.',
            items: {
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description: 'Failed to set code on Smart Things device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['smartthings_failed_to_set_access_code'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to set code after multiple retries.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: [
                        'smartthings_failed_to_set_after_multiple_retries',
                      ],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to set code on device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['failed_to_set_on_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to remove code from device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['failed_to_remove_from_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Duplicate access code detected on device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['duplicate_code_on_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'An attempt to modify this access code was prevented.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['duplicate_code_attempt_prevented'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Igloohome bridge has too many pending jobs in the queue.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['igloohome_bridge_too_many_pending_jobs'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Igloohome bridge is offline.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['igloohome_bridge_offline'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock as reached max amount of codes.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: [
                        'igloohome_offline_access_code_no_variance_available',
                      ],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the access code is set on Kwikset device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_code'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the deletion of the access code on Kwikset device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_deletion'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Code was modified or removed externally after Seam successfully set it on the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['code_modified_external_to_seam'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Invalid code length for August lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_invalid_code_length'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_programming_delay'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'All access code slots on the device are full.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_slots_full'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'August lock is missing a keypad.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_keypad'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user is not subscribed.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_not_subscribed'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hubitat_device_programming_delay'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'No free positions available on the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hubitat_no_free_positions_available'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is offline',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_offline'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device has been removed',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_removed'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Hub is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hub_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The backup access code pool is empty.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['empty_backup_access_code_pool'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'User is not authorized to use the August Lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_not_authorized'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not connected to the Seam Bridge.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_bridge'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user limit reached.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_limit_reached'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not paired with a Gateway.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_not_paired_to_gateway'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Missing device credentials.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['missing_device_credentials'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The auxiliary heat is running.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['auxiliary_heat_running'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Subscription required to connect.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['subscription_required'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Account is disconnected.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
                {
                  description: 'Credentials provided were invalid.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['invalid_credentials'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          is_backup: {
            description: 'Indicates whether the access code is a backup code.',
            type: 'boolean',
          },
          is_backup_access_code_available: {
            description:
              'Indicates whether a backup access code is available for use if the primary access code is lost or compromised.',
            type: 'boolean',
          },
          is_external_modification_allowed: {
            description:
              'Indicates whether changes to the access code from external sources are permitted.',
            type: 'boolean',
          },
          is_managed: {
            description: 'Indicates whether Seam manages the access code.',
            enum: [true],
            type: 'boolean',
          },
          is_offline_access_code: {
            description:
              'Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection.',
            type: 'boolean',
          },
          is_one_time_use: {
            description:
              'Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use.',
            type: 'boolean',
          },
          is_scheduled_on_device: {
            description:
              'Indicates whether the code is set on the device according to a preconfigured schedule.',
            type: 'boolean',
          },
          is_waiting_for_code_assignment: {
            description:
              'Indicates whether the access code is waiting for a code assignment.',
            type: 'boolean',
          },
          name: {
            description:
              'Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.',
            nullable: true,
            type: 'string',
          },
          pulled_backup_access_code_id: {
            description:
              'Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code.',
            format: 'uuid',
            nullable: true,
            type: 'string',
          },
          starts_at: {
            description:
              'Date and time at which the time-bound access code becomes active.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          status: {
            description:
              '\n    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.\n  ',
            enum: ['setting', 'set', 'unset', 'removing', 'unknown'],
            type: 'string',
          },
          type: {
            description:
              'Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.',
            enum: ['time_bound', 'ongoing'],
            type: 'string',
          },
          warnings: {
            description:
              'Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention.',
            items: {
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description: 'Failed to set code on Smart Things device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['smartthings_failed_to_set_access_code'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Duplicate access code detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schlage_detected_duplicate'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Received an error when attempting to create this code.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schlage_creation_outage'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Office Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_office_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Code was modified or removed externally after Seam successfully set it on the device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['code_modified_external_to_seam'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Delay in setting code on device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['delay_in_setting_on_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Delay in removing code from device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['delay_in_removing_from_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Third party integration detected that may cause access codes to fail.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['third_party_integration_detected'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_programming_delay'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Algopins must be used within 24 hours.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['igloo_algopin_must_be_used_within_24_hours'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Management was transferred to another workspace.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['management_transferred'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the access code is set on Kwikset device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_code'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
        },
        required: [
          'common_code_key',
          'type',
          'access_code_id',
          'device_id',
          'name',
          'code',
          'created_at',
          'errors',
          'warnings',
          'is_managed',
          'status',
          'is_backup_access_code_available',
          'is_external_modification_allowed',
          'is_one_time_use',
          'is_offline_access_code',
        ],
        type: 'object',
        'x-route-path': '/access_codes',
      },
      acs_access_group: {
        description:
          'Group that defines the entrances to which a set of users has access and, in some cases, the access schedule for these entrances and users.\nThe `acs_access_group` object represents an [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups) within an [access control system](https://docs.seam.co/latest/capability-guides/access-systems).',
        properties: {
          access_group_type: {
            deprecated: true,
            enum: [
              'pti_unit',
              'pti_access_level',
              'salto_ks_access_group',
              'brivo_group',
              'salto_space_group',
              'dormakaba_community_access_group',
            ],
            type: 'string',
            'x-deprecated': 'Use `external_type`.',
          },
          access_group_type_display_name: {
            deprecated: true,
            type: 'string',
            'x-deprecated': 'Use `external_type_display_name`.',
          },
          acs_access_group_id: {
            description: 'ID of the access group.',
            format: 'uuid',
            type: 'string',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the access group.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the access group was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: { type: 'string' },
          external_type: {
            description:
              'Brand-specific terminology for the access group type.',
            enum: [
              'pti_unit',
              'pti_access_level',
              'salto_ks_access_group',
              'brivo_group',
              'salto_space_group',
              'dormakaba_community_access_group',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the access group type.',
            type: 'string',
          },
          is_managed: { enum: [true], type: 'boolean' },
          name: { description: 'Name of the access group.', type: 'string' },
          warnings: {
            description: 'Warnings associated with the `acs_access_group`.',
            items: {
              description: 'Warning associated with the `acs_access_group`.',
              properties: {
                created_at: {
                  description:
                    'Date and time at which Seam created the warning.',
                  format: 'date-time',
                  type: 'string',
                },
                message: {
                  description:
                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                  type: 'string',
                },
                warning_code: {
                  description:
                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                  enum: ['unknown_issue_with_acs_access_group'],
                  type: 'string',
                },
              },
              required: ['created_at', 'message', 'warning_code'],
              type: 'object',
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the access group.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_access_group_id',
          'acs_system_id',
          'workspace_id',
          'name',
          'access_group_type',
          'access_group_type_display_name',
          'display_name',
          'external_type',
          'external_type_display_name',
          'created_at',
          'warnings',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/access_groups',
      },
      acs_credential: {
        description:
          'Means by which a user gains access at an entrance. The `acs_credential` object represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
        properties: {
          access_method: {
            description:
              'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
            enum: ['code', 'card', 'mobile_key'],
            type: 'string',
          },
          acs_credential_id: {
            description: 'ID of the credential.',
            format: 'uuid',
            type: 'string',
          },
          acs_credential_pool_id: { format: 'uuid', type: 'string' },
          acs_system_id: {
            description:
              'ID of the access control system that contains the credential.',
            format: 'uuid',
            type: 'string',
          },
          acs_user_id: {
            description: 'ID of the ACS user to whom the credential belongs.',
            format: 'uuid',
            type: 'string',
          },
          assa_abloy_vostio_metadata: {
            description: 'Vostio-specific metadata for the credential.',
            properties: {
              door_names: { items: { type: 'string' }, type: 'array' },
              endpoint_id: { type: 'string' },
              key_id: { type: 'string' },
              key_issuing_request_id: { type: 'string' },
              override_guest_acs_entrance_ids: {
                items: { type: 'string' },
                type: 'array',
              },
            },
            type: 'object',
          },
          card_number: { nullable: true, type: 'string' },
          code: {
            description: 'Access (PIN) code for the credential.',
            nullable: true,
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the credential was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description:
              'Display name that corresponds to the credential type.',
            minLength: 1,
            type: 'string',
          },
          ends_at: {
            description:
              'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `acs_credential`.',
            items: {
              properties: {
                error_code: { type: 'string' },
                message: { type: 'string' },
              },
              required: ['error_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          external_type: {
            description:
              'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
            enum: [
              'pti_card',
              'brivo_credential',
              'hid_credential',
              'visionline_card',
              'salto_ks_credential',
              'assa_abloy_vostio_key',
              'salto_space_key',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the credential type.',
            type: 'string',
          },
          is_issued: { type: 'boolean' },
          is_latest_desired_state_synced_with_provider: {
            description:
              'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
            nullable: true,
            type: 'boolean',
          },
          is_managed: { enum: [true], type: 'boolean' },
          is_multi_phone_sync_credential: {
            description:
              'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
            type: 'boolean',
          },
          is_one_time_use: {
            description:
              'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
            type: 'boolean',
          },
          issued_at: { format: 'date-time', nullable: true, type: 'string' },
          latest_desired_state_synced_with_provider_at: {
            description:
              'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          parent_acs_credential_id: {
            description: 'ID of the parent credential.',
            format: 'uuid',
            type: 'string',
          },
          starts_at: {
            description:
              'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
            type: 'string',
          },
          visionline_metadata: {
            description: 'Visionline-specific metadata for the credential.',
            properties: {
              auto_join: { type: 'boolean' },
              card_function_type: { enum: ['guest', 'staff'], type: 'string' },
              card_id: { type: 'string' },
              common_acs_entrance_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
              credential_id: { type: 'string' },
              guest_acs_entrance_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
              is_valid: { type: 'boolean' },
              joiner_acs_credential_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
            },
            required: ['card_function_type'],
            type: 'object',
          },
          warnings: {
            description: 'Warnings associated with the `acs_credential`.',
            items: {
              description: 'Warning associated with the `acs_credential`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the credential is waiting to be issued.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['waiting_to_be_issued'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the schedule of one of the credential's children was modified externally.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schedule_externally_modified'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schedule_modified'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that this credential is being deleted.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['being_deleted'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['unknown_issue_with_acs_credential'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['needs_to_be_reissued'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_credential_id',
          'acs_system_id',
          'display_name',
          'access_method',
          'created_at',
          'workspace_id',
          'errors',
          'warnings',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/credentials',
      },
      acs_credential_pool: {
        properties: {
          acs_credential_pool_id: { format: 'uuid', type: 'string' },
          acs_system_id: { format: 'uuid', type: 'string' },
          created_at: { format: 'date-time', type: 'string' },
          display_name: { minLength: 1, type: 'string' },
          external_type: { enum: ['hid_part_number'], type: 'string' },
          external_type_display_name: { type: 'string' },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: [
          'acs_credential_pool_id',
          'acs_system_id',
          'display_name',
          'external_type',
          'external_type_display_name',
          'created_at',
          'workspace_id',
        ],
        type: 'object',
        'x-route-path': '/acs/credential_pools',
      },
      acs_credential_provisioning_automation: {
        properties: {
          acs_credential_provisioning_automation_id: {
            format: 'uuid',
            type: 'string',
          },
          created_at: { format: 'date-time', type: 'string' },
          credential_manager_acs_system_id: { format: 'uuid', type: 'string' },
          user_identity_id: { format: 'uuid', type: 'string' },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: [
          'acs_credential_provisioning_automation_id',
          'credential_manager_acs_system_id',
          'user_identity_id',
          'created_at',
          'workspace_id',
        ],
        type: 'object',
        'x-route-path': '/acs/credential_provisioning_automations',
      },
      acs_encoder: {
        description:
          'Represents a hardware device that encodes [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) data onto physical cards within an [access control system](https://docs.seam.co/latest/capability-guides/access-systems). See also [Working with Card Encoders and Scanners](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
        properties: {
          acs_encoder_id: {
            description: 'ID of the `acs_encoder`.',
            format: 'uuid',
            type: 'string',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the `acs_encoder`.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description:
              'Date and time at which the `acs_encoder` was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description: 'Display name for the `acs_encoder`.',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `acs_encoder`.',
            items: {
              description: 'Error associated with the `acs_encoder`.',
              properties: {
                created_at: {
                  description: 'Date and time at which Seam created the error.',
                  format: 'date-time',
                  type: 'string',
                },
                error_code: {
                  description:
                    'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                  enum: ['acs_encoder_removed'],
                  type: 'string',
                },
                message: {
                  description:
                    'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                  type: 'string',
                },
              },
              required: ['created_at', 'message', 'error_code'],
              type: 'object',
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_encoder_id',
          'acs_system_id',
          'workspace_id',
          'errors',
          'created_at',
          'display_name',
        ],
        type: 'object',
        'x-route-path': '/acs/encoders',
      },
      acs_entrance: {
        description:
          'Represents an [entrance](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details) within an [access control system](https://docs.seam.co/latest/capability-guides/access-systems).',
        properties: {
          acs_entrance_id: {
            description: 'ID of the entrance.',
            format: 'uuid',
            type: 'string',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the entrance.',
            format: 'uuid',
            type: 'string',
          },
          assa_abloy_vostio_metadata: {
            properties: {
              door_name: { type: 'string' },
              door_number: { format: 'float', type: 'number' },
              door_type: {
                enum: ['CommonDoor', 'EntranceDoor', 'GuestDoor', 'Elevator'],
                type: 'string',
              },
              pms_id: { type: 'string' },
              stand_open: { type: 'boolean' },
            },
            required: ['door_type', 'door_name'],
            type: 'object',
          },
          created_at: {
            description: 'Date and time at which the entrance was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description: 'Display name for the entrance.',
            type: 'string',
          },
          dormakaba_community_metadata: {
            properties: { access_point_name: { type: 'string' } },
            required: ['access_point_name'],
            type: 'object',
          },
          errors: {
            items: {
              properties: {
                error_code: { type: 'string' },
                message: { type: 'string' },
              },
              required: ['error_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          latch_metadata: {
            properties: {
              accessibility_type: { type: 'string' },
              door_name: { type: 'string' },
              door_type: { type: 'string' },
              is_connected: { type: 'boolean' },
            },
            required: [
              'accessibility_type',
              'door_name',
              'door_type',
              'is_connected',
            ],
            type: 'object',
          },
          salto_ks_metadata: {
            properties: {
              battery_level: { type: 'string' },
              door_name: { type: 'string' },
              intrusion_alarm: { type: 'boolean' },
              left_open_alarm: { type: 'boolean' },
              lock_type: { type: 'string' },
              locked_state: { type: 'string' },
              online: { type: 'boolean' },
              privacy_mode: { type: 'boolean' },
            },
            required: [
              'door_name',
              'locked_state',
              'lock_type',
              'battery_level',
            ],
            type: 'object',
          },
          salto_space_metadata: {
            properties: {
              door_description: { type: 'string' },
              door_name: { type: 'string' },
              ext_door_id: { type: 'string' },
            },
            required: ['door_name', 'ext_door_id'],
            type: 'object',
          },
          visionline_metadata: {
            properties: {
              door_category: {
                enum: [
                  'entrance',
                  'guest',
                  'elevator reader',
                  'common',
                  'common (PMS)',
                ],
                type: 'string',
              },
              door_name: { type: 'string' },
              profiles: {
                items: {
                  properties: {
                    visionline_door_profile_id: { type: 'string' },
                    visionline_door_profile_type: {
                      enum: ['BLE', 'commonDoor', 'touch'],
                      type: 'string',
                    },
                  },
                  required: [
                    'visionline_door_profile_id',
                    'visionline_door_profile_type',
                  ],
                  type: 'object',
                },
                type: 'array',
              },
            },
            required: ['door_name', 'door_category'],
            type: 'object',
          },
        },
        required: [
          'acs_system_id',
          'acs_entrance_id',
          'created_at',
          'display_name',
          'errors',
        ],
        type: 'object',
        'x-route-path': '/acs/entrances',
      },
      acs_system: {
        description:
          'Represents an [access control system](https://docs.seam.co/latest/capability-guides/access-systems).',
        properties: {
          acs_system_id: {
            description: 'ID of the `acs_system`.',
            format: 'uuid',
            type: 'string',
          },
          can_add_acs_users_to_acs_access_groups: {
            description:
              'Indicates whether the `acs_system` supports [adding users to access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#add-an-acs-user-to-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems).',
            type: 'boolean',
          },
          can_automate_enrollment: {
            description:
              'Indicates whether it is possible to [launch enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) for the `acs_system`.',
            type: 'boolean',
          },
          can_create_acs_access_groups: {
            description:
              'Indicates whether the `acs_system` supports creating [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems).',
            type: 'boolean',
          },
          can_remove_acs_users_from_acs_access_groups: {
            description:
              'Indicates whether the `acs_system` supports [removing users from access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups#remove-an-acs-user-from-an-access-group). See also [Access Group-based Access Control Systems](https://docs.seam.co/latest/capability-guides/access-systems/understanding-access-control-system-differences#access-group-based-access-control-systems).',
            type: 'boolean',
          },
          connected_account_id: {
            description:
              'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`.',
            format: 'uuid',
            type: 'string',
          },
          connected_account_ids: {
            deprecated: true,
            description:
              'IDs of the [connected accounts](https://docs.seam.co/latest/core-concepts/connected-accounts) associated with the `acs_system`.',
            items: { format: 'uuid', type: 'string' },
            type: 'array',
            'x-deprecated': 'Use `connected_account_id`.',
          },
          created_at: {
            description: 'Date and time at which the `acs_system` was created.',
            format: 'date-time',
            type: 'string',
          },
          default_credential_manager_acs_system_id: {
            description:
              'ID of the default credential manager acs_system for this access control system.',
            format: 'uuid',
            nullable: true,
            type: 'string',
            'x-draft': 'Needs review',
          },
          errors: {
            description: 'Errors associated with the `acs_system`.',
            items: {
              description: 'Error associated with the `acs_system`.',
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the Seam API cannot communicate with the [Seam Bridge](https://docs.seam.co/latest/capability-guides/seam-bridge), for example, if the Seam Bridge executable has stopped or if the computer running the Seam Bridge executable is offline.\n  This error might also occur if the Seam Bridge is connected to the wrong [workspace](https://docs.seam.co/latest/core-concepts/workspaces).\n  See also [Troubleshooting Your Access Control System](https://docs.seam.co/latest/capability-guides/capability-guides/access-systems/troubleshooting-your-access-control-system#acs_system.errors.seam_bridge_disconnected).',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['seam_bridge_disconnected'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the Seam Bridge is functioning correctly and the Seam API can communicate with the Seam Bridge, but the Seam API cannot connect to the on-premises [Visionline access control system](https://docs.seam.co/latest/device-and-system-integration-guides/assa-abloy-visionline-access-control-system).\n  For example, the IP address of the on-premises access control system may be set incorrectly within the Seam [workspace](https://docs.seam.co/latest/core-concepts/workspaces).\n  See also [Troubleshooting Your Access Control System](https://docs.seam.co/latest/capability-guides/capability-guides/access-systems/troubleshooting-your-access-control-system#acs_system.errors.visionline_instance_unreachable).',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['visionline_instance_unreachable'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the maximum number of users allowed for the site has been reached. This means that new access codes cannot be created. Contact Salto support to increase the user limit.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_ks_subscription_limit_exceeded'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the access system has been disconnected. See [this guide](https://docs.seam.co/latest/capability-guides/access-systems/troubleshooting-your-access-control-system guide) to resolve the issue.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['acs_system_disconnected'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the login credentials are invalid. Reconnect the account using the Connect Webview to restore access.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      description:
                        'Indicates that the access system has lost its Salto KS certification. Please contact support to regain access.',
                      enum: ['salto_ks_certification_expired'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          external_type: {
            description:
              'Brand-specific terminology for the `acs_system` type.',
            enum: [
              'pti_site',
              'alta_org',
              'salto_ks_site',
              'salto_space_system',
              'brivo_account',
              'hid_credential_manager_organization',
              'visionline_system',
              'assa_abloy_credential_service',
              'latch_building',
              'dormakaba_community_site',
              'legic_connect_credential_service',
              'assa_abloy_vostio',
              'assa_abloy_vostio_credential_service',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the `acs_system` type.',
            type: 'string',
          },
          image_alt_text: {
            description: 'Alternative text for the `acs_system` image.',
            type: 'string',
          },
          image_url: {
            description: 'URL for the image that represents the `acs_system`.',
            type: 'string',
          },
          is_credential_manager: {
            description:
              'Indicates if the `acs_system` is a credential manager.',
            type: 'boolean',
          },
          location: {
            properties: {
              time_zone: {
                description: 'Time zone in which the `acs_system` is located.',
                nullable: true,
                type: 'string',
              },
            },
            required: ['time_zone'],
            type: 'object',
          },
          name: { description: 'Name of the `acs_system`.', type: 'string' },
          system_type: {
            deprecated: true,
            enum: [
              'pti_site',
              'alta_org',
              'salto_ks_site',
              'salto_space_system',
              'brivo_account',
              'hid_credential_manager_organization',
              'visionline_system',
              'assa_abloy_credential_service',
              'latch_building',
              'dormakaba_community_site',
              'legic_connect_credential_service',
              'assa_abloy_vostio',
              'assa_abloy_vostio_credential_service',
            ],
            type: 'string',
            'x-deprecated': 'Use `external_type`.',
          },
          system_type_display_name: {
            deprecated: true,
            type: 'string',
            'x-deprecated': 'Use `external_type_display_name`.',
          },
          visionline_metadata: {
            properties: {
              lan_address: {
                description:
                  'IP address or hostname of the main Visionline server relative to the Seam Bridge on the local network.',
                type: 'string',
              },
              mobile_access_uuid: {
                description:
                  'Keyset loaded into a reader. Mobile keys and reader administration tools securely authenticate only with readers programmed with a matching keyset.',
                type: 'string',
              },
              system_id: {
                description:
                  'Unique ID assigned by the ASSA ABLOY licensing team that identifies each hotel in your credential manager.',
                type: 'string',
              },
            },
            required: ['mobile_access_uuid', 'system_id', 'lan_address'],
            type: 'object',
          },
          warnings: {
            description: 'Warnings associated with the `acs_system`.',
            items: {
              description: 'Warning associated with the `acs_system`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Indicates that the Salto KS site has exceeded 80% of the maximum number of allowed users. Please increase your subscription limit, or delete some users from your site to rectify this.',
                      enum: ['salto_ks_subscription_limit_almost_reached'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    misconfigured_acs_entrance_ids: {
                      items: { format: 'uuid', type: 'string' },
                      type: 'array',
                    },
                    warning_code: {
                      description:
                        'Indicates the ACS system time zone could not be determined because the reported physical location does not match the time zone configured on the physical ACS entrances.',
                      enum: ['time_zone_does_not_match_location'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_system`.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_system_id',
          'is_credential_manager',
          'location',
          'name',
          'created_at',
          'workspace_id',
          'connected_account_ids',
          'connected_account_id',
          'image_url',
          'image_alt_text',
          'errors',
          'warnings',
        ],
        type: 'object',
        'x-route-path': '/acs/systems',
      },
      acs_user: {
        description:
          'Represents a [user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) in an [access control system](https://docs.seam.co/latest/capability-guides/access-systems).',
        properties: {
          access_schedule: {
            description:
              "`starts_at` and `ends_at` timestamps for the `acs_user`'s access.",
            properties: {
              ends_at: {
                description:
                  "Date and time at which the user's access ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.",
                format: 'date-time',
                nullable: true,
                type: 'string',
              },
              starts_at: {
                description:
                  "Date and time at which the user's access starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.",
                format: 'date-time',
                type: 'string',
              },
            },
            required: ['starts_at', 'ends_at'],
            type: 'object',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
          acs_user_id: {
            description: 'ID of the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the `acs_user` was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description: 'Display name for the `acs_user`.',
            type: 'string',
          },
          email: {
            deprecated: true,
            format: 'email',
            type: 'string',
            'x-deprecated': 'use email_address.',
          },
          email_address: {
            description: 'Email address of the `acs_user`.',
            format: 'email',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `acs_user`.',
            items: {
              description: 'Error associated with the `acs_user`.',
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the ACS user was deleted from the ACS system outside of Seam.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['deleted_externally'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the user could not be subscribed on Salto KS because the subscription limit has been exceeded.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['salto_ks_subscription_limit_exceeded'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not created on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_create_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not updated on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_update_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not deleted on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_delete_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          external_type: {
            description: 'Brand-specific terminology for the `acs_user` type.',
            enum: [
              'pti_user',
              'brivo_user',
              'hid_credential_manager_user',
              'salto_site_user',
              'latch_user',
              'dormakaba_community_user',
              'salto_space_user',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the `acs_user` type.',
            type: 'string',
          },
          full_name: {
            description: 'Full name of the `acs_user`.',
            type: 'string',
          },
          hid_acs_system_id: { format: 'uuid', type: 'string' },
          is_latest_desired_state_synced_with_provider: {
            nullable: true,
            type: 'boolean',
            'x-undocumented': 'Only used internally.',
          },
          is_managed: { enum: [true], type: 'boolean' },
          is_suspended: {
            description:
              'Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users).',
            type: 'boolean',
          },
          latest_desired_state_synced_with_provider_at: {
            format: 'date-time',
            nullable: true,
            type: 'string',
            'x-undocumented': 'Only used internally.',
          },
          phone_number: {
            description:
              'Phone number of the `acs_user` in E.164 format (for example, `+15555550100`).',
            type: 'string',
          },
          user_identity_email_address: {
            description:
              'Email address of the user identity associated with the `acs_user`.',
            nullable: true,
            type: 'string',
          },
          user_identity_full_name: {
            description:
              'Full name of the user identity associated with the `acs_user`.',
            nullable: true,
            type: 'string',
          },
          user_identity_id: {
            description:
              'ID of the user identity associated with the `acs_user`.',
            type: 'string',
          },
          user_identity_phone_number: {
            description:
              'Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`).',
            nullable: true,
            type: 'string',
          },
          warnings: {
            description: 'Warnings associated with the `acs_user`.',
            items: {
              description: 'Warning associated with the `acs_user`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the user is being deleted from the ACS system. This is a temporary state, and the user will be deleted shortly.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: { enum: ['being_deleted'], type: 'string' },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the user is not subscribed on the Salto KS, so they cannot unlock doors or perform any actions. This occur when the their access schedule hasn’t started yet, or if their access schedule has ended, or if the site has reached its limit for active users (subscription slots), or if they have been manually unsubscribed.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: {
                      enum: ['salto_ks_user_not_subscribed'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this user with the provider. This issue may affect the proper functioning of this user.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: {
                      enum: ['unknown_issue_with_acs_user'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_user_id',
          'acs_system_id',
          'workspace_id',
          'created_at',
          'display_name',
          'warnings',
          'errors',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/users',
      },
      action_attempt: {
        oneOf: [
          {
            description: 'Locking door.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['LOCK_DOOR'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Locking door succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['LOCK_DOOR'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Locking door failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['LOCK_DOOR'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Unlocking door.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UNLOCK_DOOR'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Unlocking door succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UNLOCK_DOOR'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Unlocking door failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UNLOCK_DOOR'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Reading credential data from physical encoder.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SCAN_CREDENTIAL'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description:
              'Reading credential data from physical encoder succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SCAN_CREDENTIAL'], type: 'string' },
              error: { nullable: true },
              result: {
                properties: {
                  acs_credential_on_encoder: {
                    description:
                      'Snapshot of credential data read from physical encoder.',
                    nullable: true,
                    properties: {
                      card_number: {
                        description:
                          'A number or string that physically identifies this card.',
                        nullable: true,
                        type: 'string',
                      },
                      created_at: {
                        description:
                          'Date and time the credential was created.',
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      ends_at: {
                        description:
                          'Date and time the credential will stop being useable.',
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      is_issued: { nullable: true, type: 'boolean' },
                      starts_at: {
                        description:
                          'Date and time the credential will become useable.',
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      visionline_metadata: {
                        description:
                          'Visionline-specific metadata for the credential.',
                        properties: {
                          cancelled: { type: 'boolean' },
                          card_format: {
                            enum: ['TLCode', 'rfid48'],
                            type: 'string',
                          },
                          card_holder: { type: 'string' },
                          card_id: { type: 'string' },
                          common_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          discarded: { type: 'boolean' },
                          expired: { type: 'boolean' },
                          guest_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          number_of_issued_cards: {
                            format: 'float',
                            type: 'number',
                          },
                          overridden: { type: 'boolean' },
                          overwritten: { type: 'boolean' },
                          pending_auto_update: { type: 'boolean' },
                        },
                        required: [
                          'card_id',
                          'cancelled',
                          'discarded',
                          'expired',
                          'overwritten',
                          'pending_auto_update',
                          'card_format',
                          'number_of_issued_cards',
                        ],
                        type: 'object',
                      },
                    },
                    required: [
                      'created_at',
                      'is_issued',
                      'starts_at',
                      'ends_at',
                      'card_number',
                    ],
                    type: 'object',
                  },
                  acs_credential_on_seam: {
                    description:
                      'Matching acs_credential currently encoded on this card.',
                    nullable: true,
                    oneOf: [
                      {
                        description:
                          'Means by which a user gains access at an entrance. The `acs_credential` object represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
                        properties: {
                          access_method: {
                            description:
                              'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
                            enum: ['code', 'card', 'mobile_key'],
                            type: 'string',
                          },
                          acs_credential_id: {
                            description: 'ID of the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_credential_pool_id: {
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_system_id: {
                            description:
                              'ID of the access control system that contains the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_user_id: {
                            description:
                              'ID of the ACS user to whom the credential belongs.',
                            format: 'uuid',
                            type: 'string',
                          },
                          assa_abloy_vostio_metadata: {
                            description:
                              'Vostio-specific metadata for the credential.',
                            properties: {
                              door_names: {
                                items: { type: 'string' },
                                type: 'array',
                              },
                              endpoint_id: { type: 'string' },
                              key_id: { type: 'string' },
                              key_issuing_request_id: { type: 'string' },
                              override_guest_acs_entrance_ids: {
                                items: { type: 'string' },
                                type: 'array',
                              },
                            },
                            type: 'object',
                          },
                          card_number: { nullable: true, type: 'string' },
                          code: {
                            description:
                              'Access (PIN) code for the credential.',
                            nullable: true,
                            type: 'string',
                          },
                          created_at: {
                            description:
                              'Date and time at which the credential was created.',
                            format: 'date-time',
                            type: 'string',
                          },
                          display_name: {
                            description:
                              'Display name that corresponds to the credential type.',
                            minLength: 1,
                            type: 'string',
                          },
                          ends_at: {
                            description:
                              'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                            type: 'string',
                          },
                          errors: {
                            description:
                              'Errors associated with the `acs_credential`.',
                            items: {
                              properties: {
                                error_code: { type: 'string' },
                                message: { type: 'string' },
                              },
                              required: ['error_code', 'message'],
                              type: 'object',
                            },
                            type: 'array',
                          },
                          external_type: {
                            description:
                              'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
                            enum: [
                              'pti_card',
                              'brivo_credential',
                              'hid_credential',
                              'visionline_card',
                              'salto_ks_credential',
                              'assa_abloy_vostio_key',
                              'salto_space_key',
                            ],
                            type: 'string',
                          },
                          external_type_display_name: {
                            description:
                              'Display name that corresponds to the brand-specific terminology for the credential type.',
                            type: 'string',
                          },
                          is_issued: { type: 'boolean' },
                          is_latest_desired_state_synced_with_provider: {
                            description:
                              'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
                            nullable: true,
                            type: 'boolean',
                          },
                          is_managed: { enum: [true], type: 'boolean' },
                          is_multi_phone_sync_credential: {
                            description:
                              'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
                            type: 'boolean',
                          },
                          is_one_time_use: {
                            description:
                              'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
                            type: 'boolean',
                          },
                          issued_at: {
                            format: 'date-time',
                            nullable: true,
                            type: 'string',
                          },
                          latest_desired_state_synced_with_provider_at: {
                            description:
                              'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
                            format: 'date-time',
                            nullable: true,
                            type: 'string',
                          },
                          parent_acs_credential_id: {
                            description: 'ID of the parent credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          starts_at: {
                            description:
                              'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                            type: 'string',
                          },
                          visionline_metadata: {
                            description:
                              'Visionline-specific metadata for the credential.',
                            properties: {
                              auto_join: { type: 'boolean' },
                              card_function_type: {
                                enum: ['guest', 'staff'],
                                type: 'string',
                              },
                              card_id: { type: 'string' },
                              common_acs_entrance_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                              credential_id: { type: 'string' },
                              guest_acs_entrance_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                              is_valid: { type: 'boolean' },
                              joiner_acs_credential_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                            },
                            required: ['card_function_type'],
                            type: 'object',
                          },
                          warnings: {
                            description:
                              'Warnings associated with the `acs_credential`.',
                            items: {
                              description:
                                'Warning associated with the `acs_credential`.',
                              discriminator: { propertyName: 'warning_code' },
                              oneOf: [
                                {
                                  description:
                                    'Indicates that the credential is waiting to be issued.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['waiting_to_be_issued'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    "Indicates that the schedule of one of the credential's children was modified externally.",
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['schedule_externally_modified'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['schedule_modified'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Indicates that this credential is being deleted.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['being_deleted'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: [
                                        'unknown_issue_with_acs_credential',
                                      ],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['needs_to_be_reissued'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                              ],
                            },
                            type: 'array',
                          },
                          workspace_id: {
                            description:
                              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: [
                          'acs_credential_id',
                          'acs_system_id',
                          'display_name',
                          'access_method',
                          'created_at',
                          'workspace_id',
                          'errors',
                          'warnings',
                          'is_managed',
                        ],
                        type: 'object',
                        'x-route-path': '/acs/credentials',
                      },
                      {
                        description:
                          'Means by which a user gains access at an entrance. The `unmanaged_acs_credential` object, which is not managed by Seam, represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
                        properties: {
                          access_method: {
                            description:
                              'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
                            enum: ['code', 'card', 'mobile_key'],
                            type: 'string',
                          },
                          acs_credential_id: {
                            description: 'ID of the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_credential_pool_id: {
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_system_id: {
                            description:
                              'ID of the access control system that contains the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_user_id: {
                            description:
                              'ID of the ACS user to whom the credential belongs.',
                            format: 'uuid',
                            type: 'string',
                          },
                          assa_abloy_vostio_metadata: {
                            description:
                              'Vostio-specific metadata for the credential.',
                            properties: {
                              door_names: {
                                items: { type: 'string' },
                                type: 'array',
                              },
                              endpoint_id: { type: 'string' },
                              key_id: { type: 'string' },
                              key_issuing_request_id: { type: 'string' },
                              override_guest_acs_entrance_ids: {
                                items: { type: 'string' },
                                type: 'array',
                              },
                            },
                            type: 'object',
                          },
                          card_number: { nullable: true, type: 'string' },
                          code: {
                            description:
                              'Access (PIN) code for the credential.',
                            nullable: true,
                            type: 'string',
                          },
                          created_at: {
                            description:
                              'Date and time at which the credential was created.',
                            format: 'date-time',
                            type: 'string',
                          },
                          display_name: {
                            description:
                              'Display name that corresponds to the credential type.',
                            minLength: 1,
                            type: 'string',
                          },
                          ends_at: {
                            description:
                              'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                            type: 'string',
                          },
                          errors: {
                            description:
                              'Errors associated with the `acs_credential`.',
                            items: {
                              properties: {
                                error_code: { type: 'string' },
                                message: { type: 'string' },
                              },
                              required: ['error_code', 'message'],
                              type: 'object',
                            },
                            type: 'array',
                          },
                          external_type: {
                            description:
                              'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
                            enum: [
                              'pti_card',
                              'brivo_credential',
                              'hid_credential',
                              'visionline_card',
                              'salto_ks_credential',
                              'assa_abloy_vostio_key',
                              'salto_space_key',
                            ],
                            type: 'string',
                          },
                          external_type_display_name: {
                            description:
                              'Display name that corresponds to the brand-specific terminology for the credential type.',
                            type: 'string',
                          },
                          is_issued: { type: 'boolean' },
                          is_latest_desired_state_synced_with_provider: {
                            description:
                              'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
                            nullable: true,
                            type: 'boolean',
                          },
                          is_managed: { enum: [false], type: 'boolean' },
                          is_multi_phone_sync_credential: {
                            description:
                              'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
                            type: 'boolean',
                          },
                          is_one_time_use: {
                            description:
                              'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
                            type: 'boolean',
                          },
                          issued_at: {
                            format: 'date-time',
                            nullable: true,
                            type: 'string',
                          },
                          latest_desired_state_synced_with_provider_at: {
                            description:
                              'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
                            format: 'date-time',
                            nullable: true,
                            type: 'string',
                          },
                          parent_acs_credential_id: {
                            description: 'ID of the parent credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                          starts_at: {
                            description:
                              'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                            type: 'string',
                          },
                          visionline_metadata: {
                            description:
                              'Visionline-specific metadata for the credential.',
                            properties: {
                              auto_join: { type: 'boolean' },
                              card_function_type: {
                                enum: ['guest', 'staff'],
                                type: 'string',
                              },
                              card_id: { type: 'string' },
                              common_acs_entrance_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                              credential_id: { type: 'string' },
                              guest_acs_entrance_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                              is_valid: { type: 'boolean' },
                              joiner_acs_credential_ids: {
                                items: { format: 'uuid', type: 'string' },
                                type: 'array',
                              },
                            },
                            required: ['card_function_type'],
                            type: 'object',
                          },
                          warnings: {
                            description:
                              'Warnings associated with the `acs_credential`.',
                            items: {
                              description:
                                'Warning associated with the `acs_credential`.',
                              discriminator: { propertyName: 'warning_code' },
                              oneOf: [
                                {
                                  description:
                                    'Indicates that the credential is waiting to be issued.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['waiting_to_be_issued'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    "Indicates that the schedule of one of the credential's children was modified externally.",
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['schedule_externally_modified'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['schedule_modified'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Indicates that this credential is being deleted.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['being_deleted'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: [
                                        'unknown_issue_with_acs_credential',
                                      ],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                                {
                                  description:
                                    'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                                  properties: {
                                    created_at: {
                                      description:
                                        'Date and time at which Seam created the warning.',
                                      format: 'date-time',
                                      type: 'string',
                                    },
                                    message: {
                                      description:
                                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                      type: 'string',
                                    },
                                    warning_code: {
                                      description:
                                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                      enum: ['needs_to_be_reissued'],
                                      type: 'string',
                                    },
                                  },
                                  required: [
                                    'created_at',
                                    'message',
                                    'warning_code',
                                  ],
                                  type: 'object',
                                },
                              ],
                            },
                            type: 'array',
                          },
                          workspace_id: {
                            description:
                              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: [
                          'acs_credential_id',
                          'acs_system_id',
                          'display_name',
                          'access_method',
                          'created_at',
                          'workspace_id',
                          'errors',
                          'warnings',
                          'is_managed',
                        ],
                        type: 'object',
                        'x-route-path': '/acs/credentials/unmanaged',
                      },
                    ],
                    'x-route-path': '/acs/credentials',
                  },
                  warnings: {
                    items: {
                      properties: {
                        warning_code: {
                          enum: [
                            'acs_credential_on_encoder_out_of_sync',
                            'acs_credential_on_seam_not_found',
                          ],
                          type: 'string',
                        },
                        warning_message: { type: 'string' },
                      },
                      required: ['warning_code', 'warning_message'],
                      type: 'object',
                    },
                    type: 'array',
                  },
                },
                required: [
                  'acs_credential_on_encoder',
                  'acs_credential_on_seam',
                  'warnings',
                ],
                type: 'object',
              },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description:
              'Reading credential data from physical encoder failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SCAN_CREDENTIAL'], type: 'string' },
              error: {
                oneOf: [
                  {
                    properties: {
                      message: { type: 'string' },
                      type: { enum: ['uncategorized_error'], type: 'string' },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['action_attempt_expired'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['no_credential_on_encoder'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                ],
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Encoding credential data from physical encoder.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['ENCODE_CREDENTIAL'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description:
              'Encoding credential data from physical encoder succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['ENCODE_CREDENTIAL'], type: 'string' },
              error: { nullable: true },
              result: {
                description:
                  'Means by which a user gains access at an entrance. The `acs_credential` object represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
                oneOf: [
                  {
                    description:
                      'Means by which a user gains access at an entrance. The `acs_credential` object represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
                    properties: {
                      access_method: {
                        description:
                          'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
                        enum: ['code', 'card', 'mobile_key'],
                        type: 'string',
                      },
                      acs_credential_id: {
                        description: 'ID of the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_credential_pool_id: {
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_system_id: {
                        description:
                          'ID of the access control system that contains the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_user_id: {
                        description:
                          'ID of the ACS user to whom the credential belongs.',
                        format: 'uuid',
                        type: 'string',
                      },
                      assa_abloy_vostio_metadata: {
                        description:
                          'Vostio-specific metadata for the credential.',
                        properties: {
                          door_names: {
                            items: { type: 'string' },
                            type: 'array',
                          },
                          endpoint_id: { type: 'string' },
                          key_id: { type: 'string' },
                          key_issuing_request_id: { type: 'string' },
                          override_guest_acs_entrance_ids: {
                            items: { type: 'string' },
                            type: 'array',
                          },
                        },
                        type: 'object',
                      },
                      card_number: { nullable: true, type: 'string' },
                      code: {
                        description: 'Access (PIN) code for the credential.',
                        nullable: true,
                        type: 'string',
                      },
                      created_at: {
                        description:
                          'Date and time at which the credential was created.',
                        format: 'date-time',
                        type: 'string',
                      },
                      display_name: {
                        description:
                          'Display name that corresponds to the credential type.',
                        minLength: 1,
                        type: 'string',
                      },
                      ends_at: {
                        description:
                          'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                        type: 'string',
                      },
                      errors: {
                        description:
                          'Errors associated with the `acs_credential`.',
                        items: {
                          properties: {
                            error_code: { type: 'string' },
                            message: { type: 'string' },
                          },
                          required: ['error_code', 'message'],
                          type: 'object',
                        },
                        type: 'array',
                      },
                      external_type: {
                        description:
                          'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
                        enum: [
                          'pti_card',
                          'brivo_credential',
                          'hid_credential',
                          'visionline_card',
                          'salto_ks_credential',
                          'assa_abloy_vostio_key',
                          'salto_space_key',
                        ],
                        type: 'string',
                      },
                      external_type_display_name: {
                        description:
                          'Display name that corresponds to the brand-specific terminology for the credential type.',
                        type: 'string',
                      },
                      is_issued: { type: 'boolean' },
                      is_latest_desired_state_synced_with_provider: {
                        description:
                          'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
                        nullable: true,
                        type: 'boolean',
                      },
                      is_managed: { enum: [true], type: 'boolean' },
                      is_multi_phone_sync_credential: {
                        description:
                          'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
                        type: 'boolean',
                      },
                      is_one_time_use: {
                        description:
                          'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
                        type: 'boolean',
                      },
                      issued_at: {
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      latest_desired_state_synced_with_provider_at: {
                        description:
                          'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      parent_acs_credential_id: {
                        description: 'ID of the parent credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      starts_at: {
                        description:
                          'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                        type: 'string',
                      },
                      visionline_metadata: {
                        description:
                          'Visionline-specific metadata for the credential.',
                        properties: {
                          auto_join: { type: 'boolean' },
                          card_function_type: {
                            enum: ['guest', 'staff'],
                            type: 'string',
                          },
                          card_id: { type: 'string' },
                          common_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          credential_id: { type: 'string' },
                          guest_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          is_valid: { type: 'boolean' },
                          joiner_acs_credential_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                        },
                        required: ['card_function_type'],
                        type: 'object',
                      },
                      warnings: {
                        description:
                          'Warnings associated with the `acs_credential`.',
                        items: {
                          description:
                            'Warning associated with the `acs_credential`.',
                          discriminator: { propertyName: 'warning_code' },
                          oneOf: [
                            {
                              description:
                                'Indicates that the credential is waiting to be issued.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['waiting_to_be_issued'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                "Indicates that the schedule of one of the credential's children was modified externally.",
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['schedule_externally_modified'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['schedule_modified'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Indicates that this credential is being deleted.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['being_deleted'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['unknown_issue_with_acs_credential'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['needs_to_be_reissued'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                          ],
                        },
                        type: 'array',
                      },
                      workspace_id: {
                        description:
                          'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: [
                      'acs_credential_id',
                      'acs_system_id',
                      'display_name',
                      'access_method',
                      'created_at',
                      'workspace_id',
                      'errors',
                      'warnings',
                      'is_managed',
                    ],
                    type: 'object',
                    'x-route-path': '/acs/credentials',
                  },
                  {
                    description:
                      'Means by which a user gains access at an entrance. The `unmanaged_acs_credential` object, which is not managed by Seam, represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
                    properties: {
                      access_method: {
                        description:
                          'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
                        enum: ['code', 'card', 'mobile_key'],
                        type: 'string',
                      },
                      acs_credential_id: {
                        description: 'ID of the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_credential_pool_id: {
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_system_id: {
                        description:
                          'ID of the access control system that contains the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_user_id: {
                        description:
                          'ID of the ACS user to whom the credential belongs.',
                        format: 'uuid',
                        type: 'string',
                      },
                      assa_abloy_vostio_metadata: {
                        description:
                          'Vostio-specific metadata for the credential.',
                        properties: {
                          door_names: {
                            items: { type: 'string' },
                            type: 'array',
                          },
                          endpoint_id: { type: 'string' },
                          key_id: { type: 'string' },
                          key_issuing_request_id: { type: 'string' },
                          override_guest_acs_entrance_ids: {
                            items: { type: 'string' },
                            type: 'array',
                          },
                        },
                        type: 'object',
                      },
                      card_number: { nullable: true, type: 'string' },
                      code: {
                        description: 'Access (PIN) code for the credential.',
                        nullable: true,
                        type: 'string',
                      },
                      created_at: {
                        description:
                          'Date and time at which the credential was created.',
                        format: 'date-time',
                        type: 'string',
                      },
                      display_name: {
                        description:
                          'Display name that corresponds to the credential type.',
                        minLength: 1,
                        type: 'string',
                      },
                      ends_at: {
                        description:
                          'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                        type: 'string',
                      },
                      errors: {
                        description:
                          'Errors associated with the `acs_credential`.',
                        items: {
                          properties: {
                            error_code: { type: 'string' },
                            message: { type: 'string' },
                          },
                          required: ['error_code', 'message'],
                          type: 'object',
                        },
                        type: 'array',
                      },
                      external_type: {
                        description:
                          'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
                        enum: [
                          'pti_card',
                          'brivo_credential',
                          'hid_credential',
                          'visionline_card',
                          'salto_ks_credential',
                          'assa_abloy_vostio_key',
                          'salto_space_key',
                        ],
                        type: 'string',
                      },
                      external_type_display_name: {
                        description:
                          'Display name that corresponds to the brand-specific terminology for the credential type.',
                        type: 'string',
                      },
                      is_issued: { type: 'boolean' },
                      is_latest_desired_state_synced_with_provider: {
                        description:
                          'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
                        nullable: true,
                        type: 'boolean',
                      },
                      is_managed: { enum: [false], type: 'boolean' },
                      is_multi_phone_sync_credential: {
                        description:
                          'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
                        type: 'boolean',
                      },
                      is_one_time_use: {
                        description:
                          'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
                        type: 'boolean',
                      },
                      issued_at: {
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      latest_desired_state_synced_with_provider_at: {
                        description:
                          'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      parent_acs_credential_id: {
                        description: 'ID of the parent credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                      starts_at: {
                        description:
                          'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                        type: 'string',
                      },
                      visionline_metadata: {
                        description:
                          'Visionline-specific metadata for the credential.',
                        properties: {
                          auto_join: { type: 'boolean' },
                          card_function_type: {
                            enum: ['guest', 'staff'],
                            type: 'string',
                          },
                          card_id: { type: 'string' },
                          common_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          credential_id: { type: 'string' },
                          guest_acs_entrance_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                          is_valid: { type: 'boolean' },
                          joiner_acs_credential_ids: {
                            items: { format: 'uuid', type: 'string' },
                            type: 'array',
                          },
                        },
                        required: ['card_function_type'],
                        type: 'object',
                      },
                      warnings: {
                        description:
                          'Warnings associated with the `acs_credential`.',
                        items: {
                          description:
                            'Warning associated with the `acs_credential`.',
                          discriminator: { propertyName: 'warning_code' },
                          oneOf: [
                            {
                              description:
                                'Indicates that the credential is waiting to be issued.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['waiting_to_be_issued'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                "Indicates that the schedule of one of the credential's children was modified externally.",
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['schedule_externally_modified'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['schedule_modified'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Indicates that this credential is being deleted.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['being_deleted'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['unknown_issue_with_acs_credential'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                            {
                              description:
                                'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                              properties: {
                                created_at: {
                                  description:
                                    'Date and time at which Seam created the warning.',
                                  format: 'date-time',
                                  type: 'string',
                                },
                                message: {
                                  description:
                                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                                  type: 'string',
                                },
                                warning_code: {
                                  description:
                                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                                  enum: ['needs_to_be_reissued'],
                                  type: 'string',
                                },
                              },
                              required: [
                                'created_at',
                                'message',
                                'warning_code',
                              ],
                              type: 'object',
                            },
                          ],
                        },
                        type: 'array',
                      },
                      workspace_id: {
                        description:
                          'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: [
                      'acs_credential_id',
                      'acs_system_id',
                      'display_name',
                      'access_method',
                      'created_at',
                      'workspace_id',
                      'errors',
                      'warnings',
                      'is_managed',
                    ],
                    type: 'object',
                    'x-route-path': '/acs/credentials/unmanaged',
                  },
                ],
                'x-route-path': '/acs/credentials',
              },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description:
              'Encoding credential data from physical encoder failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['ENCODE_CREDENTIAL'], type: 'string' },
              error: {
                oneOf: [
                  {
                    properties: {
                      message: { type: 'string' },
                      type: { enum: ['uncategorized_error'], type: 'string' },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['action_attempt_expired'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['no_credential_on_encoder'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['incompatible_card_format'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                  {
                    properties: {
                      message: { type: 'string' },
                      type: {
                        enum: ['credential_cannot_be_reissued'],
                        type: 'string',
                      },
                    },
                    required: ['type', 'message'],
                    type: 'object',
                  },
                ],
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Resetting sandbox workspace.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['RESET_SANDBOX_WORKSPACE'],
                type: 'string',
              },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Resetting sandbox workspace succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['RESET_SANDBOX_WORKSPACE'],
                type: 'string',
              },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Resetting sandbox workspace failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['RESET_SANDBOX_WORKSPACE'],
                type: 'string',
              },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Setting fan mode.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_FAN_MODE'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Setting fan mode succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_FAN_MODE'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Setting fan mode failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_FAN_MODE'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Setting HVAC mode.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_HVAC_MODE'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Setting HVAC mode succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_HVAC_MODE'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Setting HVAC mode failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SET_HVAC_MODE'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            description: 'Activating climate preset.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['ACTIVATE_CLIMATE_PRESET'],
                type: 'string',
              },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            description: 'Activating climate preset succeeded.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['ACTIVATE_CLIMATE_PRESET'],
                type: 'string',
              },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            description: 'Activating climate preset failed.',
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: {
                enum: ['ACTIVATE_CLIMATE_PRESET'],
                type: 'string',
              },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SYNC_ACCESS_CODES'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SYNC_ACCESS_CODES'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['SYNC_ACCESS_CODES'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { properties: { access_code: {} }, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_ACCESS_CODE'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_ACCESS_CODE'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_ACCESS_CODE'], type: 'string' },
              error: { nullable: true },
              result: { properties: { access_code: {} }, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_ACCESS_CODE'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { properties: { noise_threshold: {} }, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['CREATE_NOISE_THRESHOLD'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { properties: {}, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['DELETE_NOISE_THRESHOLD'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { nullable: true },
              status: { enum: ['pending'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'error',
              'action_type',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_NOISE_THRESHOLD'], type: 'string' },
              error: { nullable: true },
              result: { properties: { noise_threshold: {} }, type: 'object' },
              status: { enum: ['success'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'error',
              'action_type',
              'result',
            ],
            type: 'object',
          },
          {
            properties: {
              action_attempt_id: {
                description: 'The ID of the action attempt.',
                format: 'uuid',
                type: 'string',
                'x-title': 'Action Attempt ID',
              },
              action_type: { enum: ['UPDATE_NOISE_THRESHOLD'], type: 'string' },
              error: {
                properties: {
                  message: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['type', 'message'],
                type: 'object',
              },
              result: { nullable: true },
              status: { enum: ['error'], type: 'string' },
            },
            required: [
              'action_attempt_id',
              'status',
              'result',
              'action_type',
              'error',
            ],
            type: 'object',
          },
        ],
        'x-route-path': '/action_attempts',
      },
      client_session: {
        properties: {
          client_session_id: { format: 'uuid', type: 'string' },
          connect_webview_ids: {
            items: { format: 'uuid', type: 'string' },
            type: 'array',
          },
          connected_account_ids: {
            items: { format: 'uuid', type: 'string' },
            type: 'array',
          },
          created_at: { format: 'date-time', type: 'string' },
          device_count: { format: 'float', type: 'number' },
          expires_at: { format: 'date-time', type: 'string' },
          token: { type: 'string' },
          user_identifier_key: { nullable: true, type: 'string' },
          user_identity_ids: {
            items: { format: 'uuid', type: 'string' },
            type: 'array',
          },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: [
          'client_session_id',
          'workspace_id',
          'created_at',
          'expires_at',
          'token',
          'user_identifier_key',
          'device_count',
          'connected_account_ids',
          'connect_webview_ids',
          'user_identity_ids',
        ],
        type: 'object',
        'x-route-path': '/client_sessions',
      },
      connect_webview: {
        properties: {
          accepted_devices: {
            deprecated: true,
            items: { type: 'string' },
            type: 'array',
            'x-deprecated': 'Unused. Will be removed.',
          },
          accepted_providers: { items: { type: 'string' }, type: 'array' },
          any_device_allowed: {
            deprecated: true,
            type: 'boolean',
            'x-deprecated': 'Unused. Will be removed.',
          },
          any_provider_allowed: { type: 'boolean' },
          authorized_at: {
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          automatically_manage_new_devices: { type: 'boolean' },
          connect_webview_id: { format: 'uuid', type: 'string' },
          connected_account_id: {
            format: 'uuid',
            nullable: true,
            type: 'string',
          },
          created_at: { format: 'date-time', type: 'string' },
          custom_metadata: {
            additionalProperties: {
              oneOf: [{ type: 'string' }, { type: 'boolean' }],
            },
            type: 'object',
          },
          custom_redirect_failure_url: {
            format: 'uri',
            nullable: true,
            type: 'string',
          },
          custom_redirect_url: {
            format: 'uri',
            nullable: true,
            type: 'string',
          },
          device_selection_mode: {
            enum: ['none', 'single', 'multiple'],
            type: 'string',
          },
          login_successful: { type: 'boolean' },
          selected_provider: { nullable: true, type: 'string' },
          status: { enum: ['pending', 'failed', 'authorized'], type: 'string' },
          url: { format: 'uri', type: 'string' },
          wait_for_device_creation: { type: 'boolean' },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: [
          'connect_webview_id',
          'workspace_id',
          'created_at',
          'connected_account_id',
          'url',
          'device_selection_mode',
          'accepted_providers',
          'accepted_devices',
          'any_device_allowed',
          'any_provider_allowed',
          'login_successful',
          'status',
          'custom_redirect_url',
          'custom_redirect_failure_url',
          'custom_metadata',
          'automatically_manage_new_devices',
          'wait_for_device_creation',
          'authorized_at',
          'selected_provider',
        ],
        type: 'object',
        'x-route-path': '/connect_webviews',
      },
      connected_account: {
        properties: {
          account_type: { type: 'string' },
          account_type_display_name: { type: 'string' },
          automatically_manage_new_devices: { type: 'boolean' },
          connected_account_id: { format: 'uuid', type: 'string' },
          created_at: { format: 'date-time', type: 'string' },
          custom_metadata: {
            additionalProperties: {
              oneOf: [{ type: 'string' }, { type: 'boolean' }],
            },
            type: 'object',
          },
          errors: {
            items: {
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description: 'Account is disconnected.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
                {
                  description: 'Credentials provided were invalid.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['invalid_credentials'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          user_identifier: {
            properties: {
              api_url: { type: 'string' },
              email: { type: 'string' },
              exclusive: { type: 'boolean' },
              phone: { type: 'string' },
              username: { type: 'string' },
            },
            type: 'object',
          },
          warnings: {
            items: {
              description: 'Warning associated with the `connected_account`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description: 'Scheduled downtime for account planned.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['scheduled_maintenance_window'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this connected account with the provider. This issue may affect the proper functioning of one or more resources in this account.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['unknown_issue_with_connected_account'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
        },
        required: [
          'account_type_display_name',
          'errors',
          'warnings',
          'custom_metadata',
          'automatically_manage_new_devices',
        ],
        type: 'object',
        'x-route-path': '/connected_accounts',
      },
      device: {
        properties: {
          can_hvac_cool: { type: 'boolean' },
          can_hvac_heat: { type: 'boolean' },
          can_hvac_heat_cool: { type: 'boolean' },
          can_program_offline_access_codes: { type: 'boolean' },
          can_program_online_access_codes: { type: 'boolean' },
          can_remotely_lock: { type: 'boolean' },
          can_remotely_unlock: { type: 'boolean' },
          can_simulate_connection: { type: 'boolean' },
          can_simulate_disconnection: { type: 'boolean' },
          can_simulate_removal: { type: 'boolean' },
          can_turn_off_hvac: { type: 'boolean' },
          capabilities_supported: {
            description:
              'Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.',
            items: {
              enum: [
                'access_code',
                'lock',
                'noise_detection',
                'thermostat',
                'battery',
                'phone',
              ],
              type: 'string',
            },
            type: 'array',
          },
          connected_account_id: {
            description:
              'Unique identifier for the account associated with the device.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description:
              'Date and time at which the device object was created.',
            format: 'date-time',
            type: 'string',
          },
          custom_metadata: {
            additionalProperties: {
              oneOf: [{ type: 'string' }, { type: 'boolean' }],
            },
            type: 'object',
          },
          device_id: {
            description: 'Unique identifier for the device.',
            format: 'uuid',
            type: 'string',
          },
          device_type: {
            description: 'Type of the device.',
            oneOf: [
              {
                enum: [
                  'akuvox_lock',
                  'august_lock',
                  'brivo_access_point',
                  'butterflymx_panel',
                  'avigilon_alta_entry',
                  'doorking_lock',
                  'genie_door',
                  'igloo_lock',
                  'linear_lock',
                  'lockly_lock',
                  'kwikset_lock',
                  'nuki_lock',
                  'salto_lock',
                  'schlage_lock',
                  'seam_relay',
                  'smartthings_lock',
                  'wyze_lock',
                  'yale_lock',
                  'two_n_intercom',
                  'controlbyweb_device',
                  'ttlock_lock',
                  'igloohome_lock',
                  'hubitat_lock',
                  'four_suites_door',
                  'dormakaba_oracode_door',
                  'tedee_lock',
                  'akiles_lock',
                ],
                type: 'string',
              },
              {
                enum: ['noiseaware_activity_zone', 'minut_sensor'],
                type: 'string',
              },
              {
                enum: [
                  'ecobee_thermostat',
                  'nest_thermostat',
                  'honeywell_resideo_thermostat',
                  'tado_thermostat',
                ],
                type: 'string',
              },
              {
                description: 'Type of phone.',
                enum: ['ios_phone', 'android_phone'],
                type: 'string',
              },
            ],
          },
          display_name: {
            description:
              'Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.',
            type: 'string',
          },
          errors: {
            description:
              'Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.',
            items: {
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description: 'Device is offline',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_offline'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device has been removed',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_removed'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Hub is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hub_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The backup access code pool is empty.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['empty_backup_access_code_pool'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'User is not authorized to use the August Lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_not_authorized'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not connected to the Seam Bridge.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_bridge'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user limit reached.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_limit_reached'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not paired with a Gateway.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_not_paired_to_gateway'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Missing device credentials.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['missing_device_credentials'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The auxiliary heat is running.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['auxiliary_heat_running'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Subscription required to connect.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['subscription_required'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Account is disconnected.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
                {
                  description: 'Credentials provided were invalid.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['invalid_credentials'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          is_managed: {
            description: 'Indicates whether Seam manages the device.',
            enum: [true],
            type: 'boolean',
          },
          location: {
            description: 'Location information for the device.',
            nullable: true,
            properties: {
              location_name: {
                description: 'Name of the device location.',
                type: 'string',
              },
              timezone: {
                description: 'Time zone of the device location.',
                type: 'string',
              },
            },
            type: 'object',
          },
          nickname: {
            description:
              'Optional nickname to describe the device, settable through Seam',
            type: 'string',
          },
          properties: {
            allOf: [
              {
                allOf: [
                  {
                    allOf: [
                      {
                        properties: {
                          accessory_keypad: {
                            description:
                              'Represents the accessory keypad state.',
                            properties: {
                              battery: {
                                description:
                                  'Indicates if the keypad battery properties.',
                                properties: {
                                  level: {
                                    format: 'float',
                                    maximum: 1,
                                    minimum: 0,
                                    type: 'number',
                                  },
                                },
                                required: ['level'],
                                type: 'object',
                              },
                              is_connected: {
                                description:
                                  'Indicates if the accessory_keypad is connected to the device.',
                                type: 'boolean',
                              },
                            },
                            required: ['is_connected'],
                            type: 'object',
                          },
                          appearance: {
                            properties: {
                              name: {
                                description:
                                  'Name of the device as seen from the provider API and application, not settable through Seam.',
                                type: 'string',
                              },
                            },
                            required: ['name'],
                            type: 'object',
                          },
                          battery: {
                            description:
                              'Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.',
                            properties: {
                              level: {
                                format: 'float',
                                maximum: 1,
                                minimum: 0,
                                type: 'number',
                              },
                              status: {
                                enum: ['critical', 'low', 'good', 'full'],
                                type: 'string',
                              },
                            },
                            required: ['level', 'status'],
                            type: 'object',
                          },
                          battery_level: {
                            description:
                              'Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.',
                            format: 'float',
                            maximum: 1,
                            minimum: 0,
                            type: 'number',
                          },
                          currently_triggering_noise_threshold_ids: {
                            description:
                              'Array of noise threshold IDs that are currently triggering.',
                            items: { type: 'string' },
                            type: 'array',
                          },
                          has_direct_power: {
                            description:
                              'Indicates whether the device has direct power.',
                            type: 'boolean',
                          },
                          image_alt_text: {
                            description: 'Alt text for the device image.',
                            type: 'string',
                          },
                          image_url: {
                            description: 'Image URL for the device.',
                            format: 'uri',
                            type: 'string',
                          },
                          manufacturer: {
                            description: 'Manufacturer of the device.',
                            type: 'string',
                          },
                          model: {
                            properties: {
                              accessory_keypad_supported: {
                                deprecated: true,
                                type: 'boolean',
                                'x-deprecated':
                                  'use device.properties.model.can_connect_accessory_keypad',
                              },
                              can_connect_accessory_keypad: {
                                description:
                                  'Indicates whether the device can connect a accessory keypad.',
                                type: 'boolean',
                              },
                              display_name: {
                                description:
                                  'Display name of the device model.',
                                type: 'string',
                              },
                              has_built_in_keypad: {
                                description:
                                  'Indicates whether the device has a built in accessory keypad.',
                                type: 'boolean',
                              },
                              manufacturer_display_name: {
                                description:
                                  'Display name that corresponds to the manufacturer-specific terminology for the device.',
                                type: 'string',
                              },
                              offline_access_codes_supported: {
                                description:
                                  'Indicates whether the device supports offline access codes.',
                                type: 'boolean',
                              },
                              online_access_codes_supported: {
                                description:
                                  'Indicates whether the device supports online access codes.',
                                type: 'boolean',
                              },
                            },
                            required: [
                              'display_name',
                              'manufacturer_display_name',
                            ],
                            type: 'object',
                          },
                          name: {
                            deprecated: true,
                            description: 'Name of the device.',
                            type: 'string',
                            'x-deprecated': 'use device.display_name instead',
                          },
                          noise_level_decibels: {
                            description:
                              'Indicates current noise level in decibels, if the device supports noise detection.',
                            format: 'float',
                            type: 'number',
                          },
                          offline_access_codes_enabled: {
                            description:
                              'Indicates whether it is currently possible to use offline access codes for the device.',
                            type: 'boolean',
                          },
                          online: {
                            description:
                              'Indicates whether the device is online.',
                            type: 'boolean',
                          },
                          online_access_codes_enabled: {
                            description:
                              'Indicates whether it is currently possible to use online access codes for the device.',
                            type: 'boolean',
                          },
                          serial_number: {
                            description: 'Serial number of the device.',
                            type: 'string',
                          },
                          supports_accessory_keypad: {
                            deprecated: true,
                            type: 'boolean',
                            'x-deprecated':
                              'use device.properties.model.can_connect_accessory_keypad',
                          },
                          supports_offline_access_codes: {
                            deprecated: true,
                            type: 'boolean',
                            'x-deprecated': 'use offline_access_codes_enabled',
                          },
                        },
                        required: ['online', 'name', 'appearance', 'model'],
                        type: 'object',
                      },
                      {
                        description: 'Properties of the phone.',
                        properties: {
                          assa_abloy_credential_service_metadata: {
                            description:
                              'ASSA ABLOY Credential Service metadata for the phone.',
                            properties: {
                              endpoints: {
                                description:
                                  'Endpoints associated with the phone.',
                                items: {
                                  properties: {
                                    endpoint_id: {
                                      description:
                                        'ID of the associated endpoint.',
                                      type: 'string',
                                    },
                                    is_active: {
                                      description:
                                        'Indicated whether the endpoint is active.',
                                      type: 'boolean',
                                    },
                                  },
                                  required: ['endpoint_id', 'is_active'],
                                  type: 'object',
                                },
                                type: 'array',
                              },
                              has_active_endpoint: {
                                description:
                                  'Indicates whether the credential service has active endpoints associated with the phone.',
                                type: 'boolean',
                              },
                            },
                            required: ['has_active_endpoint', 'endpoints'],
                            type: 'object',
                          },
                          salto_space_credential_service_metadata: {
                            description:
                              'Salto Space credential service metadata for the phone.',
                            properties: {
                              has_active_phone: {
                                description:
                                  'Indicates whether the credential service has an active associated phone.',
                                type: 'boolean',
                              },
                            },
                            required: ['has_active_phone'],
                            type: 'object',
                          },
                        },
                        type: 'object',
                      },
                    ],
                  },
                  {
                    properties: {
                      akiles_metadata: {
                        properties: {
                          _member_group_id: { type: 'string' },
                          gadget_id: { type: 'string' },
                          gadget_name: { type: 'string' },
                          product_name: { type: 'string' },
                        },
                        required: ['gadget_name', 'gadget_id', 'product_name'],
                        type: 'object',
                      },
                      assa_abloy_vostio_metadata: {
                        properties: { encoder_name: { type: 'string' } },
                        required: ['encoder_name'],
                        type: 'object',
                      },
                      august_metadata: {
                        properties: {
                          has_keypad: { type: 'boolean' },
                          house_id: { type: 'string' },
                          house_name: { type: 'string' },
                          keypad_battery_level: { type: 'string' },
                          lock_id: { type: 'string' },
                          lock_name: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: [
                          'lock_id',
                          'lock_name',
                          'house_name',
                          'has_keypad',
                        ],
                        type: 'object',
                      },
                      avigilon_alta_metadata: {
                        properties: {
                          entry_name: { type: 'string' },
                          entry_relays_total_count: {
                            format: 'float',
                            type: 'number',
                          },
                          org_name: { type: 'string' },
                          site_id: { format: 'float', type: 'number' },
                          site_name: { type: 'string' },
                          zone_id: { format: 'float', type: 'number' },
                          zone_name: { type: 'string' },
                        },
                        required: [
                          'entry_name',
                          'org_name',
                          'zone_id',
                          'zone_name',
                          'site_id',
                          'site_name',
                          'entry_relays_total_count',
                        ],
                        type: 'object',
                      },
                      brivo_metadata: {
                        properties: { device_name: { type: 'string' } },
                        required: ['device_name'],
                        type: 'object',
                      },
                      controlbyweb_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          relay_name: { nullable: true, type: 'string' },
                        },
                        required: ['device_id', 'device_name', 'relay_name'],
                        type: 'object',
                      },
                      dormakaba_oracode_metadata: {
                        properties: {
                          device_id: {
                            oneOf: [
                              { format: 'float', type: 'number' },
                              { type: 'string' },
                            ],
                          },
                          door_id: { format: 'float', type: 'number' },
                          door_is_wireless: { type: 'boolean' },
                          door_name: { type: 'string' },
                          iana_timezone: { type: 'string' },
                          predefined_time_slots: {
                            items: {
                              properties: {
                                check_in_time: { type: 'string' },
                                check_out_time: { type: 'string' },
                                dormakaba_oracode_user_level_id: {
                                  format: 'uuid',
                                  type: 'string',
                                },
                                ext_dormakaba_oracode_user_level_prefix: {
                                  format: 'float',
                                  type: 'number',
                                },
                                is_24_hour: { type: 'boolean' },
                                is_biweekly_mode: { type: 'boolean' },
                                is_master: { type: 'boolean' },
                                is_one_shot: { type: 'boolean' },
                                name: { type: 'string' },
                                prefix: { format: 'float', type: 'number' },
                              },
                              required: [
                                'name',
                                'prefix',
                                'check_in_time',
                                'check_out_time',
                                'is_24_hour',
                                'is_biweekly_mode',
                                'is_one_shot',
                                'is_master',
                                'ext_dormakaba_oracode_user_level_prefix',
                                'dormakaba_oracode_user_level_id',
                              ],
                              type: 'object',
                            },
                            type: 'array',
                          },
                          site_id: {
                            description: '@DEPRECATED',
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                          site_name: { type: 'string' },
                        },
                        required: [
                          'door_name',
                          'door_is_wireless',
                          'site_id',
                          'site_name',
                        ],
                        type: 'object',
                      },
                      ecobee_metadata: {
                        properties: {
                          device_name: { type: 'string' },
                          ecobee_device_id: { type: 'string' },
                        },
                        required: ['ecobee_device_id', 'device_name'],
                        type: 'object',
                      },
                      four_suites_metadata: {
                        properties: {
                          device_id: { format: 'float', type: 'number' },
                          device_name: { type: 'string' },
                          reclose_delay_in_seconds: {
                            format: 'float',
                            type: 'number',
                          },
                        },
                        required: [
                          'device_id',
                          'device_name',
                          'reclose_delay_in_seconds',
                        ],
                        type: 'object',
                      },
                      genie_metadata: {
                        properties: {
                          device_name: { type: 'string' },
                          door_name: { type: 'string' },
                        },
                        required: ['device_name', 'door_name'],
                        type: 'object',
                      },
                      honeywell_resideo_metadata: {
                        properties: {
                          device_name: { type: 'string' },
                          honeywell_resideo_device_id: { type: 'string' },
                        },
                        required: [
                          'honeywell_resideo_device_id',
                          'device_name',
                        ],
                        type: 'object',
                      },
                      hubitat_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_label: { type: 'string' },
                          device_name: { type: 'string' },
                        },
                        required: ['device_id', 'device_name', 'device_label'],
                        type: 'object',
                      },
                      igloo_metadata: {
                        properties: {
                          bridge_id: { type: 'string' },
                          device_id: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: ['device_id', 'bridge_id'],
                        type: 'object',
                      },
                      igloohome_metadata: {
                        properties: {
                          bridge_id: { type: 'string' },
                          bridge_name: { type: 'string' },
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          keypad_id: { type: 'string' },
                        },
                        required: ['device_id', 'device_name'],
                        type: 'object',
                      },
                      kwikset_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          model_number: { type: 'string' },
                        },
                        required: ['device_id', 'device_name', 'model_number'],
                        type: 'object',
                      },
                      lockly_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: ['device_id', 'device_name'],
                        type: 'object',
                      },
                      minut_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          latest_sensor_values: {
                            properties: {
                              accelerometer_z: {
                                properties: {
                                  time: { type: 'string' },
                                  value: { format: 'float', type: 'number' },
                                },
                                required: ['time', 'value'],
                                type: 'object',
                              },
                              humidity: {
                                properties: {
                                  time: { type: 'string' },
                                  value: { format: 'float', type: 'number' },
                                },
                                required: ['time', 'value'],
                                type: 'object',
                              },
                              pressure: {
                                properties: {
                                  time: { type: 'string' },
                                  value: { format: 'float', type: 'number' },
                                },
                                required: ['time', 'value'],
                                type: 'object',
                              },
                              sound: {
                                properties: {
                                  time: { type: 'string' },
                                  value: { format: 'float', type: 'number' },
                                },
                                required: ['time', 'value'],
                                type: 'object',
                              },
                              temperature: {
                                properties: {
                                  time: { type: 'string' },
                                  value: { format: 'float', type: 'number' },
                                },
                                required: ['time', 'value'],
                                type: 'object',
                              },
                            },
                            required: [
                              'temperature',
                              'sound',
                              'humidity',
                              'pressure',
                              'accelerometer_z',
                            ],
                            type: 'object',
                          },
                        },
                        required: [
                          'device_id',
                          'device_name',
                          'latest_sensor_values',
                        ],
                        type: 'object',
                      },
                      nest_metadata: {
                        properties: {
                          device_custom_name: { type: 'string' },
                          device_name: { type: 'string' },
                          display_name: { type: 'string' },
                          nest_device_id: { type: 'string' },
                        },
                        required: [
                          'nest_device_id',
                          'device_name',
                          'device_custom_name',
                        ],
                        type: 'object',
                      },
                      noiseaware_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_model: {
                            enum: ['indoor', 'outdoor'],
                            type: 'string',
                          },
                          device_name: { type: 'string' },
                          noise_level_decibel: {
                            format: 'float',
                            type: 'number',
                          },
                          noise_level_nrs: { format: 'float', type: 'number' },
                        },
                        required: [
                          'device_model',
                          'noise_level_nrs',
                          'noise_level_decibel',
                          'device_name',
                          'device_id',
                        ],
                        type: 'object',
                      },
                      nuki_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          keypad_2_paired: { type: 'boolean' },
                          keypad_battery_critical: { type: 'boolean' },
                          keypad_paired: { type: 'boolean' },
                        },
                        required: ['device_id', 'device_name'],
                        type: 'object',
                      },
                      salto_ks_metadata: {
                        properties: {
                          battery_level: { type: 'string' },
                          customer_reference: { type: 'string' },
                          lock_id: { type: 'string' },
                          lock_type: { type: 'string' },
                          locked_state: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: [
                          'lock_id',
                          'customer_reference',
                          'lock_type',
                          'battery_level',
                          'locked_state',
                        ],
                        type: 'object',
                      },
                      salto_metadata: {
                        description:
                          '\n    ---\n    deprecated: Use `salto_ks_metadata ` instead.\n    ',
                        properties: {
                          battery_level: { type: 'string' },
                          customer_reference: { type: 'string' },
                          lock_id: { type: 'string' },
                          lock_type: { type: 'string' },
                          locked_state: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: [
                          'lock_id',
                          'customer_reference',
                          'lock_type',
                          'battery_level',
                          'locked_state',
                        ],
                        type: 'object',
                      },
                      schlage_metadata: {
                        properties: {
                          access_code_length: {
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: [
                          'device_id',
                          'device_name',
                          'access_code_length',
                        ],
                        type: 'object',
                      },
                      seam_bridge_metadata: {
                        properties: {
                          device_num: { format: 'float', type: 'number' },
                          name: { type: 'string' },
                          unlock_method: {
                            enum: ['bridge', 'doorking'],
                            type: 'string',
                          },
                        },
                        required: ['device_num', 'name'],
                        type: 'object',
                      },
                      smartthings_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_name: { type: 'string' },
                          location_id: { type: 'string' },
                          model: { type: 'string' },
                        },
                        required: ['device_id', 'device_name'],
                        type: 'object',
                      },
                      tado_metadata: {
                        properties: {
                          device_type: { type: 'string' },
                          serial_no: { type: 'string' },
                        },
                        required: ['serial_no', 'device_type'],
                        type: 'object',
                      },
                      tedee_metadata: {
                        properties: {
                          bridge_id: { format: 'float', type: 'number' },
                          bridge_name: { type: 'string' },
                          device_id: { format: 'float', type: 'number' },
                          device_model: { type: 'string' },
                          device_name: { type: 'string' },
                          keypad_id: { format: 'float', type: 'number' },
                          serial_number: { type: 'string' },
                        },
                        required: [
                          'device_id',
                          'serial_number',
                          'device_name',
                          'device_model',
                          'bridge_id',
                          'bridge_name',
                        ],
                        type: 'object',
                      },
                      ttlock_metadata: {
                        properties: {
                          feature_value: { type: 'string' },
                          features: {
                            properties: {
                              incomplete_keyboard_passcode: { type: 'boolean' },
                              lock_command: { type: 'boolean' },
                              passcode: { type: 'boolean' },
                              passcode_management: { type: 'boolean' },
                              unlock_via_gateway: { type: 'boolean' },
                            },
                            required: [
                              'passcode',
                              'passcode_management',
                              'unlock_via_gateway',
                              'lock_command',
                              'incomplete_keyboard_passcode',
                            ],
                            type: 'object',
                          },
                          has_gateway: { type: 'boolean' },
                          lock_alias: { type: 'string' },
                          lock_id: { format: 'float', type: 'number' },
                          wireless_keypads: {
                            items: {
                              properties: {
                                wireless_keypad_id: {
                                  format: 'float',
                                  type: 'number',
                                },
                                wireless_keypad_name: { type: 'string' },
                              },
                              required: [
                                'wireless_keypad_id',
                                'wireless_keypad_name',
                              ],
                              type: 'object',
                            },
                            type: 'array',
                          },
                        },
                        required: [
                          'lock_id',
                          'lock_alias',
                          'feature_value',
                          'features',
                        ],
                        type: 'object',
                      },
                      two_n_metadata: {
                        properties: {
                          device_id: { format: 'float', type: 'number' },
                          device_name: { type: 'string' },
                        },
                        required: ['device_id', 'device_name'],
                        type: 'object',
                      },
                      visionline_metadata: {
                        properties: { encoder_id: { type: 'string' } },
                        required: ['encoder_id'],
                        type: 'object',
                      },
                      wyze_metadata: {
                        properties: {
                          device_id: { type: 'string' },
                          device_info_model: { type: 'string' },
                          device_name: { type: 'string' },
                          keypad_uuid: { type: 'string' },
                          locker_status_hardlock: {
                            format: 'float',
                            type: 'number',
                          },
                          product_model: { type: 'string' },
                          product_name: { type: 'string' },
                          product_type: { type: 'string' },
                        },
                        required: [
                          'device_id',
                          'device_name',
                          'product_name',
                          'product_type',
                          'product_model',
                          'device_info_model',
                        ],
                        type: 'object',
                      },
                    },
                    type: 'object',
                  },
                ],
              },
              {
                allOf: [
                  {
                    properties: {
                      _experimental_supported_code_from_access_codes_lengths: {
                        items: { format: 'float', type: 'number' },
                        type: 'array',
                      },
                      code_constraints: {
                        items: {
                          oneOf: [
                            {
                              properties: {
                                constraint_type: {
                                  enum: [
                                    'no_zeros',
                                    'cannot_start_with_12',
                                    'no_triple_consecutive_ints',
                                    'cannot_specify_pin_code',
                                    'pin_code_matches_existing_set',
                                    'start_date_in_future',
                                    'no_ascending_or_descending_sequence',
                                    'at_least_three_unique_digits',
                                    'cannot_contain_089',
                                    'cannot_contain_0789',
                                  ],
                                  type: 'string',
                                },
                              },
                              required: ['constraint_type'],
                              type: 'object',
                            },
                            {
                              properties: {
                                constraint_type: {
                                  enum: ['name_length', 'name_must_be_unique'],
                                  type: 'string',
                                },
                                max_length: { format: 'float', type: 'number' },
                                min_length: { format: 'float', type: 'number' },
                              },
                              required: ['constraint_type'],
                              type: 'object',
                            },
                          ],
                        },
                        type: 'array',
                      },
                      door_open: { type: 'boolean' },
                      has_native_entry_events: { type: 'boolean' },
                      keypad_battery: {
                        properties: {
                          level: { format: 'float', type: 'number' },
                        },
                        required: ['level'],
                        type: 'object',
                      },
                      locked: { type: 'boolean' },
                      max_active_codes_supported: {
                        format: 'float',
                        type: 'number',
                      },
                      supported_code_lengths: {
                        items: { format: 'float', type: 'number' },
                        type: 'array',
                      },
                      supports_backup_access_code_pool: { type: 'boolean' },
                    },
                    type: 'object',
                  },
                  {
                    properties: {
                      active_thermostat_schedule: {
                        default: null,
                        description:
                          'Represents a [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) that activates a configured [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) on a [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) at a specified starting time and deactivates the climate preset at a specified ending time.',
                        nullable: true,
                        properties: {
                          climate_preset_key: {
                            description:
                              'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to use for the thermostat schedule.',
                            type: 'string',
                          },
                          created_at: {
                            description:
                              'Date and time at which the thermostat schedule was created.',
                            format: 'date-time',
                            type: 'string',
                          },
                          device_id: {
                            description: 'ID of the desired thermostat device.',
                            format: 'uuid',
                            type: 'string',
                          },
                          ends_at: {
                            description:
                              'Date and time at which the thermostat schedule ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                            format: 'date-time',
                            type: 'string',
                          },
                          errors: {
                            description:
                              'Array of errors associated with the thermostat schedule. Each error object within the array contains two fields: `error_code` and `message`. `error_code` is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. `message` provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.',
                            items: {
                              properties: {
                                error_code: { type: 'string' },
                                message: { type: 'string' },
                              },
                              required: ['error_code', 'message'],
                              type: 'object',
                            },
                            type: 'array',
                          },
                          max_override_period_minutes: {
                            description:
                              "Number of minutes for which a person at the thermostat can change the thermostat's settings after the activation of the scheduled climate preset. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                            minimum: 0,
                            type: 'integer',
                          },
                          name: {
                            description:
                              'User-friendly name to identify the thermostat schedule.',
                            type: 'string',
                          },
                          starts_at: {
                            description:
                              'Date and time at which the thermostat schedule starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                            format: 'date-time',
                            type: 'string',
                          },
                          thermostat_schedule_id: {
                            description: 'ID of the thermostat schedule.',
                            format: 'uuid',
                            type: 'string',
                          },
                          unstable_is_override_allowed: {
                            description:
                              "Indicates whether a person at the thermostat can change the thermostat's settings.",
                            type: 'boolean',
                            'x-undocumented': 'Unstable',
                          },
                        },
                        required: [
                          'thermostat_schedule_id',
                          'device_id',
                          'climate_preset_key',
                          'max_override_period_minutes',
                          'starts_at',
                          'ends_at',
                          'created_at',
                          'errors',
                        ],
                        type: 'object',
                        'x-route-path': '/thermostats/schedules',
                      },
                      available_climate_presets: {
                        items: {
                          properties: {
                            can_delete: {
                              description:
                                'Indicates whether this climate preset key can be deleted.',
                              type: 'boolean',
                            },
                            can_edit: {
                              description:
                                'Indicates whether this climate preset key can be edited.',
                              type: 'boolean',
                            },
                            climate_preset_key: {
                              description:
                                'Unique key to identify the climate preset.',
                              type: 'string',
                            },
                            cooling_set_point_celsius: {
                              description:
                                'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                              format: 'float',
                              type: 'number',
                            },
                            cooling_set_point_fahrenheit: {
                              description:
                                'Temperature to which the thermostat should cool (in °F).',
                              format: 'float',
                              type: 'number',
                            },
                            display_name: {
                              description:
                                'Display name for the climate preset.',
                              type: 'string',
                            },
                            fan_mode_setting: {
                              description:
                                'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                              enum: ['auto', 'on', 'circulate'],
                              type: 'string',
                            },
                            heating_set_point_celsius: {
                              description:
                                'Temperature to which the thermostat should heat (in °C).',
                              format: 'float',
                              type: 'number',
                            },
                            heating_set_point_fahrenheit: {
                              description:
                                'Temperature to which the thermostat should heat (in °F).',
                              format: 'float',
                              type: 'number',
                            },
                            hvac_mode_setting: {
                              description:
                                'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                              enum: ['off', 'heat', 'cool', 'heat_cool'],
                              type: 'string',
                            },
                            manual_override_allowed: {
                              deprecated: true,
                              description:
                                "Indicates whether a person at the thermostat can change the thermostat's settings.",
                              type: 'boolean',
                              'x-deprecated':
                                "Use 'thermostat_schedule.is_override_allowed'",
                            },
                            name: {
                              default: null,
                              description:
                                'User-friendly name to identify the climate preset.',
                              nullable: true,
                              type: 'string',
                            },
                          },
                          required: [
                            'climate_preset_key',
                            'can_edit',
                            'can_delete',
                            'display_name',
                            'manual_override_allowed',
                          ],
                          type: 'object',
                        },
                        type: 'array',
                      },
                      available_fan_mode_settings: {
                        items: {
                          enum: ['auto', 'on', 'circulate'],
                          type: 'string',
                        },
                        type: 'array',
                      },
                      available_hvac_mode_settings: {
                        items: {
                          enum: ['off', 'heat', 'cool', 'heat_cool'],
                          type: 'string',
                        },
                        type: 'array',
                      },
                      current_climate_setting: {
                        properties: {
                          can_delete: {
                            description:
                              'Indicates whether this climate preset key can be deleted.',
                            type: 'boolean',
                          },
                          can_edit: {
                            description:
                              'Indicates whether this climate preset key can be edited.',
                            type: 'boolean',
                          },
                          climate_preset_key: {
                            description:
                              'Unique key to identify the climate preset.',
                            type: 'string',
                          },
                          cooling_set_point_celsius: {
                            description:
                              'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                            format: 'float',
                            type: 'number',
                          },
                          cooling_set_point_fahrenheit: {
                            description:
                              'Temperature to which the thermostat should cool (in °F).',
                            format: 'float',
                            type: 'number',
                          },
                          display_name: {
                            description: 'Display name for the climate preset.',
                            type: 'string',
                          },
                          fan_mode_setting: {
                            description:
                              'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                            enum: ['auto', 'on', 'circulate'],
                            type: 'string',
                          },
                          heating_set_point_celsius: {
                            description:
                              'Temperature to which the thermostat should heat (in °C).',
                            format: 'float',
                            type: 'number',
                          },
                          heating_set_point_fahrenheit: {
                            description:
                              'Temperature to which the thermostat should heat (in °F).',
                            format: 'float',
                            type: 'number',
                          },
                          hvac_mode_setting: {
                            description:
                              'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                            enum: ['off', 'heat', 'cool', 'heat_cool'],
                            type: 'string',
                          },
                          manual_override_allowed: {
                            deprecated: true,
                            description:
                              "Indicates whether a person at the thermostat can change the thermostat's settings.",
                            type: 'boolean',
                            'x-deprecated':
                              "Use 'thermostat_schedule.is_override_allowed'",
                          },
                          name: {
                            default: null,
                            description:
                              'User-friendly name to identify the climate preset.',
                            nullable: true,
                            type: 'string',
                          },
                        },
                        type: 'object',
                      },
                      default_climate_setting: {
                        deprecated: true,
                        properties: {
                          can_delete: {
                            description:
                              'Indicates whether this climate preset key can be deleted.',
                            type: 'boolean',
                          },
                          can_edit: {
                            description:
                              'Indicates whether this climate preset key can be edited.',
                            type: 'boolean',
                          },
                          climate_preset_key: {
                            description:
                              'Unique key to identify the climate preset.',
                            type: 'string',
                          },
                          cooling_set_point_celsius: {
                            description:
                              'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                            format: 'float',
                            type: 'number',
                          },
                          cooling_set_point_fahrenheit: {
                            description:
                              'Temperature to which the thermostat should cool (in °F).',
                            format: 'float',
                            type: 'number',
                          },
                          display_name: {
                            description: 'Display name for the climate preset.',
                            type: 'string',
                          },
                          fan_mode_setting: {
                            description:
                              'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                            enum: ['auto', 'on', 'circulate'],
                            type: 'string',
                          },
                          heating_set_point_celsius: {
                            description:
                              'Temperature to which the thermostat should heat (in °C).',
                            format: 'float',
                            type: 'number',
                          },
                          heating_set_point_fahrenheit: {
                            description:
                              'Temperature to which the thermostat should heat (in °F).',
                            format: 'float',
                            type: 'number',
                          },
                          hvac_mode_setting: {
                            description:
                              'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                            enum: ['off', 'heat', 'cool', 'heat_cool'],
                            type: 'string',
                          },
                          manual_override_allowed: {
                            deprecated: true,
                            description:
                              "Indicates whether a person at the thermostat can change the thermostat's settings.",
                            type: 'boolean',
                            'x-deprecated':
                              "Use 'thermostat_schedule.is_override_allowed'",
                          },
                          name: {
                            default: null,
                            description:
                              'User-friendly name to identify the climate preset.',
                            nullable: true,
                            type: 'string',
                          },
                        },
                        type: 'object',
                        'x-deprecated':
                          'use fallback_climate_preset_key to specify a fallback climate preset instead.',
                      },
                      fallback_climate_preset_key: {
                        default: null,
                        minLength: 1,
                        nullable: true,
                        type: 'string',
                      },
                      fan_mode_setting: {
                        deprecated: true,
                        enum: ['auto', 'on', 'circulate'],
                        type: 'string',
                        'x-deprecated':
                          'use current_climate_setting.fan_mode_setting instead.',
                      },
                      is_cooling: { type: 'boolean' },
                      is_fan_running: { type: 'boolean' },
                      is_heating: { type: 'boolean' },
                      is_temporary_manual_override_active: { type: 'boolean' },
                      max_cooling_set_point_celsius: {
                        format: 'float',
                        type: 'number',
                      },
                      max_cooling_set_point_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      max_heating_set_point_celsius: {
                        format: 'float',
                        type: 'number',
                      },
                      max_heating_set_point_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      min_cooling_set_point_celsius: {
                        format: 'float',
                        type: 'number',
                      },
                      min_cooling_set_point_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      min_heating_cooling_delta_celsius: {
                        format: 'float',
                        type: 'number',
                      },
                      min_heating_cooling_delta_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      min_heating_set_point_celsius: {
                        format: 'float',
                        type: 'number',
                      },
                      min_heating_set_point_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      relative_humidity: {
                        format: 'float',
                        maximum: 1,
                        minimum: 0,
                        type: 'number',
                      },
                      temperature_celsius: { format: 'float', type: 'number' },
                      temperature_fahrenheit: {
                        format: 'float',
                        type: 'number',
                      },
                      temperature_threshold: {
                        properties: {
                          lower_limit_celsius: {
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                          lower_limit_fahrenheit: {
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                          upper_limit_celsius: {
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                          upper_limit_fahrenheit: {
                            format: 'float',
                            nullable: true,
                            type: 'number',
                          },
                        },
                        required: [
                          'lower_limit_celsius',
                          'lower_limit_fahrenheit',
                          'upper_limit_celsius',
                          'upper_limit_fahrenheit',
                        ],
                        type: 'object',
                      },
                    },
                    type: 'object',
                  },
                ],
              },
            ],
            description: 'Properties of the device.',
          },
          warnings: {
            description:
              'Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.',
            items: {
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description: 'Backup access code unhealthy.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['partial_backup_access_code_pool'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Too many backup codes.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['many_active_backup_codes'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'A Salto Lock displaying an unknown device type.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_unknown_device_type'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Wyze Lock is not connected to a gateway.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['wyze_device_missing_gateway'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Device is offline, but has some functionality available.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['functional_offline_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Third-party integration detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['third_party_integration_detected'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Nest thermostat in manual eco mode.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['nest_thermostat_in_manual_eco_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Remote Unlock feature not enabled in settings.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_gateway_unlocking_not_enabled'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Gateway signal is weak.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_weak_gateway_signal'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Temperature threshold exceeded.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['temperature_threshold_exceeded'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Device appears to be unresponsive.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['device_communication_degraded'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Scheduled maintenance window detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['scheduled_maintenance_window'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Device has flaky connection.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['device_has_flaky_connection'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Office Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_office_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Privacy Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_privacy_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this phone with the provider. This issue may affect the proper functioning of this phone.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['unknown_issue_with_phone'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'Unique identifier for the Seam workspace associated with the device.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'device_id',
          'device_type',
          'display_name',
          'capabilities_supported',
          'properties',
          'location',
          'connected_account_id',
          'workspace_id',
          'errors',
          'warnings',
          'created_at',
          'is_managed',
          'custom_metadata',
        ],
        type: 'object',
        'x-route-path': '/devices',
      },
      device_provider: {
        properties: {
          can_hvac_cool: { type: 'boolean' },
          can_hvac_heat: { type: 'boolean' },
          can_hvac_heat_cool: { type: 'boolean' },
          can_program_offline_access_codes: { type: 'boolean' },
          can_program_online_access_codes: { type: 'boolean' },
          can_remotely_lock: { type: 'boolean' },
          can_remotely_unlock: { type: 'boolean' },
          can_simulate_connection: { type: 'boolean' },
          can_simulate_disconnection: { type: 'boolean' },
          can_simulate_removal: { type: 'boolean' },
          can_turn_off_hvac: { type: 'boolean' },
          device_provider_name: {
            enum: [
              'dormakaba_community',
              'legic_connect',
              'akuvox',
              'august',
              'avigilon_alta',
              'brivo',
              'butterflymx',
              'schlage',
              'smartthings',
              'yale',
              'genie',
              'doorking',
              'salto',
              'salto_ks',
              'lockly',
              'ttlock',
              'linear',
              'noiseaware',
              'nuki',
              'seam_relay_admin',
              'igloo',
              'kwikset',
              'minut',
              'my_2n',
              'controlbyweb',
              'nest',
              'igloohome',
              'ecobee',
              'hubitat',
              'four_suites',
              'dormakaba_oracode',
              'pti',
              'wyze',
              'seam_passport',
              'visionline',
              'assa_abloy_credential_service',
              'seam_bridge',
              'tedee',
              'honeywell_resideo',
              'latch',
              'akiles',
              'assa_abloy_vostio',
              'assa_abloy_vostio_credential_service',
              'tado',
              'salto_space',
            ],
            type: 'string',
          },
          display_name: { type: 'string' },
          image_url: { type: 'string' },
          provider_categories: {
            items: {
              enum: [
                'stable',
                'consumer_smartlocks',
                'thermostats',
                'noise_sensors',
                'access_control_systems',
              ],
              type: 'string',
            },
            type: 'array',
          },
        },
        required: [
          'device_provider_name',
          'display_name',
          'image_url',
          'provider_categories',
        ],
        type: 'object',
        'x-route-path': '/devices',
      },
      enrollment_automation: {
        description:
          'Represents an [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system) within the [Seam mobile access solution](https://docs.seam.co/latest/capability-guides/mobile-access-in-development).',
        properties: {
          created_at: {
            description:
              'Date and time at which the enrollment automation was created.',
            format: 'date-time',
            type: 'string',
          },
          credential_manager_acs_system_id: {
            description:
              'ID of the associated [ACS system](https://docs.seam.co/latest/capability-guides/access-systems) that serves as the credential manager.',
            format: 'uuid',
            type: 'string',
          },
          enrollment_automation_id: {
            description: 'ID of the enrollment automation.',
            format: 'uuid',
            type: 'string',
          },
          user_identity_id: {
            description:
              'ID of the associated [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
            format: 'uuid',
            type: 'string',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the enrollment automation.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'enrollment_automation_id',
          'credential_manager_acs_system_id',
          'user_identity_id',
          'created_at',
          'workspace_id',
        ],
        type: 'object',
        'x-route-path': '/user_identities/enrollment_automations',
      },
      event: {
        discriminator: { propertyName: 'event_type' },
        oneOf: [
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was created.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['access_code.created'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was changed.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['access_code.changed'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was [scheduled natively](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes#native-scheduling) on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              code: {
                description:
                  'Code for the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.scheduled_on_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
              'code',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was set on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              code: {
                description:
                  'Code for the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.set_on_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
              'code',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was removed from a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.removed_from_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'There was an unusually long delay in setting an [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.delay_in_setting_on_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) failed to be set on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.failed_to_set_on_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was deleted.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              code: {
                description:
                  'Code for the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                nullable: true,
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['access_code.deleted'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
              'code',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'There was an unusually long delay in removing an [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) from a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.delay_in_removing_from_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) failed to be removed from a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.failed_to_remove_from_device'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was modified outside of Seam.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.modified_external_to_seam'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) was deleted outside of Seam.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.deleted_external_to_seam'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'A [backup access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/backup-access-codes) was pulled from the backup access code pool and set on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              backup_access_code_id: { type: 'string' },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.backup_access_code_pulled'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
              'backup_access_code_id',
            ],
            type: 'object',
            'x-route-path': '/access_codes',
          },
          {
            description:
              'An [unmanaged access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/migrating-existing-access-codes) was converted successfully to a managed access code.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.unmanaged.converted_to_managed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes/unmanaged',
          },
          {
            description:
              'An [unmanaged access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/migrating-existing-access-codes) failed to be converted to a managed access code.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.unmanaged.failed_to_convert_to_managed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes/unmanaged',
          },
          {
            description:
              'An [unmanaged access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/migrating-existing-access-codes) was created on a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.unmanaged.created'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes/unmanaged',
          },
          {
            description:
              'An [unmanaged access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/migrating-existing-access-codes) was removed from a device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['access_code.unmanaged.removed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'access_code_id',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/access_codes/unmanaged',
          },
          {
            description:
              'An [ACS system](https://docs.seam.co/latest/capability-guides/access-systems) was connected.',
            properties: {
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_system.connected'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/systems',
          },
          {
            description:
              'An [ACS system](https://docs.seam.co/latest/capability-guides/access-systems) was added.',
            properties: {
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_system.added'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/systems',
          },
          {
            description:
              'An [ACS system](https://docs.seam.co/latest/capability-guides/access-systems) was disconnected.',
            properties: {
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_system.disconnected'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/systems',
          },
          {
            description:
              'An [ACS credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) was deleted.',
            properties: {
              acs_credential_id: { format: 'uuid', type: 'string' },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_credential.deleted'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_credential_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/credentials',
          },
          {
            description:
              'An [ACS credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) was issued.',
            properties: {
              acs_credential_id: { format: 'uuid', type: 'string' },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_credential.issued'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_credential_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/credentials',
          },
          {
            description:
              'An [ACS credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) was reissued.',
            properties: {
              acs_credential_id: { format: 'uuid', type: 'string' },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_credential.reissued'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_credential_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/credentials',
          },
          {
            description:
              'An [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) was deleted.',
            properties: {
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              acs_user_id: { format: 'uuid', type: 'string' },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_user.deleted'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_user_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/users',
          },
          {
            description:
              'An [ACS encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) was added.',
            properties: {
              acs_encoder_id: {
                description:
                  'ID of the [ACS encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
                format: 'uuid',
                type: 'string',
              },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_encoder.added'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_encoder_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/encoders',
          },
          {
            description:
              'An [ACS encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) was removed.',
            properties: {
              acs_encoder_id: {
                description:
                  'ID of the [ACS encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
                format: 'uuid',
                type: 'string',
              },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['acs_encoder.removed'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_encoder_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/encoders',
          },
          {
            description: 'An ACS access group was deleted.',
            properties: {
              acs_access_group_id: { format: 'uuid', type: 'string' },
              acs_system_id: {
                description:
                  'ID of the [ACS system](https://docs.seam.co/latest/capability-guides/access-systems).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['acs_access_group.deleted'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'acs_system_id',
              'acs_access_group_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/acs/access_groups',
          },
          {
            description:
              'A [client session](https://docs.seam.co/latest/core-concepts/authentication/client-session-tokens) was deleted.',
            properties: {
              client_session_id: {
                description:
                  'ID of the [client session](https://docs.seam.co/latest/core-concepts/authentication/client-session-tokens).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['client_session.deleted'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'client_session_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/client_sessions',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) was connected for the first time or was reconnected after being disconnected.',
            properties: {
              connect_webview_id: {
                description:
                  'ID of the [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.connected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
              'connect_webview_id',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) was created.',
            properties: {
              connect_webview_id: {
                description:
                  'ID of the [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.created'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
              'connect_webview_id',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            deprecated: true,
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) had a successful login using a [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
            properties: {
              connect_webview_id: {
                description:
                  'ID of the [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.successful_login'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
              'connect_webview_id',
            ],
            type: 'object',
            'x-deprecated': 'Use `connect_webview.login_succeeded`.',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) was disconnected.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.disconnected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) completed the first sync with Seam, and the corresponding devices or systems are now available.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.completed_first_sync'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) was deleted.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connected_account.deleted'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts) completed the first sync after reconnection with Seam, and the corresponding devices or systems are now available.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: [
                  'connected_account.completed_first_sync_after_reconnection',
                ],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/connected_accounts',
          },
          {
            description:
              'A lock door [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) succeeded.',
            properties: {
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts).',
                format: 'uuid',
                type: 'string',
              },
              action_type: { description: 'Type of action.', type: 'string' },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['action_attempt.lock_door.succeeded'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              status: { description: 'Status of the action.', type: 'string' },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'action_attempt_id',
              'action_type',
              'status',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/action_attempts',
          },
          {
            description:
              'A lock door [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) failed.',
            properties: {
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts).',
                format: 'uuid',
                type: 'string',
              },
              action_type: { description: 'Type of action.', type: 'string' },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['action_attempt.lock_door.failed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              status: { description: 'Status of the action.', type: 'string' },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'action_attempt_id',
              'action_type',
              'status',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/action_attempts',
          },
          {
            description:
              'An unlock door [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) succeeded.',
            properties: {
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts).',
                format: 'uuid',
                type: 'string',
              },
              action_type: { description: 'Type of action.', type: 'string' },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['action_attempt.unlock_door.succeeded'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              status: { description: 'Status of the action.', type: 'string' },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'action_attempt_id',
              'action_type',
              'status',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/action_attempts',
          },
          {
            description:
              'An unlock door [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) failed.',
            properties: {
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts).',
                format: 'uuid',
                type: 'string',
              },
              action_type: { description: 'Type of action.', type: 'string' },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['action_attempt.unlock_door.failed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              status: { description: 'Status of the action.', type: 'string' },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'action_attempt_id',
              'action_type',
              'status',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/action_attempts',
          },
          {
            description:
              'A [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews) login succeeded.',
            properties: {
              connect_webview_id: {
                description:
                  'ID of the [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connect_webview.login_succeeded'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connect_webview_id',
              'event_type',
              'connected_account_id',
            ],
            type: 'object',
            'x-route-path': '/connect_webviews',
          },
          {
            description:
              'A [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews) login failed.',
            properties: {
              connect_webview_id: {
                description:
                  'ID of the [Connect Webview](https://docs.seam.co/latest/ui-components/connect-webviews).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['connect_webview.login_failed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'connect_webview_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/connect_webviews',
          },
          {
            description:
              'The status of a [device](https://docs.seam.co/latest/core-concepts/devices) changed from offline to online. That is, the `device.properties.online` property changed from `false` to `true`. Note that some devices operate entirely in offline mode, so Seam never emits a `device.connected` event for these devices.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.connected'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) was added to Seam or was re-added to Seam after having been removed.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.added'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A managed device was successfully converted to an [unmanaged device](https://docs.seam.co/latest/core-concepts/devices/managed-and-unmanaged-devices).',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.converted_to_unmanaged'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'An [unmanaged device](https://docs.seam.co/latest/core-concepts/devices/managed-and-unmanaged-devices) was successfully converted to a managed device.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.unmanaged.converted_to_managed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices/unmanaged',
          },
          {
            description:
              'The status of an [unmanaged device](https://docs.seam.co/latest/core-concepts/devices/managed-and-unmanaged-devices) changed from offline to online. That is, the `device.properties.online` property changed from `false` to `true`.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.unmanaged.connected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices/unmanaged',
          },
          {
            description:
              'The status of a [device](https://docs.seam.co/latest/core-concepts/devices) changed from online to offline. That is, the `device.properties.online` property changed from `true` to `false`.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              error_code: {
                description:
                  'Error code associated with the disconnection event, if any.',
                enum: [
                  'account_disconnected',
                  'hub_disconnected',
                  'device_disconnected',
                ],
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.disconnected'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'error_code',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'The status of an [unmanaged device](https://docs.seam.co/latest/core-concepts/devices/managed-and-unmanaged-devices) changed from online to offline. That is, the `device.properties.online` property changed from `true` to `false`.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              error_code: {
                description:
                  'Error code associated with the disconnection event, if any.',
                enum: [
                  'account_disconnected',
                  'hub_disconnected',
                  'device_disconnected',
                ],
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.unmanaged.disconnected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'error_code',
            ],
            type: 'object',
            'x-route-path': '/devices/unmanaged',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) detected that it was tampered with, for example, opened or moved.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.tampered'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) battery level dropped below the low threshold.',
            properties: {
              battery_level: {
                description:
                  'Number in the range 0 to 1.0 indicating the amount of battery in the device, as reported by the device.',
                format: 'float',
                maximum: 1,
                minimum: 0,
                type: 'number',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.low_battery'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'battery_level',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) battery status changed since the last `battery_status_changed` event.',
            properties: {
              battery_level: {
                description:
                  'Number in the range 0 to 1.0 indicating the amount of battery in the device, as reported by the device.',
                format: 'float',
                maximum: 1,
                minimum: 0,
                type: 'number',
              },
              battery_status: {
                description:
                  'Battery status of the device, calculated from the numeric `battery_level` value.',
                enum: ['critical', 'low', 'good', 'full'],
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.battery_status_changed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'battery_status',
              'battery_level',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) was removed externally from the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.removed'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [device](https://docs.seam.co/latest/core-concepts/devices) was deleted.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['device.deleted'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'Seam detected that a [device](https://docs.seam.co/latest/core-concepts/devices) is using a third-party integration that will interfere with Seam device management.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.third_party_integration_detected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'Seam detected that a [device](https://docs.seam.co/latest/core-concepts/devices) is no longer using a third-party integration that was interfering with Seam device management.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.third_party_integration_no_longer_detected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [Salto device](https://docs.seam.co/latest/device-and-system-integration-guides/salto-locks) activated privacy mode.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.salto.privacy_mode_activated'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A [Salto device](https://docs.seam.co/latest/device-and-system-integration-guides/salto-locks) deactivated privacy mode.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.salto.privacy_mode_deactivated'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'Seam detected a flaky [device](https://docs.seam.co/latest/core-concepts/devices) connection.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.connection_became_flaky'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'Seam detected that a previously-flaky [device](https://docs.seam.co/latest/core-concepts/devices) connection stabilized.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.connection_stabilized'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A third-party subscription is required to use all [device](https://docs.seam.co/latest/core-concepts/devices) features.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.error.subscription_required'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'A third-party subscription is active or no longer required to use all [device](https://docs.seam.co/latest/core-concepts/devices) features.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.error.subscription_required.resolved'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'An accessory keypad was connected to a [device](https://docs.seam.co/latest/core-concepts/devices).',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.accessory_keypad_connected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'An accessory keypad was disconnected from a [device](https://docs.seam.co/latest/core-concepts/devices).',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['device.accessory_keypad_disconnected'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/devices',
          },
          {
            description:
              'Extended periods of noise or noise exceeding a [threshold](https://docs.seam.co/latest/capability-guides/noise-sensors#what-is-a-threshold) were detected.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['noise_sensor.noise_threshold_triggered'],
                type: 'string',
              },
              minut_metadata: {
                additionalProperties: {},
                description: 'Metadata from Minut.',
                type: 'object',
              },
              noise_level_decibels: {
                description: 'Detected noise level in decibels.',
                format: 'float',
                type: 'number',
              },
              noise_level_nrs: {
                description:
                  'Detected noise level in Noiseaware Noise Risk Score (NRS).',
                format: 'float',
                type: 'number',
              },
              noise_threshold_id: {
                description:
                  'ID of the [noise threshold](https://docs.seam.co/latest/capability-guides/noise-sensors#what-is-a-threshold) that was triggered.',
                format: 'uuid',
                type: 'string',
              },
              noise_threshold_name: {
                description:
                  'Name of the [noise threshold](https://docs.seam.co/latest/capability-guides/noise-sensors#what-is-a-threshold) that was triggered.',
                type: 'string',
              },
              noiseaware_metadata: {
                additionalProperties: {},
                description: 'Metadata from Noiseaware.',
                type: 'object',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/noise_sensors/noise_thresholds',
          },
          {
            description:
              'A [lock](https://docs.seam.co/latest/capability-guides/smart-locks) was locked.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) that was used to lock the device.',
                format: 'uuid',
                type: 'string',
              },
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) associated with the lock action.',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['lock.locked'], type: 'string' },
              method: {
                description:
                  'Method by which a [lock device](https://docs.seam.co/latest/capability-guides/smart-locks) was locked. When the method is `keycode`, the `access_code_id` indicates the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) that was used, if reported by the device.',
                enum: ['keycode', 'manual', 'automatic', 'unknown', 'seamapi'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'method',
            ],
            type: 'object',
            'x-route-path': '/locks',
          },
          {
            description:
              'A [lock](https://docs.seam.co/latest/capability-guides/smart-locks) was unlocked.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) that was used to unlock the device.',
                format: 'uuid',
                type: 'string',
              },
              action_attempt_id: {
                description:
                  'ID of the [action attempt](https://docs.seam.co/latest/core-concepts/action-attempts) associated with the unlock action.',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['lock.unlocked'], type: 'string' },
              method: {
                description:
                  'Method by which a [lock device](https://docs.seam.co/latest/capability-guides/smart-locks) was unlocked. When the method is `keycode`, the `access_code_id` indicates the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) that was used, if reported by the device.',
                enum: ['keycode', 'manual', 'automatic', 'unknown', 'seamapi'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'method',
            ],
            type: 'object',
            'x-route-path': '/locks',
          },
          {
            description:
              'The [lock](https://docs.seam.co/latest/capability-guides/smart-locks) denied access to a user after one or more consecutive invalid attempts to unlock the device.',
            properties: {
              access_code_id: {
                description:
                  'ID of the [access code](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes) that was used in the unlock attempts.',
                format: 'uuid',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['lock.access_denied'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/locks',
          },
          {
            description:
              'A thermostat [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) was activated.',
            properties: {
              climate_preset_key: {
                description:
                  'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) that was activated.',
                type: 'string',
              },
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.climate_preset_activated'],
                type: 'string',
              },
              is_fallback_climate_preset: {
                description:
                  'Indicates whether the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) that was activated is the [fallback climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets/setting-the-fallback-climate-preset) for the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                type: 'boolean',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              thermostat_schedule_id: {
                description:
                  'ID of the [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) that prompted the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to be activated.',
                format: 'uuid',
                nullable: true,
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'thermostat_schedule_id',
              'climate_preset_key',
              'is_fallback_climate_preset',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              'A [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) was adjusted manually.',
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              cooling_set_point_celsius: {
                description:
                  'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                format: 'float',
                type: 'number',
              },
              cooling_set_point_fahrenheit: {
                description:
                  'Temperature to which the thermostat should cool (in °F).',
                format: 'float',
                type: 'number',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.manually_adjusted'],
                type: 'string',
              },
              fan_mode_setting: {
                description:
                  'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                enum: ['auto', 'on', 'circulate'],
                type: 'string',
              },
              heating_set_point_celsius: {
                description:
                  'Temperature to which the thermostat should heat (in °C).',
                format: 'float',
                type: 'number',
              },
              heating_set_point_fahrenheit: {
                description:
                  'Temperature to which the thermostat should heat (in °F).',
                format: 'float',
                type: 'number',
              },
              hvac_mode_setting: {
                description:
                  'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                enum: ['off', 'heat', 'cool', 'heat_cool'],
                type: 'string',
              },
              method: {
                description:
                  'Method used to adjust the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) manually. `seam` indicates that the Seam API, Seam CLI, or Seam Console was used to adjust the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                enum: ['seam', 'external'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'method',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              "A [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) temperature reading exceeded the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).",
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.temperature_threshold_exceeded'],
                type: 'string',
              },
              lower_limit_celsius: {
                description:
                  'Lower temperature limit, in °C, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              lower_limit_fahrenheit: {
                description:
                  'Lower temperature limit, in °F, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              temperature_celsius: {
                description:
                  'Temperature, in °C, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              temperature_fahrenheit: {
                description:
                  'Temperature, in °F, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              upper_limit_celsius: {
                description:
                  'Upper temperature limit, in °C, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              upper_limit_fahrenheit: {
                description:
                  'Upper temperature limit, in °F, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'temperature_celsius',
              'temperature_fahrenheit',
              'upper_limit_celsius',
              'upper_limit_fahrenheit',
              'lower_limit_celsius',
              'lower_limit_fahrenheit',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              "A [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) temperature reading no longer exceeds the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).",
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.temperature_threshold_no_longer_exceeded'],
                type: 'string',
              },
              lower_limit_celsius: {
                description:
                  'Lower temperature limit, in °C, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              lower_limit_fahrenheit: {
                description:
                  'Lower temperature limit, in °F, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              temperature_celsius: {
                description:
                  'Temperature, in °C, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              temperature_fahrenheit: {
                description:
                  'Temperature, in °F, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              upper_limit_celsius: {
                description:
                  'Upper temperature limit, in °C, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              upper_limit_fahrenheit: {
                description:
                  'Upper temperature limit, in °F, defined by the set [threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds).',
                format: 'float',
                nullable: true,
                type: 'number',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'temperature_celsius',
              'temperature_fahrenheit',
              'upper_limit_celsius',
              'upper_limit_fahrenheit',
              'lower_limit_celsius',
              'lower_limit_fahrenheit',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              "A [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) temperature reading is within 1 °C of the configured cooling or heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).",
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              desired_temperature_celsius: {
                description:
                  "Desired temperature, in °C, defined by the [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) cooling or heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).",
                format: 'float',
                type: 'number',
              },
              desired_temperature_fahrenheit: {
                description:
                  "Desired temperature, in °F, defined by the [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) cooling or heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).",
                format: 'float',
                type: 'number',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.temperature_reached_set_point'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              temperature_celsius: {
                description:
                  'Temperature, in °C, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              temperature_fahrenheit: {
                description:
                  'Temperature, in °F, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'temperature_celsius',
              'temperature_fahrenheit',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              "A [thermostat's](https://docs.seam.co/latest/capability-guides/thermostats) reported temperature changed by at least 1 °C.",
            properties: {
              connected_account_id: {
                description:
                  'ID of the [connected account](https://docs.seam.co/latest/core-concepts/connected-accounts).',
                format: 'uuid',
                type: 'string',
              },
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description: 'ID of the device.',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['thermostat.temperature_changed'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              temperature_celsius: {
                description:
                  'Temperature, in °C, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              temperature_fahrenheit: {
                description:
                  'Temperature, in °F, reported by the [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
                format: 'float',
                type: 'number',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'connected_account_id',
              'event_type',
              'temperature_celsius',
              'temperature_fahrenheit',
            ],
            type: 'object',
            'x-route-path': '/thermostats',
          },
          {
            description:
              'An [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut) was deleted.',
            properties: {
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              enrollment_automation_id: {
                description:
                  'ID of the [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access/issuing-mobile-credentials-from-an-access-control-system#prepare-the-phones-for-a-user-identity-to-start-receiving-mobile-credentials-using-an-enrollment-aut).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: {
                enum: ['enrollment_automation.deleted'],
                type: 'string',
              },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'enrollment_automation_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/user_identities/enrollment_automations',
          },
          {
            description: 'A phone device was deactivated.',
            properties: {
              created_at: {
                description: 'Date and time at which the event was created.',
                format: 'date-time',
                type: 'string',
              },
              device_id: {
                description:
                  'ID of the [device](https://docs.seam.co/latest/core-concepts/devices).',
                format: 'uuid',
                type: 'string',
              },
              event_id: {
                description: 'ID of the event.',
                format: 'uuid',
                type: 'string',
              },
              event_type: { enum: ['phone.deactivated'], type: 'string' },
              occurred_at: {
                description: 'Date and time at which the event occurred.',
                format: 'date-time',
                type: 'string',
              },
              workspace_id: {
                description:
                  'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces).',
                format: 'uuid',
                type: 'string',
              },
            },
            required: [
              'event_id',
              'workspace_id',
              'created_at',
              'occurred_at',
              'device_id',
              'event_type',
            ],
            type: 'object',
            'x-route-path': '/phones',
          },
        ],
        'x-route-path': '/events',
      },
      network: {
        properties: {
          created_at: { format: 'date-time', type: 'string' },
          display_name: { type: 'string' },
          network_id: { format: 'uuid', type: 'string' },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: ['network_id', 'workspace_id', 'display_name', 'created_at'],
        type: 'object',
        'x-route-path': '/networks',
      },
      noise_threshold: {
        properties: {
          device_id: { format: 'uuid', type: 'string' },
          ends_daily_at: { type: 'string' },
          name: { type: 'string' },
          noise_threshold_decibels: { format: 'float', type: 'number' },
          noise_threshold_id: { format: 'uuid', type: 'string' },
          noise_threshold_nrs: { format: 'float', type: 'number' },
          starts_daily_at: { type: 'string' },
        },
        required: [
          'noise_threshold_id',
          'device_id',
          'name',
          'starts_daily_at',
          'ends_daily_at',
          'noise_threshold_decibels',
        ],
        type: 'object',
        'x-route-path': '/noise_sensors/noise_thresholds',
      },
      phone: {
        description: "Represents an app user's mobile phone.",
        properties: {
          created_at: {
            description: 'Date and time at which the `phone` was created.',
            format: 'date-time',
            type: 'string',
          },
          custom_metadata: {
            additionalProperties: {
              oneOf: [{ type: 'string' }, { type: 'boolean' }],
            },
            description:
              'Optional [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) for the phone.',
            type: 'object',
          },
          device_id: {
            description: 'ID of the `phone`.',
            format: 'uuid',
            type: 'string',
          },
          device_type: {
            description: 'Type of phone.',
            enum: ['ios_phone', 'android_phone'],
            type: 'string',
          },
          display_name: {
            description:
              'Display name of the phone. Defaults to `nickname` (if it is set) or `properties.appearance.name` otherwise. Enables administrators and users to identify the phone easily, especially when there are numerous phones.',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `phone`.',
            items: {
              properties: {
                error_code: { type: 'string' },
                message: { type: 'string' },
              },
              required: ['error_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          nickname: {
            description:
              'Optional nickname to describe the phone, settable through Seam.',
            type: 'string',
          },
          properties: {
            description: 'Properties of the phone.',
            properties: {
              assa_abloy_credential_service_metadata: {
                description:
                  'ASSA ABLOY Credential Service metadata for the phone.',
                properties: {
                  endpoints: {
                    description: 'Endpoints associated with the phone.',
                    items: {
                      properties: {
                        endpoint_id: {
                          description: 'ID of the associated endpoint.',
                          type: 'string',
                        },
                        is_active: {
                          description:
                            'Indicated whether the endpoint is active.',
                          type: 'boolean',
                        },
                      },
                      required: ['endpoint_id', 'is_active'],
                      type: 'object',
                    },
                    type: 'array',
                  },
                  has_active_endpoint: {
                    description:
                      'Indicates whether the credential service has active endpoints associated with the phone.',
                    type: 'boolean',
                  },
                },
                required: ['has_active_endpoint', 'endpoints'],
                type: 'object',
              },
              salto_space_credential_service_metadata: {
                description:
                  'Salto Space credential service metadata for the phone.',
                properties: {
                  has_active_phone: {
                    description:
                      'Indicates whether the credential service has an active associated phone.',
                    type: 'boolean',
                  },
                },
                required: ['has_active_phone'],
                type: 'object',
              },
            },
            type: 'object',
          },
          warnings: {
            description: 'Warnings associated with the `phone`.',
            items: {
              properties: {
                message: { type: 'string' },
                warning_code: { type: 'string' },
              },
              required: ['warning_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `phone`.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'device_id',
          'display_name',
          'workspace_id',
          'created_at',
          'custom_metadata',
          'errors',
          'warnings',
          'device_type',
          'properties',
        ],
        type: 'object',
        'x-route-path': '/phones',
      },
      thermostat_schedule: {
        description:
          'Represents a [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) that activates a configured [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) on a [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) at a specified starting time and deactivates the climate preset at a specified ending time.',
        properties: {
          climate_preset_key: {
            description:
              'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to use for the thermostat schedule.',
            type: 'string',
          },
          created_at: {
            description:
              'Date and time at which the thermostat schedule was created.',
            format: 'date-time',
            type: 'string',
          },
          device_id: {
            description: 'ID of the desired thermostat device.',
            format: 'uuid',
            type: 'string',
          },
          ends_at: {
            description:
              'Date and time at which the thermostat schedule ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
            format: 'date-time',
            type: 'string',
          },
          errors: {
            description:
              'Array of errors associated with the thermostat schedule. Each error object within the array contains two fields: `error_code` and `message`. `error_code` is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. `message` provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.',
            items: {
              properties: {
                error_code: { type: 'string' },
                message: { type: 'string' },
              },
              required: ['error_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          max_override_period_minutes: {
            description:
              "Number of minutes for which a person at the thermostat can change the thermostat's settings after the activation of the scheduled climate preset. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
            minimum: 0,
            type: 'integer',
          },
          name: {
            description:
              'User-friendly name to identify the thermostat schedule.',
            type: 'string',
          },
          starts_at: {
            description:
              'Date and time at which the thermostat schedule starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
            format: 'date-time',
            type: 'string',
          },
          thermostat_schedule_id: {
            description: 'ID of the thermostat schedule.',
            format: 'uuid',
            type: 'string',
          },
          unstable_is_override_allowed: {
            description:
              "Indicates whether a person at the thermostat can change the thermostat's settings.",
            type: 'boolean',
            'x-undocumented': 'Unstable',
          },
        },
        required: [
          'thermostat_schedule_id',
          'device_id',
          'climate_preset_key',
          'max_override_period_minutes',
          'starts_at',
          'ends_at',
          'created_at',
          'errors',
        ],
        type: 'object',
        'x-route-path': '/thermostats/schedules',
      },
      unmanaged_access_code: {
        properties: {
          access_code_id: {
            description: 'Unique identifier for the access code.',
            format: 'uuid',
            type: 'string',
          },
          code: {
            description:
              'Code used for access. Typically, a numeric or alphanumeric string.',
            nullable: true,
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the access code was created.',
            format: 'date-time',
            type: 'string',
          },
          device_id: {
            description:
              'Unique identifier for the device associated with the access code.',
            format: 'uuid',
            type: 'string',
          },
          ends_at: {
            description:
              'Date and time after which the time-bound access code becomes inactive.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          errors: {
            description:
              'Collection of errors associated with the access code, structured in a dictionary format. A unique "error_code" keys each error. Each error entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the error. "created_at" is a date that indicates when the error was generated. This structure enables detailed tracking and timely response to critical issues.',
            items: {
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description: 'Failed to set code on Smart Things device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['smartthings_failed_to_set_access_code'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to set code after multiple retries.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: [
                        'smartthings_failed_to_set_after_multiple_retries',
                      ],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to set code on device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['failed_to_set_on_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Failed to remove code from device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['failed_to_remove_from_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Duplicate access code detected on device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['duplicate_code_on_device'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'An attempt to modify this access code was prevented.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['duplicate_code_attempt_prevented'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Igloohome bridge has too many pending jobs in the queue.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['igloohome_bridge_too_many_pending_jobs'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Igloohome bridge is offline.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['igloohome_bridge_offline'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock as reached max amount of codes.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: [
                        'igloohome_offline_access_code_no_variance_available',
                      ],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the access code is set on Kwikset device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_code'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the deletion of the access code on Kwikset device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_deletion'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Code was modified or removed externally after Seam successfully set it on the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['code_modified_external_to_seam'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Invalid code length for August lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_invalid_code_length'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_programming_delay'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'All access code slots on the device are full.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_slots_full'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'August lock is missing a keypad.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_keypad'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user is not subscribed.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_not_subscribed'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hubitat_device_programming_delay'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'No free positions available on the device.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hubitat_no_free_positions_available'],
                      type: 'string',
                    },
                    is_access_code_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_access_code_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is offline',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_offline'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device has been removed',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_removed'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Hub is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hub_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The backup access code pool is empty.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['empty_backup_access_code_pool'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'User is not authorized to use the August Lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_not_authorized'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not connected to the Seam Bridge.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_bridge'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user limit reached.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_limit_reached'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not paired with a Gateway.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_not_paired_to_gateway'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Missing device credentials.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['missing_device_credentials'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The auxiliary heat is running.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['auxiliary_heat_running'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Subscription required to connect.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['subscription_required'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Account is disconnected.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
                {
                  description: 'Credentials provided were invalid.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['invalid_credentials'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          is_managed: { enum: [false], type: 'boolean' },
          name: {
            description:
              'Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.',
            nullable: true,
            type: 'string',
          },
          starts_at: {
            description:
              'Date and time at which the time-bound access code becomes active.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          status: { enum: ['set'], type: 'string' },
          type: {
            description:
              'Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.',
            enum: ['time_bound', 'ongoing'],
            type: 'string',
          },
          warnings: {
            description:
              'Collection of warnings associated with the access code, structured in a dictionary format. A unique "warning_code" keys each warning. Each warning entry is an object containing two fields: "message" and "created_at." "message" is a string that describes the warning. "created_at" is a date that indicates when the warning was generated. This structure enables detailed tracking and timely response to potential issues that are not critical but that may require attention.',
            items: {
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description: 'Failed to set code on Smart Things device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['smartthings_failed_to_set_access_code'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Duplicate access code detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schlage_detected_duplicate'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Received an error when attempting to create this code.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schlage_creation_outage'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Office Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_office_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Code was modified or removed externally after Seam successfully set it on the device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['code_modified_external_to_seam'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Delay in setting code on device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['delay_in_setting_on_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Delay in removing code from device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['delay_in_removing_from_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Third party integration detected that may cause access codes to fail.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['third_party_integration_detected'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access code has not yet been fully moved to the device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['august_device_programming_delay'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Algopins must be used within 24 hours.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['igloo_algopin_must_be_used_within_24_hours'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Management was transferred to another workspace.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['management_transferred'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Unable to confirm the access code is set on Kwikset device.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['kwikset_unable_to_confirm_code'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
        },
        required: [
          'type',
          'access_code_id',
          'device_id',
          'name',
          'code',
          'created_at',
          'errors',
          'warnings',
          'is_managed',
          'status',
        ],
        type: 'object',
        'x-route-path': '/access_codes/unmanaged',
      },
      unmanaged_acs_access_group: {
        properties: {
          access_group_type: {
            deprecated: true,
            enum: [
              'pti_unit',
              'pti_access_level',
              'salto_ks_access_group',
              'brivo_group',
              'salto_space_group',
              'dormakaba_community_access_group',
            ],
            type: 'string',
            'x-deprecated': 'Use `external_type`.',
          },
          access_group_type_display_name: {
            deprecated: true,
            type: 'string',
            'x-deprecated': 'Use `external_type_display_name`.',
          },
          acs_access_group_id: {
            description: 'ID of the access group.',
            format: 'uuid',
            type: 'string',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the access group.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the access group was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: { type: 'string' },
          external_type: {
            description:
              'Brand-specific terminology for the access group type.',
            enum: [
              'pti_unit',
              'pti_access_level',
              'salto_ks_access_group',
              'brivo_group',
              'salto_space_group',
              'dormakaba_community_access_group',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the access group type.',
            type: 'string',
          },
          is_managed: { enum: [false], type: 'boolean' },
          name: { description: 'Name of the access group.', type: 'string' },
          warnings: {
            description: 'Warnings associated with the `acs_access_group`.',
            items: {
              description: 'Warning associated with the `acs_access_group`.',
              properties: {
                created_at: {
                  description:
                    'Date and time at which Seam created the warning.',
                  format: 'date-time',
                  type: 'string',
                },
                message: {
                  description:
                    'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                  type: 'string',
                },
                warning_code: {
                  description:
                    'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                  enum: ['unknown_issue_with_acs_access_group'],
                  type: 'string',
                },
              },
              required: ['created_at', 'message', 'warning_code'],
              type: 'object',
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the access group.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_access_group_id',
          'acs_system_id',
          'workspace_id',
          'name',
          'access_group_type',
          'access_group_type_display_name',
          'display_name',
          'external_type',
          'external_type_display_name',
          'created_at',
          'warnings',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/access_groups/unmanaged',
      },
      unmanaged_acs_credential: {
        description:
          'Means by which a user gains access at an entrance. The `unmanaged_acs_credential` object, which is not managed by Seam, represents a credential that provides an ACS user access within an access control system. For each acs_credential object, you define the access method. You can also specify additional properties, such as a code.',
        properties: {
          access_method: {
            description:
              'Access method for the credential. Supported values: `code`, `card`, `mobile_key`.',
            enum: ['code', 'card', 'mobile_key'],
            type: 'string',
          },
          acs_credential_id: {
            description: 'ID of the credential.',
            format: 'uuid',
            type: 'string',
          },
          acs_credential_pool_id: { format: 'uuid', type: 'string' },
          acs_system_id: {
            description:
              'ID of the access control system that contains the credential.',
            format: 'uuid',
            type: 'string',
          },
          acs_user_id: {
            description: 'ID of the ACS user to whom the credential belongs.',
            format: 'uuid',
            type: 'string',
          },
          assa_abloy_vostio_metadata: {
            description: 'Vostio-specific metadata for the credential.',
            properties: {
              door_names: { items: { type: 'string' }, type: 'array' },
              endpoint_id: { type: 'string' },
              key_id: { type: 'string' },
              key_issuing_request_id: { type: 'string' },
              override_guest_acs_entrance_ids: {
                items: { type: 'string' },
                type: 'array',
              },
            },
            type: 'object',
          },
          card_number: { nullable: true, type: 'string' },
          code: {
            description: 'Access (PIN) code for the credential.',
            nullable: true,
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the credential was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description:
              'Display name that corresponds to the credential type.',
            minLength: 1,
            type: 'string',
          },
          ends_at: {
            description:
              'Date and time at which the credential validity ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `acs_credential`.',
            items: {
              properties: {
                error_code: { type: 'string' },
                message: { type: 'string' },
              },
              required: ['error_code', 'message'],
              type: 'object',
            },
            type: 'array',
          },
          external_type: {
            description:
              'Brand-specific terminology for the credential type. Supported values: `pti_card`, `brivo_credential`, `hid_credential`, `visionline_card`.',
            enum: [
              'pti_card',
              'brivo_credential',
              'hid_credential',
              'visionline_card',
              'salto_ks_credential',
              'assa_abloy_vostio_key',
              'salto_space_key',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the credential type.',
            type: 'string',
          },
          is_issued: { type: 'boolean' },
          is_latest_desired_state_synced_with_provider: {
            description:
              'Indicates whether the latest state of the credential has been synced from Seam to the provider.',
            nullable: true,
            type: 'boolean',
          },
          is_managed: { enum: [false], type: 'boolean' },
          is_multi_phone_sync_credential: {
            description:
              'Indicates whether the credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
            type: 'boolean',
          },
          is_one_time_use: {
            description:
              'Indicates whether the credential can only be used once. If "true," the code becomes invalid after the first use.',
            type: 'boolean',
          },
          issued_at: { format: 'date-time', nullable: true, type: 'string' },
          latest_desired_state_synced_with_provider_at: {
            description:
              'Date and time at which the state of the credential was most recently synced from Seam to the provider.',
            format: 'date-time',
            nullable: true,
            type: 'string',
          },
          parent_acs_credential_id: {
            description: 'ID of the parent credential.',
            format: 'uuid',
            type: 'string',
          },
          starts_at: {
            description:
              'Date and time at which the credential validity starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
            type: 'string',
          },
          visionline_metadata: {
            description: 'Visionline-specific metadata for the credential.',
            properties: {
              auto_join: { type: 'boolean' },
              card_function_type: { enum: ['guest', 'staff'], type: 'string' },
              card_id: { type: 'string' },
              common_acs_entrance_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
              credential_id: { type: 'string' },
              guest_acs_entrance_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
              is_valid: { type: 'boolean' },
              joiner_acs_credential_ids: {
                items: { format: 'uuid', type: 'string' },
                type: 'array',
              },
            },
            required: ['card_function_type'],
            type: 'object',
          },
          warnings: {
            description: 'Warnings associated with the `acs_credential`.',
            items: {
              description: 'Warning associated with the `acs_credential`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the credential is waiting to be issued.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['waiting_to_be_issued'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the schedule of one of the credential's children was modified externally.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schedule_externally_modified'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the schedule of this credential was modified to avoid creating a credential with a start date in the past.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['schedule_modified'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that this credential is being deleted.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['being_deleted'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this credential with the provider. This issue may affect the proper functioning of this credential.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['unknown_issue_with_acs_credential'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Access permissions for this [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) have changed. [Reissue](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners/creating-and-encoding-card-based-credentials) (re-encode) this credential. This issue may affect the proper functioning of the credential.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the warning.',
                      format: 'date-time',
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the warning. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['needs_to_be_reissued'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the credential.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_credential_id',
          'acs_system_id',
          'display_name',
          'access_method',
          'created_at',
          'workspace_id',
          'errors',
          'warnings',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/credentials/unmanaged',
      },
      unmanaged_acs_user: {
        description:
          'Represents an unmanaged [user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) in an [access control system](https://docs.seam.co/latest/capability-guides/access-systems).',
        properties: {
          access_schedule: {
            description:
              "`starts_at` and `ends_at` timestamps for the `acs_user`'s access.",
            properties: {
              ends_at: {
                description:
                  "Date and time at which the user's access ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.",
                format: 'date-time',
                nullable: true,
                type: 'string',
              },
              starts_at: {
                description:
                  "Date and time at which the user's access starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.",
                format: 'date-time',
                type: 'string',
              },
            },
            required: ['starts_at', 'ends_at'],
            type: 'object',
          },
          acs_system_id: {
            description:
              'ID of the access control system that contains the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
          acs_user_id: {
            description: 'ID of the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description: 'Date and time at which the `acs_user` was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: {
            description: 'Display name for the `acs_user`.',
            type: 'string',
          },
          email: {
            deprecated: true,
            format: 'email',
            type: 'string',
            'x-deprecated': 'use email_address.',
          },
          email_address: {
            description: 'Email address of the `acs_user`.',
            format: 'email',
            type: 'string',
          },
          errors: {
            description: 'Errors associated with the `acs_user`.',
            items: {
              description: 'Error associated with the `acs_user`.',
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the ACS user was deleted from the ACS system outside of Seam.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['deleted_externally'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the user could not be subscribed on Salto KS because the subscription limit has been exceeded.',
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['salto_ks_subscription_limit_exceeded'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not created on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_create_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not updated on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_update_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
                {
                  description:
                    "Indicates that the user was not deleted on the ACS system. This is likely due to an internal unexpected error. Please contact Seam's support if you encounter this.",
                  properties: {
                    created_at: {
                      description:
                        'Date and time at which Seam created the error.',
                      format: 'date-time',
                      type: 'string',
                    },
                    error_code: {
                      enum: ['failed_to_delete_on_acs_system'],
                      type: 'string',
                    },
                    message: {
                      description:
                        'Detailed description of the error. Provides insights into the issue and potentially how to rectify it.',
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'error_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          external_type: {
            description: 'Brand-specific terminology for the `acs_user` type.',
            enum: [
              'pti_user',
              'brivo_user',
              'hid_credential_manager_user',
              'salto_site_user',
              'latch_user',
              'dormakaba_community_user',
              'salto_space_user',
            ],
            type: 'string',
          },
          external_type_display_name: {
            description:
              'Display name that corresponds to the brand-specific terminology for the `acs_user` type.',
            type: 'string',
          },
          full_name: {
            description: 'Full name of the `acs_user`.',
            type: 'string',
          },
          hid_acs_system_id: { format: 'uuid', type: 'string' },
          is_latest_desired_state_synced_with_provider: {
            nullable: true,
            type: 'boolean',
            'x-undocumented': 'Only used internally.',
          },
          is_managed: { enum: [false], type: 'boolean' },
          is_suspended: {
            description:
              'Indicates whether the `acs_user` is currently [suspended](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users).',
            type: 'boolean',
          },
          latest_desired_state_synced_with_provider_at: {
            format: 'date-time',
            nullable: true,
            type: 'string',
            'x-undocumented': 'Only used internally.',
          },
          phone_number: {
            description:
              'Phone number of the `acs_user` in E.164 format (for example, `+15555550100`).',
            type: 'string',
          },
          user_identity_email_address: {
            description:
              'Email address of the user identity associated with the `acs_user`.',
            nullable: true,
            type: 'string',
          },
          user_identity_full_name: {
            description:
              'Full name of the user identity associated with the `acs_user`.',
            nullable: true,
            type: 'string',
          },
          user_identity_id: {
            description:
              'ID of the user identity associated with the `acs_user`.',
            type: 'string',
          },
          user_identity_phone_number: {
            description:
              'Phone number of the user identity associated with the `acs_user` in E.164 format (for example, `+15555550100`).',
            nullable: true,
            type: 'string',
          },
          warnings: {
            description: 'Warnings associated with the `acs_user`.',
            items: {
              description: 'Warning associated with the `acs_user`.',
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description:
                    'Indicates that the user is being deleted from the ACS system. This is a temporary state, and the user will be deleted shortly.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: { enum: ['being_deleted'], type: 'string' },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Indicates that the user is not subscribed on the Salto KS, so they cannot unlock doors or perform any actions. This occur when the their access schedule hasn’t started yet, or if their access schedule has ended, or if the site has reached its limit for active users (subscription slots), or if they have been manually unsubscribed.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: {
                      enum: ['salto_ks_user_not_subscribed'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this user with the provider. This issue may affect the proper functioning of this user.',
                  properties: {
                    created_at: { format: 'date-time', type: 'string' },
                    message: { type: 'string' },
                    warning_code: {
                      enum: ['unknown_issue_with_acs_user'],
                      type: 'string',
                    },
                  },
                  required: ['created_at', 'message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the `acs_user`.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'acs_user_id',
          'acs_system_id',
          'workspace_id',
          'created_at',
          'display_name',
          'warnings',
          'errors',
          'is_managed',
        ],
        type: 'object',
        'x-route-path': '/acs/users/unmanaged',
      },
      unmanaged_device: {
        properties: {
          can_hvac_cool: { type: 'boolean' },
          can_hvac_heat: { type: 'boolean' },
          can_hvac_heat_cool: { type: 'boolean' },
          can_program_offline_access_codes: { type: 'boolean' },
          can_program_online_access_codes: { type: 'boolean' },
          can_remotely_lock: { type: 'boolean' },
          can_remotely_unlock: { type: 'boolean' },
          can_simulate_connection: { type: 'boolean' },
          can_simulate_disconnection: { type: 'boolean' },
          can_simulate_removal: { type: 'boolean' },
          can_turn_off_hvac: { type: 'boolean' },
          capabilities_supported: {
            description:
              'Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.',
            items: {
              enum: [
                'access_code',
                'lock',
                'noise_detection',
                'thermostat',
                'battery',
                'phone',
              ],
              type: 'string',
            },
            type: 'array',
          },
          connected_account_id: {
            description:
              'Unique identifier for the account associated with the device.',
            format: 'uuid',
            type: 'string',
          },
          created_at: {
            description:
              'Date and time at which the device object was created.',
            format: 'date-time',
            type: 'string',
          },
          device_id: {
            description: 'Unique identifier for the device.',
            format: 'uuid',
            type: 'string',
          },
          device_type: {
            description: 'Type of the device.',
            oneOf: [
              {
                enum: [
                  'akuvox_lock',
                  'august_lock',
                  'brivo_access_point',
                  'butterflymx_panel',
                  'avigilon_alta_entry',
                  'doorking_lock',
                  'genie_door',
                  'igloo_lock',
                  'linear_lock',
                  'lockly_lock',
                  'kwikset_lock',
                  'nuki_lock',
                  'salto_lock',
                  'schlage_lock',
                  'seam_relay',
                  'smartthings_lock',
                  'wyze_lock',
                  'yale_lock',
                  'two_n_intercom',
                  'controlbyweb_device',
                  'ttlock_lock',
                  'igloohome_lock',
                  'hubitat_lock',
                  'four_suites_door',
                  'dormakaba_oracode_door',
                  'tedee_lock',
                  'akiles_lock',
                ],
                type: 'string',
              },
              {
                enum: ['noiseaware_activity_zone', 'minut_sensor'],
                type: 'string',
              },
              {
                enum: [
                  'ecobee_thermostat',
                  'nest_thermostat',
                  'honeywell_resideo_thermostat',
                  'tado_thermostat',
                ],
                type: 'string',
              },
              {
                description: 'Type of phone.',
                enum: ['ios_phone', 'android_phone'],
                type: 'string',
              },
            ],
          },
          errors: {
            description:
              'Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.',
            items: {
              discriminator: { propertyName: 'error_code' },
              oneOf: [
                {
                  description: 'Device is offline',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_offline'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device has been removed',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_removed'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Hub is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['hub_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Device is disconnected',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['device_disconnected'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The backup access code pool is empty.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['empty_backup_access_code_pool'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'User is not authorized to use the August Lock.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_not_authorized'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not connected to the Seam Bridge.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['august_lock_missing_bridge'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Salto site user limit reached.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_site_user_limit_reached'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Lock is not paired with a Gateway.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_not_paired_to_gateway'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Missing device credentials.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['missing_device_credentials'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'The auxiliary heat is running.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['auxiliary_heat_running'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Subscription required to connect.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['subscription_required'],
                      type: 'string',
                    },
                    is_device_error: { enum: [true], type: 'boolean' },
                    message: { type: 'string' },
                  },
                  required: ['message', 'is_device_error', 'error_code'],
                  type: 'object',
                },
                {
                  description: 'Account is disconnected.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['account_disconnected'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
                {
                  description: 'Credentials provided were invalid.',
                  properties: {
                    error_code: {
                      description:
                        'Unique identifier of the type of error. Enables quick recognition and categorization of the issue.',
                      enum: ['invalid_credentials'],
                      type: 'string',
                    },
                    is_connected_account_error: {
                      enum: [true],
                      type: 'boolean',
                    },
                    message: { type: 'string' },
                  },
                  required: [
                    'message',
                    'is_connected_account_error',
                    'error_code',
                  ],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          is_managed: { enum: [false], type: 'boolean' },
          location: {
            description: 'Location information for the device.',
            nullable: true,
            properties: {
              location_name: {
                description: 'Name of the device location.',
                type: 'string',
              },
              timezone: {
                description: 'Time zone of the device location.',
                type: 'string',
              },
            },
            type: 'object',
          },
          properties: {
            properties: {
              accessory_keypad: {
                description: 'Represents the accessory keypad state.',
                properties: {
                  battery: {
                    description: 'Indicates if the keypad battery properties.',
                    properties: {
                      level: {
                        format: 'float',
                        maximum: 1,
                        minimum: 0,
                        type: 'number',
                      },
                    },
                    required: ['level'],
                    type: 'object',
                  },
                  is_connected: {
                    description:
                      'Indicates if the accessory_keypad is connected to the device.',
                    type: 'boolean',
                  },
                },
                required: ['is_connected'],
                type: 'object',
              },
              battery: {
                description:
                  'Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.',
                properties: {
                  level: {
                    format: 'float',
                    maximum: 1,
                    minimum: 0,
                    type: 'number',
                  },
                  status: {
                    enum: ['critical', 'low', 'good', 'full'],
                    type: 'string',
                  },
                },
                required: ['level', 'status'],
                type: 'object',
              },
              battery_level: {
                description:
                  'Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.',
                format: 'float',
                maximum: 1,
                minimum: 0,
                type: 'number',
              },
              image_alt_text: {
                description: 'Alt text for the device image.',
                type: 'string',
              },
              image_url: {
                description: 'Image URL for the device.',
                format: 'uri',
                type: 'string',
              },
              manufacturer: {
                description: 'Manufacturer of the device.',
                type: 'string',
              },
              model: {
                properties: {
                  accessory_keypad_supported: {
                    deprecated: true,
                    type: 'boolean',
                    'x-deprecated':
                      'use device.properties.model.can_connect_accessory_keypad',
                  },
                  can_connect_accessory_keypad: {
                    description:
                      'Indicates whether the device can connect a accessory keypad.',
                    type: 'boolean',
                  },
                  display_name: {
                    description: 'Display name of the device model.',
                    type: 'string',
                  },
                  has_built_in_keypad: {
                    description:
                      'Indicates whether the device has a built in accessory keypad.',
                    type: 'boolean',
                  },
                  manufacturer_display_name: {
                    description:
                      'Display name that corresponds to the manufacturer-specific terminology for the device.',
                    type: 'string',
                  },
                  offline_access_codes_supported: {
                    description:
                      'Indicates whether the device supports offline access codes.',
                    type: 'boolean',
                  },
                  online_access_codes_supported: {
                    description:
                      'Indicates whether the device supports online access codes.',
                    type: 'boolean',
                  },
                },
                required: ['display_name', 'manufacturer_display_name'],
                type: 'object',
              },
              name: {
                deprecated: true,
                description: 'Name of the device.',
                type: 'string',
                'x-deprecated': 'use device.display_name instead',
              },
              offline_access_codes_enabled: {
                description:
                  'Indicates whether it is currently possible to use offline access codes for the device.',
                type: 'boolean',
              },
              online: {
                description: 'Indicates whether the device is online.',
                type: 'boolean',
              },
              online_access_codes_enabled: {
                description:
                  'Indicates whether it is currently possible to use online access codes for the device.',
                type: 'boolean',
              },
            },
            required: ['name', 'online', 'model'],
            type: 'object',
          },
          warnings: {
            description:
              'Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.',
            items: {
              discriminator: { propertyName: 'warning_code' },
              oneOf: [
                {
                  description: 'Backup access code unhealthy.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['partial_backup_access_code_pool'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Too many backup codes.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['many_active_backup_codes'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'A Salto Lock displaying an unknown device type.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_unknown_device_type'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Wyze Lock is not connected to a gateway.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['wyze_device_missing_gateway'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Device is offline, but has some functionality available.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['functional_offline_device'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Third-party integration detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['third_party_integration_detected'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Nest thermostat in manual eco mode.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['nest_thermostat_in_manual_eco_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Remote Unlock feature not enabled in settings.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_lock_gateway_unlocking_not_enabled'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Gateway signal is weak.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['ttlock_weak_gateway_signal'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Temperature threshold exceeded.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['temperature_threshold_exceeded'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Device appears to be unresponsive.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['device_communication_degraded'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Scheduled maintenance window detected.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['scheduled_maintenance_window'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description: 'Device has flaky connection.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['device_has_flaky_connection'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Office Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_office_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'Lock is in Privacy Mode. Access Codes will not unlock doors.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['salto_privacy_mode'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
                {
                  description:
                    'An unknown issue occurred while syncing the state of this phone with the provider. This issue may affect the proper functioning of this phone.',
                  properties: {
                    message: { type: 'string' },
                    warning_code: {
                      description:
                        'Unique identifier of the type of warning. Enables quick recognition and categorization of the issue.',
                      enum: ['unknown_issue_with_phone'],
                      type: 'string',
                    },
                  },
                  required: ['message', 'warning_code'],
                  type: 'object',
                },
              ],
            },
            type: 'array',
          },
          workspace_id: {
            description:
              'Unique identifier for the Seam workspace associated with the device.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'device_id',
          'device_type',
          'connected_account_id',
          'location',
          'capabilities_supported',
          'workspace_id',
          'errors',
          'warnings',
          'created_at',
          'is_managed',
          'properties',
        ],
        type: 'object',
        'x-route-path': '/devices/unmanaged',
      },
      user_identity: {
        description:
          'Represents a [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity) associated with an application user account.',
        properties: {
          created_at: {
            description:
              'Date and time at which the user identity was created.',
            format: 'date-time',
            type: 'string',
          },
          display_name: { minLength: 1, type: 'string' },
          email_address: {
            description: 'Unique email address for the user identity.',
            format: 'email',
            nullable: true,
            type: 'string',
          },
          full_name: { minLength: 1, nullable: true, type: 'string' },
          phone_number: {
            description:
              'Unique phone number for the user identity in [E.164 format](https://www.itu.int/rec/T-REC-E.164/en) (for example, +15555550100).',
            nullable: true,
            type: 'string',
          },
          user_identity_id: {
            description: 'ID of the user identity.',
            format: 'uuid',
            type: 'string',
          },
          user_identity_key: {
            description: 'Unique key for the user identity.',
            minLength: 1,
            nullable: true,
            type: 'string',
          },
          workspace_id: {
            description:
              'ID of the [workspace](https://docs.seam.co/latest/core-concepts/workspaces) that contains the user identity.',
            format: 'uuid',
            type: 'string',
          },
        },
        required: [
          'user_identity_id',
          'user_identity_key',
          'email_address',
          'phone_number',
          'display_name',
          'full_name',
          'created_at',
          'workspace_id',
        ],
        type: 'object',
        'x-route-path': '/user_identities',
      },
      webhook: {
        properties: {
          event_types: { items: { type: 'string' }, type: 'array' },
          secret: { type: 'string' },
          url: { type: 'string' },
          webhook_id: { type: 'string' },
        },
        required: ['webhook_id', 'url'],
        type: 'object',
        'x-route-path': '/webhooks',
      },
      workspace: {
        properties: {
          company_name: { type: 'string' },
          connect_partner_name: {
            deprecated: true,
            nullable: true,
            type: 'string',
            'x-deprecated': 'use company_name',
          },
          is_sandbox: { type: 'boolean' },
          is_suspended: {
            description:
              'True if a sandbox workspace has not been accessed in 14 days',
            type: 'boolean',
          },
          name: { type: 'string' },
          workspace_id: { format: 'uuid', type: 'string' },
        },
        required: [
          'workspace_id',
          'name',
          'company_name',
          'is_sandbox',
          'is_suspended',
          'connect_partner_name',
        ],
        type: 'object',
        'x-route-path': '/workspaces',
      },
    },
    securitySchemes: {
      access_token: {
        bearerFormat: 'API Token',
        scheme: 'bearer',
        type: 'http',
      },
      api_key: { bearerFormat: 'API Key', scheme: 'bearer', type: 'http' },
      bridge_client_session: {
        bearerFormat: 'Bridge Client Session Token',
        scheme: 'bearer',
        type: 'http',
      },
      certified_client: {
        bearerFormat: 'Certified Client',
        scheme: 'bearer',
        type: 'http',
      },
      client_session: {
        bearerFormat: 'Client Session Token',
        scheme: 'bearer',
        type: 'http',
      },
      client_session_token: {
        in: 'header',
        name: 'client-session-token',
        type: 'apiKey',
      },
      console_session_with_workspace: {
        bearerFormat: 'Console Session Token',
        scheme: 'bearer',
        type: 'http',
      },
      console_session_without_workspace: {
        bearerFormat: 'Console Session Token',
        scheme: 'bearer',
        type: 'http',
      },
      pat_with_workspace: {
        bearerFormat: 'API Token',
        scheme: 'bearer',
        type: 'http',
      },
      pat_without_workspace: {
        bearerFormat: 'API Token',
        scheme: 'bearer',
        type: 'http',
      },
      publishable_key: {
        in: 'header',
        name: 'seam-publishable-key',
        type: 'apiKey',
      },
      seam_client_session_token: {
        in: 'header',
        name: 'seam-client-session-token',
        type: 'apiKey',
      },
      seam_workspace: { in: 'header', name: 'seam-workspace', type: 'apiKey' },
    },
  },
  info: { title: 'Seam Connect', version: '1.0.0' },
  openapi: '3.0.0',
  paths: {
    '/access_codes/create': {
      post: {
        operationId: 'accessCodesCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  common_code_key: { type: 'string' },
                  device_id: { format: 'uuid', type: 'string' },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_code: { $ref: '#/components/schemas/access_code' },
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'access_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/create',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'CREATE_ACCESS_CODE',
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'access_code',
        'x-response-key': 'access_code',
      },
    },
    '/access_codes/create_multiple': {
      post: {
        operationId: 'accessCodesCreateMultiplePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  behavior_when_code_cannot_be_shared: {
                    default: 'throw',
                    enum: ['throw', 'create_random_code'],
                    type: 'string',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['device_ids'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_codes: {
                      items: { $ref: '#/components/schemas/access_code' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_codes', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/create_multiple',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'create_multiple',
        'x-fern-sdk-return-value': 'access_codes',
        'x-response-key': 'access_codes',
      },
      put: {
        operationId: 'accessCodesCreateMultiplePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  behavior_when_code_cannot_be_shared: {
                    default: 'throw',
                    enum: ['throw', 'create_random_code'],
                    type: 'string',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['device_ids'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_codes: {
                      items: { $ref: '#/components/schemas/access_code' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_codes', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/create_multiple',
        tags: ['/access_codes'],
        'x-fern-ignore': true,
        'x-response-key': 'access_codes',
      },
    },
    '/access_codes/delete': {
      post: {
        operationId: 'accessCodesDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  device_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/delete',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'DELETE_ACCESS_CODE',
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/access_codes/generate_code': {
      post: {
        operationId: 'accessCodesGenerateCodePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    generated_code: {
                      $ref: '#/components/schemas/access_code',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['generated_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/generate_code',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'generate_code',
        'x-fern-sdk-return-value': 'generated_code',
        'x-response-key': 'generated_code',
      },
    },
    '/access_codes/get': {
      post: {
        operationId: 'accessCodesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  code: { type: 'string' },
                  device_id: { format: 'uuid', type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_code: { $ref: '#/components/schemas/access_code' },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { access_token: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
        ],
        summary: '/access_codes/get',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'access_code',
        'x-response-key': 'access_code',
      },
    },
    '/access_codes/list': {
      post: {
        operationId: 'accessCodesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  user_identifier_key: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_codes: {
                      items: { $ref: '#/components/schemas/access_code' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_codes', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/list',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'access_codes',
        'x-response-key': 'access_codes',
      },
    },
    '/access_codes/pull_backup_access_code': {
      post: {
        description:
          'Retrieves a backup access code for an access code. See also [Managing Backup Access Codes](https://docs.seam.co/latest/capability-guides/smart-locks/access-codes/backup-access-codes).',
        operationId: 'accessCodesPullBackupAccessCodePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_code: { $ref: '#/components/schemas/access_code' },
                    backup_access_code: {
                      $ref: '#/components/schemas/access_code',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['backup_access_code', 'access_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/pull_backup_access_code',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'pull_backup_access_code',
        'x-fern-sdk-return-value': 'access_code',
        'x-response-key': 'access_code',
      },
    },
    '/access_codes/simulate/create_unmanaged_access_code': {
      post: {
        operationId: 'accessCodesSimulateCreateUnmanagedAccessCodePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  code: {
                    maxLength: 8,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  name: { type: 'string' },
                },
                required: ['device_id', 'name', 'code'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_code: {
                      $ref: '#/components/schemas/unmanaged_access_code',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/simulate/create_unmanaged_access_code',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes', 'simulate'],
        'x-fern-sdk-method-name': 'create_unmanaged_access_code',
        'x-fern-sdk-return-value': 'access_code',
        'x-response-key': 'access_code',
      },
    },
    '/access_codes/unmanaged/convert_to_managed': {
      patch: {
        operationId: 'accessCodesUnmanagedConvertToManagedPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  force: { type: 'boolean' },
                  is_external_modification_allowed: { type: 'boolean' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/convert_to_managed',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'CONVERT_ACCESS_CODE_TO_MANAGED',
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'accessCodesUnmanagedConvertToManagedPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  force: { type: 'boolean' },
                  is_external_modification_allowed: { type: 'boolean' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/convert_to_managed',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'CONVERT_ACCESS_CODE_TO_MANAGED',
        'x-fern-sdk-group-name': ['access_codes', 'unmanaged'],
        'x-fern-sdk-method-name': 'convert_to_managed',
        'x-response-key': null,
      },
    },
    '/access_codes/unmanaged/delete': {
      post: {
        operationId: 'accessCodesUnmanagedDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/delete',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'DELETE_ACCESS_CODE',
        'x-fern-sdk-group-name': ['access_codes', 'unmanaged'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/access_codes/unmanaged/get': {
      post: {
        operationId: 'accessCodesUnmanagedGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  code: { type: 'string' },
                  device_id: { format: 'uuid', type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_code: {
                      $ref: '#/components/schemas/unmanaged_access_code',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_code', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/get',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes', 'unmanaged'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'access_code',
        'x-response-key': 'access_code',
      },
    },
    '/access_codes/unmanaged/list': {
      post: {
        operationId: 'accessCodesUnmanagedListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  user_identifier_key: { type: 'string' },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    access_codes: {
                      items: {
                        $ref: '#/components/schemas/unmanaged_access_code',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['access_codes', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/list',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes', 'unmanaged'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'access_codes',
        'x-response-key': 'access_codes',
      },
    },
    '/access_codes/unmanaged/update': {
      patch: {
        operationId: 'accessCodesUnmanagedUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  force: { type: 'boolean' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_managed: { type: 'boolean' },
                },
                required: ['access_code_id', 'is_managed'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/update',
        tags: ['/access_codes'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'accessCodesUnmanagedUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  force: { type: 'boolean' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_managed: { type: 'boolean' },
                },
                required: ['access_code_id', 'is_managed'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/unmanaged/update',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes', 'unmanaged'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
    },
    '/access_codes/update': {
      patch: {
        operationId: 'accessCodesUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_managed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                  type: { enum: ['ongoing', 'time_bound'], type: 'string' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/update',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'UPDATE_ACCESS_CODE',
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'accessCodesUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_managed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                  type: { enum: ['ongoing', 'time_bound'], type: 'string' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/update',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'UPDATE_ACCESS_CODE',
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
      put: {
        operationId: 'accessCodesUpdatePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  allow_external_modification: { type: 'boolean' },
                  attempt_for_offline_device: {
                    default: true,
                    type: 'boolean',
                  },
                  code: {
                    maxLength: 9,
                    minLength: 4,
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  ends_at: { type: 'string' },
                  is_external_modification_allowed: { type: 'boolean' },
                  is_managed: { type: 'boolean' },
                  is_offline_access_code: { type: 'boolean' },
                  is_one_time_use: { type: 'boolean' },
                  max_time_rounding: {
                    default: '1hour',
                    enum: ['1hour', '1day', '1h', '1d'],
                    type: 'string',
                  },
                  name: { type: 'string' },
                  prefer_native_scheduling: { type: 'boolean' },
                  preferred_code_length: { format: 'float', type: 'number' },
                  starts_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                  type: { enum: ['ongoing', 'time_bound'], type: 'string' },
                  use_backup_access_code_pool: { type: 'boolean' },
                  use_offline_access_code: { type: 'boolean' },
                },
                required: ['access_code_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/update',
        tags: ['/access_codes'],
        'x-action-attempt-type': 'UPDATE_ACCESS_CODE',
        'x-fern-ignore': true,
        'x-response-key': null,
      },
    },
    '/access_codes/update_multiple': {
      patch: {
        operationId: 'accessCodesUpdateMultiplePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  common_code_key: { type: 'string' },
                  ends_at: { type: 'string' },
                  name: { type: 'string' },
                  starts_at: { type: 'string' },
                },
                required: ['common_code_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/update_multiple',
        tags: ['/access_codes'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'accessCodesUpdateMultiplePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  common_code_key: { type: 'string' },
                  ends_at: { type: 'string' },
                  name: { type: 'string' },
                  starts_at: { type: 'string' },
                },
                required: ['common_code_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/access_codes/update_multiple',
        tags: ['/access_codes'],
        'x-fern-sdk-group-name': ['access_codes'],
        'x-fern-sdk-method-name': 'update_multiple',
        'x-response-key': null,
      },
    },
    '/acs/access_groups/add_user': {
      post: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsAddUserPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/add_user',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'add_user',
        'x-response-key': null,
        'x-title': 'Add an ACS User to an Access Group',
      },
      put: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsAddUserPut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/add_user',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Add an ACS User to an Access Group',
      },
    },
    '/acs/access_groups/get': {
      post: {
        description:
          'Returns a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_access_group: {
                      $ref: '#/components/schemas/acs_access_group',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_access_group', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_access_group',
        'x-response-key': 'acs_access_group',
        'x-title': 'Get an Access Group',
      },
    },
    '/acs/access_groups/list': {
      post: {
        description:
          'Returns a list of all [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: {
                    description:
                      'ID of the access control system for which you want to retrieve all access groups.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description:
                      'ID of the user for which you want to retrieve all access groups.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_access_groups: {
                      items: { $ref: '#/components/schemas/acs_access_group' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_access_groups', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_access_groups',
        'x-response-key': 'acs_access_groups',
        'x-title': 'List Access Groups',
      },
    },
    '/acs/access_groups/list_accessible_entrances': {
      post: {
        description:
          'Returns a list of all accessible entrances for a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsListAccessibleEntrancesPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description:
                      'ID of the access group for which you want to retrieve all accessible entrances.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_entrances: {
                      items: { $ref: '#/components/schemas/acs_entrance' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_entrances', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/access_groups/list_accessible_entrances',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'list_accessible_entrances',
        'x-fern-sdk-return-value': 'acs_entrances',
        'x-response-key': 'acs_entrances',
        'x-title': 'List Entrances Accessible to an Access Group',
      },
    },
    '/acs/access_groups/list_users': {
      post: {
        description:
          'Returns a list of all [ACS users](https://docs.seam.co/latest/capability-guides/access-systems/user-management) in an [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsListUsersPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description:
                      'ID of the access group for which you want to retrieve all users.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_users: {
                      items: { $ref: '#/components/schemas/acs_user' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_users', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/list_users',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'list_users',
        'x-fern-sdk-return-value': 'acs_users',
        'x-response-key': 'acs_users',
        'x-title': 'List ACS Users in an Access Group',
      },
    },
    '/acs/access_groups/remove_user': {
      post: {
        description:
          'Removes a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) from a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsRemoveUserPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/remove_user',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups'],
        'x-fern-sdk-method-name': 'remove_user',
        'x-response-key': null,
        'x-title': 'Remove an ACS User from an Access Group',
      },
    },
    '/acs/access_groups/unmanaged/get': {
      post: {
        description:
          'Returns a specified unmanaged [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsUnmanagedGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired unmanaged access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_access_group: {
                      $ref: '#/components/schemas/unmanaged_acs_access_group',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_access_group', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/unmanaged/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups', 'unmanaged'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_access_group',
        'x-response-key': 'acs_access_group',
        'x-undocumented':
          'No unmanaged access groups are currently implemented.',
      },
    },
    '/acs/access_groups/unmanaged/list': {
      post: {
        description:
          'Returns a list of all unmanaged [access groups](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsAccessGroupsUnmanagedListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: {
                    description:
                      'ID of the access control system for which you want to retrieve all unmanaged access groups.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description:
                      'ID of the user for which you want to retrieve all unmanaged access groups.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_access_groups: {
                      items: {
                        $ref: '#/components/schemas/unmanaged_acs_access_group',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_access_groups', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/access_groups/unmanaged/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'access_groups', 'unmanaged'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_access_groups',
        'x-response-key': 'acs_access_groups',
        'x-undocumented':
          'No unmanaged access groups are currently implemented.',
      },
    },
    '/acs/credential_pools/list': {
      post: {
        operationId: 'acsCredentialPoolsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: { format: 'uuid', type: 'string' },
                },
                required: ['acs_system_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential_pools: {
                      items: {
                        $ref: '#/components/schemas/acs_credential_pool',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential_pools', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credential_pools/list',
        tags: ['/acs'],
        'x-deprecated':
          'Use `/user_identities/enrollment_automations/list` instead.',
        'x-fern-sdk-group-name': ['acs', 'credential_pools'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_credential_pools',
        'x-response-key': 'acs_credential_pools',
        'x-undocumented': 'Replaced by enrollment automations.',
      },
    },
    '/acs/credential_provisioning_automations/launch': {
      post: {
        operationId: 'acsCredentialProvisioningAutomationsLaunchPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_pool_id: { format: 'uuid', type: 'string' },
                  create_credential_manager_user: { type: 'boolean' },
                  credential_manager_acs_system_id: {
                    format: 'uuid',
                    type: 'string',
                  },
                  credential_manager_acs_user_id: {
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: { format: 'uuid', type: 'string' },
                },
                required: [
                  'user_identity_id',
                  'credential_manager_acs_system_id',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential_provisioning_automation: {
                      $ref: '#/components/schemas/acs_credential_provisioning_automation',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential_provisioning_automation', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credential_provisioning_automations/launch',
        tags: ['/acs'],
        'x-deprecated':
          'Use `/user_identities/enrollment_automations/launch` instead.',
        'x-fern-sdk-group-name': ['acs', 'credential_provisioning_automations'],
        'x-fern-sdk-method-name': 'launch',
        'x-fern-sdk-return-value': 'acs_credential_provisioning_automation',
        'x-response-key': 'acs_credential_provisioning_automation',
        'x-undocumented': 'Replaced by enrollment automations.',
      },
    },
    '/acs/credentials/assign': {
      patch: {
        description:
          'Assigns a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) to a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsAssignPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/assign',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Assign a Credential to an ACS User',
      },
      post: {
        description:
          'Assigns a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) to a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsAssignPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/assign',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'assign',
        'x-response-key': null,
        'x-title': 'Assign a Credential to an ACS User',
      },
    },
    '/acs/credentials/create': {
      post: {
        description:
          'Creates a new [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) for a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_method: {
                    description:
                      'Access method for the new credential. Supported values: `code`, `card`, `mobile_key`.',
                    enum: ['code', 'card', 'mobile_key'],
                    type: 'string',
                  },
                  acs_user_id: {
                    description:
                      'ID of the ACS user to whom the new credential belongs.',
                    format: 'uuid',
                    type: 'string',
                  },
                  allowed_acs_entrance_ids: {
                    default: [],
                    description:
                      'Set of IDs of the [entrances](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details) for which the new credential grants access.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  assa_abloy_vostio_metadata: {
                    description:
                      'Vostio-specific metadata for the new credential.',
                    properties: {
                      join_all_guest_acs_entrances: { type: 'boolean' },
                      override_all_guest_acs_entrances: { type: 'boolean' },
                      override_guest_acs_entrance_ids: {
                        items: { format: 'uuid', type: 'string' },
                        type: 'array',
                      },
                    },
                    type: 'object',
                  },
                  code: {
                    description:
                      'Access (PIN) code for the new credential. There may be manufacturer-specific code restrictions. For details, see the applicable [device or system integration guide](https://docs.seam.co/latest/device-and-system-integration-guides/overview).',
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  credential_manager_acs_system_id: {
                    description:
                      'ACS system ID of the credential manager for the new credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Date and time at which the validity of the new credential ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                    format: 'date-time',
                    type: 'string',
                  },
                  is_multi_phone_sync_credential: {
                    default: false,
                    description:
                      'Indicates whether the new credential is a [multi-phone sync credential](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system#what-are-multi-phone-sync-credentials).',
                    type: 'boolean',
                  },
                  salto_space_metadata: {
                    description:
                      'Salto Space-specific metadata for the new credential.',
                    properties: {
                      assign_new_key: { type: 'boolean' },
                      update_current_key: { type: 'boolean' },
                    },
                    type: 'object',
                  },
                  starts_at: {
                    description:
                      'Date and time at which the validity of the new credential starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    format: 'date-time',
                    type: 'string',
                  },
                  visionline_metadata: {
                    description:
                      'Visionline-specific metadata for the new credential.',
                    properties: {
                      assa_abloy_credential_service_mobile_endpoint_id: {
                        deprecated: true,
                        format: 'uuid',
                        type: 'string',
                        'x-deprecated':
                          'Read-only endpoint references moved to `endpoint`.',
                        'x-undocumented':
                          'Deprecated. Read-only endpoint references moved to `endpoint`.',
                      },
                      auto_join: { type: 'boolean' },
                      card_format: {
                        enum: ['TLCode', 'rfid48'],
                        type: 'string',
                      },
                      card_function_type: {
                        default: 'guest',
                        enum: ['guest', 'staff'],
                        type: 'string',
                      },
                      is_override_key: {
                        deprecated: true,
                        type: 'boolean',
                        'x-deprecated': 'Use `override` instead.',
                        'x-undocumented': 'Use `override` instead.',
                      },
                      joiner_acs_credential_ids: {
                        items: { format: 'uuid', type: 'string' },
                        type: 'array',
                      },
                      override: { type: 'boolean' },
                    },
                    type: 'object',
                  },
                },
                required: ['acs_user_id', 'access_method'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/create',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'acs_credential',
        'x-response-key': 'acs_credential',
        'x-title': 'Create a Credential for an ACS User',
      },
    },
    '/acs/credentials/create_offline_code': {
      post: {
        description:
          'Creates a new offline [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) for a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsCreateOfflineCodePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description:
                      'ID of the ACS user to whom the new credential belongs.',
                    format: 'uuid',
                    type: 'string',
                  },
                  allowed_acs_entrance_id: {
                    description:
                      'IDs of the [`acs_entrance`s](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details) for which the new credential grants access.',
                    format: 'uuid',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Date and time at which the validity of the new credential ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after `starts_at`.',
                    format: 'date-time',
                    type: 'string',
                  },
                  is_one_time_use: {
                    default: false,
                    description:
                      'Indicates whether the code is one-time-use or reusable.',
                    type: 'boolean',
                  },
                  starts_at: {
                    description:
                      'Date and time at which the validity of the new credential starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    format: 'date-time',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'allowed_acs_entrance_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/create_offline_code',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'create_offline_code',
        'x-fern-sdk-return-value': 'acs_credential',
        'x-response-key': 'acs_credential',
        'x-title': 'Create an Offline Credential for an ACS User',
        'x-undocumented': 'Unreleased.',
      },
    },
    '/acs/credentials/delete': {
      post: {
        description:
          'Deletes a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/delete',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-title': 'Delete a Credential',
      },
    },
    '/acs/credentials/get': {
      post: {
        description:
          'Returns a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_credential',
        'x-response-key': 'acs_credential',
        'x-title': 'Get a Credential',
      },
    },
    '/acs/credentials/list': {
      post: {
        description:
          'Returns a list of all [credentials](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                allOf: [
                  {
                    oneOf: [
                      {
                        properties: {
                          acs_user_id: {
                            description:
                              'ID of the ACS user for which you want to retrieve all credentials.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: ['acs_user_id'],
                        type: 'object',
                      },
                      {
                        properties: {
                          acs_system_id: {
                            description:
                              'ID of the access control system for which you want to retrieve all credentials.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: ['acs_system_id'],
                        type: 'object',
                      },
                      {
                        properties: {
                          acs_system_id: {
                            description:
                              'ID of the access control system for which you want to retrieve all credentials.',
                            format: 'uuid',
                            type: 'string',
                          },
                          acs_user_id: {
                            description:
                              'ID of the ACS user for which you want to retrieve all credentials.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: ['acs_user_id', 'acs_system_id'],
                        type: 'object',
                      },
                      {
                        properties: {
                          user_identity_id: {
                            description:
                              'ID of the user identity for which you want to retrieve all credentials.',
                            format: 'uuid',
                            type: 'string',
                          },
                        },
                        required: ['user_identity_id'],
                        type: 'object',
                      },
                    ],
                  },
                  {
                    properties: {
                      created_before: {
                        description:
                          'Date and time, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format, before which events to return were created.',
                        format: 'date-time',
                        type: 'string',
                      },
                      is_multi_phone_sync_credential: {
                        description:
                          'Indicates whether you want to retrieve only multi-phone sync credentials or non-multi-phone sync credentials.',
                        type: 'boolean',
                      },
                      limit: {
                        default: 500,
                        description: 'Number of credentials to return.',
                        format: 'float',
                        type: 'number',
                      },
                    },
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credentials: {
                      items: { $ref: '#/components/schemas/acs_credential' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credentials', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/credentials/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_credentials',
        'x-response-key': 'acs_credentials',
        'x-title': 'List Credentials',
      },
    },
    '/acs/credentials/list_accessible_entrances': {
      post: {
        description:
          'Returns a list of all [entrances](https://docs.seam.co/latest/api/acs/entrances) to which a [credential](https://docs.seam.co/latest/api/acs/credentials) grants access.',
        operationId: 'acsCredentialsListAccessibleEntrancesPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description:
                      'ID of the credential for which you want to retrieve all entrances to which this credential grants access.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_entrances: {
                      items: { $ref: '#/components/schemas/acs_entrance' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_entrances', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/credentials/list_accessible_entrances',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'list_accessible_entrances',
        'x-fern-sdk-return-value': 'acs_entrances',
        'x-response-key': 'acs_entrances',
        'x-title': 'List Accessible Entrances',
      },
    },
    '/acs/credentials/unassign': {
      patch: {
        description:
          'Unassigns a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) from a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsUnassignPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/unassign',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Unassign a Credential from an ACS User',
      },
      post: {
        description:
          'Unassigns a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) from a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsCredentialsUnassignPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired user.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/unassign',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'unassign',
        'x-response-key': null,
        'x-title': 'Unassign a Credential from an ACS User',
      },
    },
    '/acs/credentials/unmanaged/get': {
      post: {
        description:
          'Returns a specified unmanaged [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsUnmanagedGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired unmanaged credential.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/unmanaged_acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/unmanaged/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials', 'unmanaged'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_credential',
        'x-response-key': 'acs_credential',
        'x-title': 'Get an Unmanaged Credential',
        'x-undocumented': 'No unmanaged credentials are currently implemented.',
      },
    },
    '/acs/credentials/unmanaged/list': {
      post: {
        description:
          'Returns a list of all unmanaged [credentials](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsUnmanagedListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    properties: {
                      acs_user_id: {
                        description:
                          'ID of the ACS user for which you want to retrieve all credentials.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: ['acs_user_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      acs_system_id: {
                        description:
                          'ID of the access control system for which you want to retrieve all credentials.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: ['acs_system_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      acs_system_id: {
                        description:
                          'ID of the access control system for which you want to retrieve all credentials.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_user_id: {
                        description:
                          'ID of the ACS user for which you want to retrieve all credentials.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: ['acs_user_id', 'acs_system_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      user_identity_id: {
                        description:
                          'ID of the user identity for which you want to retrieve all credentials.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: ['user_identity_id'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credentials: {
                      items: {
                        $ref: '#/components/schemas/unmanaged_acs_credential',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credentials', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/credentials/unmanaged/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials', 'unmanaged'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_credentials',
        'x-response-key': 'acs_credentials',
        'x-title': 'List Unmanaged Credentials',
        'x-undocumented': 'No unmanaged credentials are currently implemented.',
      },
    },
    '/acs/credentials/update': {
      patch: {
        description:
          'Updates the code and ends at date and time for a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    type: 'string',
                  },
                  code: {
                    description:
                      'Replacement access (PIN) code for the credential.',
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Replacement date and time at which the validity of the credential ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after the `starts_at` value that you set when creating the credential.',
                    format: 'date-time',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/update',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Update a Credential',
      },
      post: {
        description:
          'Updates the code and ends at date and time for a specified [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).',
        operationId: 'acsCredentialsUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description: 'ID of the desired credential.',
                    type: 'string',
                  },
                  code: {
                    description:
                      'Replacement access (PIN) code for the credential.',
                    pattern: '^\\d+$',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Replacement date and time at which the validity of the credential ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Must be a time in the future and after the `starts_at` value that you set when creating the credential.',
                    format: 'date-time',
                    type: 'string',
                  },
                },
                required: ['acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credential: {
                      $ref: '#/components/schemas/acs_credential',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credential', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/credentials/update',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'credentials'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
        'x-title': 'Update a Credential',
      },
    },
    '/acs/encoders/encode_credential': {
      post: {
        description:
          'Encodes an existing [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) onto a plastic card placed on the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
        operationId: 'acsEncodersEncodeCredentialPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description:
                      'ID of the `acs_credential` to encode onto a card.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_encoder_id: {
                    description:
                      'ID of the `acs_encoder` to use to encode the `acs_credential`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_encoder_id', 'acs_credential_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/encoders/encode_credential',
        tags: ['/acs'],
        'x-action-attempt-type': 'ENCODE_CREDENTIAL',
        'x-fern-sdk-group-name': ['acs', 'encoders'],
        'x-fern-sdk-method-name': 'encode_credential',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Encode a Credential',
      },
    },
    '/acs/encoders/list': {
      post: {
        description:
          'Returns a list of all [encoders](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
        operationId: 'acsEncodersListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    properties: {
                      acs_system_id: {
                        description:
                          'ID of the `acs_system` for which you want to retrieve all `acs_encoder`s.',
                        format: 'uuid',
                        type: 'string',
                      },
                      limit: {
                        default: 500,
                        description: 'Number of `acs_encoders` to return.',
                        format: 'float',
                        type: 'number',
                      },
                    },
                    required: ['acs_system_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      acs_system_ids: {
                        description:
                          'IDs of the `acs_system`s for which you want to retrieve all `acs_encoder`s.',
                        items: { format: 'uuid', type: 'string' },
                        type: 'array',
                      },
                      limit: {
                        default: 500,
                        description: 'Number of `acs_encoders` to return.',
                        format: 'float',
                        type: 'number',
                      },
                    },
                    required: ['acs_system_ids'],
                    type: 'object',
                  },
                  {
                    properties: {
                      acs_encoder_ids: {
                        description:
                          'IDs of the `acs_encoder`s that you want to retrieve.',
                        items: { format: 'uuid', type: 'string' },
                        type: 'array',
                      },
                      limit: {
                        default: 500,
                        description: 'Number of `acs_encoders` to return.',
                        format: 'float',
                        type: 'number',
                      },
                    },
                    required: ['acs_encoder_ids'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_encoders: {
                      items: { $ref: '#/components/schemas/acs_encoder' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_encoders', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/encoders/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'encoders'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_encoders',
        'x-response-key': 'acs_encoders',
        'x-title': 'List Encoders',
      },
    },
    '/acs/encoders/scan_credential': {
      post: {
        description:
          'Scans an encoded [acs_credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) from a plastic card placed on the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners).',
        operationId: 'acsEncodersScanCredentialPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_encoder_id: {
                    description: 'ID of the `acs_encoder` to use for the scan.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_encoder_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/encoders/scan_credential',
        tags: ['/acs'],
        'x-action-attempt-type': 'SCAN_CREDENTIAL',
        'x-fern-sdk-group-name': ['acs', 'encoders'],
        'x-fern-sdk-method-name': 'scan_credential',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Scan a Credential',
      },
    },
    '/acs/encoders/simulate/next_credential_encode_will_fail': {
      post: {
        description:
          'Simulates that the next attempt to encode a [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) using the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) will fail. You can only perform this action within a [sandbox workspace](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces).',
        operationId: 'acsEncodersSimulateNextCredentialEncodeWillFailPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    additionalProperties: false,
                    properties: {
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will be used in the next request to encode the `acs_credential`.',
                        format: 'uuid',
                        type: 'string',
                      },
                      error_code: {
                        default: 'no_credential_on_encoder',
                        description: 'Code of the error to simulate.',
                        enum: ['no_credential_on_encoder'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id'],
                    type: 'object',
                  },
                  {
                    additionalProperties: false,
                    properties: {
                      acs_credential_id: {
                        description:
                          'ID of the `acs_credential` that will fail to be encoded onto a card in the next request.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will be used in the next request to encode the `acs_credential`.',
                        format: 'uuid',
                        type: 'string',
                      },
                      error_code: {
                        description: 'Code of the error to simulate.',
                        enum: ['uncategorized_error', 'action_attempt_expired'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id', 'error_code'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/encoders/simulate/next_credential_encode_will_fail',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'encoders', 'simulate'],
        'x-fern-sdk-method-name': 'next_credential_encode_will_fail',
        'x-response-key': null,
        'x-title': 'Simulate that the Next Credential Encoding Will Fail',
      },
    },
    '/acs/encoders/simulate/next_credential_encode_will_succeed': {
      post: {
        description:
          'Simulates that the next attempt to encode a [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) using the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) will succeed. You can only perform this action within a [sandbox workspace](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces).',
        operationId: 'acsEncodersSimulateNextCredentialEncodeWillSucceedPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                additionalProperties: false,
                properties: {
                  acs_encoder_id: {
                    description:
                      'ID of the `acs_encoder` that will be used in the next request to encode the `acs_credential`.',
                    format: 'uuid',
                    type: 'string',
                  },
                  scenario: {
                    default: 'credential_is_issued',
                    description: 'Scenario to simulate.',
                    enum: ['credential_is_issued'],
                    type: 'string',
                  },
                },
                required: ['acs_encoder_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/encoders/simulate/next_credential_encode_will_succeed',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'encoders', 'simulate'],
        'x-fern-sdk-method-name': 'next_credential_encode_will_succeed',
        'x-response-key': null,
        'x-title': 'Simulate that the Next Credential Encoding Will Succeed',
      },
    },
    '/acs/encoders/simulate/next_credential_scan_will_fail': {
      post: {
        description:
          'Simulates that the next attempt to scan a [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) using the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) will fail. You can only perform this action within a [sandbox workspace](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces).',
        operationId: 'acsEncodersSimulateNextCredentialScanWillFailPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    additionalProperties: false,
                    properties: {
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will fail to scan the `acs_credential` in the next request.',
                        format: 'uuid',
                        type: 'string',
                      },
                      error_code: {
                        default: 'no_credential_on_encoder',
                        enum: ['no_credential_on_encoder'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id'],
                    type: 'object',
                  },
                  {
                    additionalProperties: false,
                    properties: {
                      acs_credential_id_on_seam: {
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will fail to scan the `acs_credential` in the next request.',
                        format: 'uuid',
                        type: 'string',
                      },
                      error_code: {
                        enum: ['uncategorized_error', 'action_attempt_expired'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id', 'error_code'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/encoders/simulate/next_credential_scan_will_fail',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'encoders', 'simulate'],
        'x-fern-sdk-method-name': 'next_credential_scan_will_fail',
        'x-response-key': null,
        'x-title': 'Simulate that the Next Credential Scan Will Fail',
      },
    },
    '/acs/encoders/simulate/next_credential_scan_will_succeed': {
      post: {
        description:
          'Simulates that the next attempt to scan a [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) using the specified [encoder](https://docs.seam.co/latest/capability-guides/access-systems/working-with-card-encoders-and-scanners) will succeed. You can only perform this action within a [sandbox workspace](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces).',
        operationId: 'acsEncodersSimulateNextCredentialScanWillSucceedPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    additionalProperties: false,
                    properties: {
                      acs_credential_id_on_seam: {
                        description:
                          'ID of the Seam `acs_credential` that matches the `acs_credential` on the encoder in this simulation.',
                        format: 'uuid',
                        type: 'string',
                      },
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will be used in the next request to scan the `acs_credential`.',
                        format: 'uuid',
                        type: 'string',
                      },
                      scenario: {
                        default: 'credential_exists_on_seam',
                        description: 'Scenario to simulate.',
                        enum: [
                          'credential_exists_on_seam',
                          'credential_on_encoder_needs_update',
                        ],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id'],
                    type: 'object',
                  },
                  {
                    additionalProperties: false,
                    properties: {
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will be used in the next request to scan the `acs_credential`.',
                        format: 'uuid',
                        type: 'string',
                      },
                      scenario: {
                        description: 'Scenario to simulate.',
                        enum: ['credential_does_not_exist_on_seam'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id', 'scenario'],
                    type: 'object',
                  },
                  {
                    additionalProperties: false,
                    properties: {
                      acs_encoder_id: {
                        description:
                          'ID of the `acs_encoder` that will be used in the next request to scan the `acs_credential`.',
                        format: 'uuid',
                        type: 'string',
                      },
                      scenario: {
                        description: 'Scenario to simulate.',
                        enum: ['credential_on_encoder_is_empty'],
                        type: 'string',
                      },
                    },
                    required: ['acs_encoder_id', 'scenario'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/encoders/simulate/next_credential_scan_will_succeed',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'encoders', 'simulate'],
        'x-fern-sdk-method-name': 'next_credential_scan_will_succeed',
        'x-response-key': null,
        'x-title': 'Simulate that the Next Credential Scan Will Succeed',
      },
    },
    '/acs/entrances/get': {
      post: {
        description:
          'Returns a specified [ACS entrance](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details).',
        operationId: 'acsEntrancesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_entrance_id: { format: 'uuid', type: 'string' },
                },
                required: ['acs_entrance_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_entrance: { $ref: '#/components/schemas/acs_entrance' },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_entrance', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { access_token: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
        ],
        summary: '/acs/entrances/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'entrances'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_entrance',
        'x-response-key': 'acs_entrance',
        'x-title': 'Get an Entrance',
      },
    },
    '/acs/entrances/grant_access': {
      post: {
        operationId: 'acsEntrancesGrantAccessPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_entrance_id: { format: 'uuid', type: 'string' },
                  acs_user_id: { format: 'uuid', type: 'string' },
                },
                required: ['acs_entrance_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/entrances/grant_access',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'entrances'],
        'x-fern-sdk-method-name': 'grant_access',
        'x-response-key': null,
        'x-title': 'Grant an ACS User Access to an Entrance',
      },
    },
    '/acs/entrances/list': {
      post: {
        description:
          'Returns a list of all [ACS entrances](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details).',
        operationId: 'acsEntrancesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: { format: 'uuid', type: 'string' },
                  acs_system_id: { format: 'uuid', type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_entrances: {
                      items: { $ref: '#/components/schemas/acs_entrance' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_entrances', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/entrances/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'entrances'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_entrances',
        'x-response-key': 'acs_entrances',
        'x-title': 'List Entrances',
      },
    },
    '/acs/entrances/list_credentials_with_access': {
      post: {
        description:
          'Returns a list of all [credentials](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) with access to a specified [entrance](https://docs.seam.co/latest/capability-guides/access-systems/retrieving-entrance-details).',
        operationId: 'acsEntrancesListCredentialsWithAccessPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_entrance_id: { format: 'uuid', type: 'string' },
                  include_if: {
                    items: {
                      enum: ['visionline_metadata.is_valid'],
                      type: 'string',
                    },
                    type: 'array',
                  },
                },
                required: ['acs_entrance_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_credentials: {
                      items: { $ref: '#/components/schemas/acs_credential' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_credentials', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/entrances/list_credentials_with_access',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'entrances'],
        'x-fern-sdk-method-name': 'list_credentials_with_access',
        'x-fern-sdk-return-value': 'acs_credentials',
        'x-response-key': 'acs_credentials',
        'x-title': 'List Credentials with Access to an Entrance',
      },
    },
    '/acs/systems/get': {
      post: {
        description:
          'Returns a specified [access control system](https://docs.seam.co/latest/capability-guides/access-systems).\n\nSpecify the desired access control system by including the corresponding `acs_system_id` in the request body.',
        operationId: 'acsSystemsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: {
                    description: 'ID of the desired access control system.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_system_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_system: { $ref: '#/components/schemas/acs_system' },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_system', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/systems/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'systems'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_system',
        'x-response-key': 'acs_system',
        'x-title': 'Get an ACS System',
      },
    },
    '/acs/systems/list': {
      post: {
        description:
          'Returns a list of all [access control systems](https://docs.seam.co/latest/capability-guides/access-systems).\n\nTo filter the list of returned access control systems by a specific connected account ID, include the\n`connected_account_id` in the request body. If you omit the `connected_account_id` parameter, the\nresponse includes all access control systems connected to your workspace.',
        operationId: 'acsSystemsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter the list of returned access control systems.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_systems: {
                      items: { $ref: '#/components/schemas/acs_system' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_systems', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/systems/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'systems'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_systems',
        'x-response-key': 'acs_systems',
        'x-title': 'List ACS Systems',
      },
    },
    '/acs/systems/list_compatible_credential_manager_acs_systems': {
      post: {
        description:
          'Returns a list of all credential manager ACS systems that are compatible with a specified\n[access control system](https://docs.seam.co/latest/capability-guides/access-systems).\n\nSpecify the ACS system for which you want to retrieve all compatible credential manager ACS\nsystems by including the corresponding `acs_system_id` in the request body.',
        operationId: 'acsSystemsListCompatibleCredentialManagerAcsSystemsPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: {
                    description:
                      'ID of the ACS system for which you want to retrieve all compatible credential manager ACS systems.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_system_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_systems: {
                      items: { $ref: '#/components/schemas/acs_system' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_systems', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/systems/list_compatible_credential_manager_acs_systems',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'systems'],
        'x-fern-sdk-method-name':
          'list_compatible_credential_manager_acs_systems',
        'x-fern-sdk-return-value': 'acs_systems',
        'x-response-key': 'acs_systems',
        'x-title': 'List Compatible Credential Manager ACS Systems',
      },
    },
    '/acs/users/add_to_access_group': {
      post: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsUsersAddToAccessGroupPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/add_to_access_group',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'add_to_access_group',
        'x-response-key': null,
        'x-title': 'Add an ACS User to an Access Group',
      },
      put: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsUsersAddToAccessGroupPut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/add_to_access_group',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Add an ACS User to an Access Group',
      },
    },
    '/acs/users/create': {
      post: {
        description:
          'Creates a new [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_schedule: {
                    description:
                      "`starts_at` and `ends_at` timestamps for the new `acs_user`'s access. If you specify an `access_schedule`, you may include both `starts_at` and `ends_at`. `starts_at` defaults to the current time if not provided. `ends_at` is optional and must be a time in the future and after `starts_at`.",
                    properties: {
                      ends_at: {
                        format: 'date-time',
                        nullable: true,
                        type: 'string',
                      },
                      starts_at: { format: 'date-time', type: 'string' },
                    },
                    type: 'object',
                  },
                  acs_access_group_ids: {
                    default: [],
                    description:
                      'Array of `access_group_id`s to indicate the access groups to which to add the new `acs_user`.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  acs_system_id: {
                    description:
                      'ID of the `acs_system` to which to add the new `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                  email: {
                    deprecated: true,
                    format: 'email',
                    type: 'string',
                    'x-deprecated': 'use email_address.',
                  },
                  email_address: {
                    description: 'Email address of the `acs_user`.',
                    format: 'email',
                    type: 'string',
                  },
                  full_name: {
                    description: 'Full name of the new `acs_user`.',
                    type: 'string',
                  },
                  phone_number: {
                    description:
                      'Phone number of the `acs_user` in E.164 format (for example, `+15555550100`).',
                    type: 'string',
                  },
                  user_identity_id: {
                    description:
                      'ID of the user identity with which to associate the new `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['full_name', 'acs_system_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_user: { $ref: '#/components/schemas/acs_user' },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_user', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/create',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'acs_user',
        'x-response-key': 'acs_user',
        'x-title': 'Create an ACS User',
      },
    },
    '/acs/users/delete': {
      post: {
        description:
          "Deletes a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) and invalidates the ACS user's [credentials](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials).",
        operationId: 'acsUsersDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/delete',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-title': 'Delete an ACS User',
      },
    },
    '/acs/users/get': {
      post: {
        description:
          'Returns a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_user: { $ref: '#/components/schemas/acs_user' },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_user', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_user',
        'x-response-key': 'acs_user',
        'x-title': 'Get an ACS User',
      },
    },
    '/acs/users/list': {
      post: {
        description:
          'Returns a list of all [ACS users](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: {
                    description:
                      'ID of the `acs_system` for which you want to retrieve all `acs_user`s.',
                    format: 'uuid',
                    type: 'string',
                  },
                  created_before: { format: 'date-time', type: 'string' },
                  limit: {
                    default: 500,
                    description:
                      'Maximum number of records to return per page.',
                    exclusiveMinimum: true,
                    minimum: 0,
                    type: 'integer',
                  },
                  page_cursor: {
                    description:
                      "Identifies the specific page of results to return, obtained from the previous page's `next_page_cursor`.",
                    nullable: true,
                    type: 'string',
                  },
                  search: {
                    description:
                      'String to partial match between full_name, phone_number and email_address.',
                    type: 'string',
                  },
                  user_identity_email_address: {
                    description:
                      'Email address of the user identity for which you want to retrieve all `acs_user`s.',
                    type: 'string',
                  },
                  user_identity_id: {
                    description:
                      'ID of the user identity for which you want to retrieve all `acs_user`s.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_phone_number: {
                    description:
                      'Phone number of the user identity for which you want to retrieve all `acs_user`s, in [E.164 format](https://www.itu.int/rec/T-REC-E.164/en) (for example, `+15555550100`).',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_users: {
                      items: { $ref: '#/components/schemas/acs_user' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                    pagination: {
                      description:
                        'Information about the current page of results.',
                      properties: {
                        has_next_page: {
                          description:
                            'Indicates whether there is another page of results after this one.',
                          type: 'boolean',
                        },
                        next_page_cursor: {
                          description:
                            'Opaque value that can be used to select the next page of results via the `page_cursor` parameter.',
                          nullable: true,
                          type: 'string',
                        },
                      },
                      required: ['next_page_cursor', 'has_next_page'],
                      type: 'object',
                    },
                  },
                  required: ['acs_users', 'pagination', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_users',
        'x-response-key': 'acs_users',
        'x-title': 'List ACS Users',
      },
    },
    '/acs/users/list_accessible_entrances': {
      post: {
        description:
          'Lists the [entrances](https://docs.seam.co/latest/api/acs/entrances) to which a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) has access.',
        operationId: 'acsUsersListAccessibleEntrancesPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_entrances: {
                      items: { $ref: '#/components/schemas/acs_entrance' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_entrances', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/list_accessible_entrances',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'list_accessible_entrances',
        'x-fern-sdk-return-value': 'acs_entrances',
        'x-response-key': 'acs_entrances',
        'x-title': 'List ACS User-Accessible Entrances',
      },
    },
    '/acs/users/remove_from_access_group': {
      post: {
        description:
          'Removes a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) from a specified [access group](https://docs.seam.co/latest/capability-guides/access-systems/assigning-users-to-access-groups).',
        operationId: 'acsUsersRemoveFromAccessGroupPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_access_group_id: {
                    description: 'ID of the desired access group.',
                    format: 'uuid',
                    type: 'string',
                  },
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id', 'acs_access_group_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/remove_from_access_group',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'remove_from_access_group',
        'x-response-key': null,
        'x-title': 'Remove an ACS User from an Access Group',
      },
    },
    '/acs/users/revoke_access_to_all_entrances': {
      post: {
        description:
          'Revokes access to all [entrances](https://docs.seam.co/latest/api/acs/entrances) for a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersRevokeAccessToAllEntrancesPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/users/revoke_access_to_all_entrances',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'revoke_access_to_all_entrances',
        'x-response-key': null,
        'x-title': 'Revoke ACS User Access to All Entrances',
      },
    },
    '/acs/users/suspend': {
      post: {
        description:
          "[Suspends](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users#suspend-an-acs-user) a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management). Suspending an ACS user revokes their access temporarily. To restore an ACS user's access, you can [unsuspend](https://docs.seam.co/latest/api/acs/users/unsuspend) them.",
        operationId: 'acsUsersSuspendPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/suspend',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'suspend',
        'x-response-key': null,
        'x-title': 'Suspend an ACS User',
      },
    },
    '/acs/users/unmanaged/get': {
      post: {
        operationId: 'acsUsersUnmanagedGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { acs_user_id: { format: 'uuid', type: 'string' } },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_user: {
                      $ref: '#/components/schemas/unmanaged_acs_user',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_user', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/unmanaged/get',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users', 'unmanaged'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'acs_user',
        'x-response-key': 'acs_user',
        'x-undocumented': 'No unmanaged users are currently implemented.',
      },
    },
    '/acs/users/unmanaged/list': {
      post: {
        operationId: 'acsUsersUnmanagedListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_system_id: { format: 'uuid', type: 'string' },
                  limit: { default: 500, format: 'float', type: 'number' },
                  user_identity_email_address: { type: 'string' },
                  user_identity_id: { format: 'uuid', type: 'string' },
                  user_identity_phone_number: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_users: {
                      items: {
                        $ref: '#/components/schemas/unmanaged_acs_user',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_users', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/acs/users/unmanaged/list',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users', 'unmanaged'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'acs_users',
        'x-response-key': 'acs_users',
        'x-undocumented': 'No unmanaged users are currently implemented.',
      },
    },
    '/acs/users/unsuspend': {
      post: {
        description:
          '[Unsuspends](https://docs.seam.co/latest/capability-guides/access-systems/user-management/suspending-and-unsuspending-users#unsuspend-an-acs-user) a specified suspended [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management). While [suspending an ACS user](https://docs.seam.co/latest/api/acs/users/suspend) revokes their access temporarily, unsuspending the ACS user restores their access.',
        operationId: 'acsUsersUnsuspendPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/users/unsuspend',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'unsuspend',
        'x-response-key': null,
        'x-title': 'Unsuspend an ACS User',
      },
    },
    '/acs/users/update': {
      patch: {
        description:
          'Updates the properties of a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_schedule: {
                    description:
                      "`starts_at` and `ends_at` timestamps for the `acs_user`'s access. If you specify an `access_schedule`, you must include both `starts_at` and `ends_at`. `ends_at` must be a time in the future and after `starts_at`.",
                    nullable: true,
                    properties: {
                      ends_at: { format: 'date-time', type: 'string' },
                      starts_at: { format: 'date-time', type: 'string' },
                    },
                    required: ['starts_at', 'ends_at'],
                    type: 'object',
                  },
                  acs_user_id: {
                    description: 'ID of the `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                  email: {
                    deprecated: true,
                    format: 'email',
                    type: 'string',
                    'x-deprecated': 'use email_address.',
                  },
                  email_address: {
                    description: 'Email address of the `acs_user`.',
                    format: 'email',
                    type: 'string',
                  },
                  full_name: {
                    description: 'Full name of the `acs_user`.',
                    type: 'string',
                  },
                  hid_acs_system_id: { format: 'uuid', type: 'string' },
                  phone_number: {
                    description:
                      'Phone number of the `acs_user` in E.164 format (for example, `+15555550100`).',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/users/update',
        tags: ['/acs'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Update an ACS User',
      },
      post: {
        description:
          'Updates the properties of a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management).',
        operationId: 'acsUsersUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_schedule: {
                    description:
                      "`starts_at` and `ends_at` timestamps for the `acs_user`'s access. If you specify an `access_schedule`, you must include both `starts_at` and `ends_at`. `ends_at` must be a time in the future and after `starts_at`.",
                    nullable: true,
                    properties: {
                      ends_at: { format: 'date-time', type: 'string' },
                      starts_at: { format: 'date-time', type: 'string' },
                    },
                    required: ['starts_at', 'ends_at'],
                    type: 'object',
                  },
                  acs_user_id: {
                    description: 'ID of the `acs_user`.',
                    format: 'uuid',
                    type: 'string',
                  },
                  email: {
                    deprecated: true,
                    format: 'email',
                    type: 'string',
                    'x-deprecated': 'use email_address.',
                  },
                  email_address: {
                    description: 'Email address of the `acs_user`.',
                    format: 'email',
                    type: 'string',
                  },
                  full_name: {
                    description: 'Full name of the `acs_user`.',
                    type: 'string',
                  },
                  hid_acs_system_id: { format: 'uuid', type: 'string' },
                  phone_number: {
                    description:
                      'Phone number of the `acs_user` in E.164 format (for example, `+15555550100`).',
                    type: 'string',
                  },
                },
                required: ['acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/acs/users/update',
        tags: ['/acs'],
        'x-fern-sdk-group-name': ['acs', 'users'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
        'x-title': 'Update an ACS User',
      },
    },
    '/action_attempts/get': {
      post: {
        operationId: 'actionAttemptsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  action_attempt_id: { format: 'uuid', type: 'string' },
                },
                required: ['action_attempt_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/action_attempts/get',
        tags: ['/action_attempts'],
        'x-fern-sdk-group-name': ['action_attempts'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
      },
    },
    '/action_attempts/list': {
      post: {
        operationId: 'actionAttemptsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  action_attempt_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                },
                required: ['action_attempt_ids'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempts: {
                      items: { $ref: '#/components/schemas/action_attempt' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempts', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/action_attempts/list',
        tags: ['/action_attempts'],
        'x-fern-sdk-group-name': ['action_attempts'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'action_attempts',
        'x-response-key': 'action_attempts',
      },
    },
    '/bridges/get': {
      post: {
        operationId: 'bridgesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { bridge_id: { format: 'uuid', type: 'string' } },
                required: ['bridge_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridge: {
                      properties: {
                        bridge_id: { format: 'uuid', type: 'string' },
                        created_at: { format: 'date-time', type: 'string' },
                        workspace_id: { format: 'uuid', type: 'string' },
                      },
                      required: ['bridge_id', 'workspace_id', 'created_at'],
                      type: 'object',
                      'x-route-path': '/bridges',
                      'x-undocumented': 'Unreleased.',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridge', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/bridges/get',
        tags: [],
        'x-fern-sdk-group-name': ['bridges'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'bridge',
        'x-response-key': 'bridge',
      },
    },
    '/bridges/list': {
      post: {
        operationId: 'bridgesListPost',
        requestBody: {
          content: {
            'application/json': { schema: { properties: {}, type: 'object' } },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridges: {
                      items: {
                        properties: {
                          bridge_id: { format: 'uuid', type: 'string' },
                          created_at: { format: 'date-time', type: 'string' },
                          workspace_id: { format: 'uuid', type: 'string' },
                        },
                        required: ['bridge_id', 'workspace_id', 'created_at'],
                        type: 'object',
                        'x-route-path': '/bridges',
                        'x-undocumented': 'Unreleased.',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridges', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/bridges/list',
        tags: [],
        'x-fern-sdk-group-name': ['bridges'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'bridges',
        'x-response-key': 'bridges',
      },
    },
    '/client_sessions/create': {
      post: {
        operationId: 'clientSessionsCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  connected_account_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  expires_at: { format: 'date-time', type: 'string' },
                  user_identifier_key: { minLength: 1, type: 'string' },
                  user_identity_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { publishable_key: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/create',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'client_session',
        'x-response-key': 'client_session',
      },
      put: {
        operationId: 'clientSessionsCreatePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  connected_account_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  expires_at: { format: 'date-time', type: 'string' },
                  user_identifier_key: { minLength: 1, type: 'string' },
                  user_identity_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { publishable_key: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/create',
        tags: ['/client_sessions'],
        'x-fern-ignore': true,
        'x-response-key': 'client_session',
      },
    },
    '/client_sessions/delete': {
      post: {
        operationId: 'clientSessionsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { format: 'uuid', type: 'string' },
                },
                required: ['client_session_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/delete',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/client_sessions/get': {
      post: {
        operationId: 'clientSessionsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { type: 'string' },
                  user_identifier_key: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/client_sessions/get',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'client_session',
        'x-response-key': 'client_session',
      },
    },
    '/client_sessions/get_or_create': {
      post: {
        operationId: 'clientSessionsGetOrCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  connected_account_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  expires_at: { format: 'date-time', type: 'string' },
                  user_identifier_key: { minLength: 1, type: 'string' },
                  user_identity_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { publishable_key: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/get_or_create',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'get_or_create',
        'x-fern-sdk-return-value': 'client_session',
        'x-response-key': 'client_session',
      },
    },
    '/client_sessions/grant_access': {
      patch: {
        operationId: 'clientSessionsGrantAccessPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { type: 'string' },
                  connect_webview_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  connected_account_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  user_identifier_key: { type: 'string' },
                  user_identity_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/grant_access',
        tags: ['/client_sessions'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'clientSessionsGrantAccessPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { type: 'string' },
                  connect_webview_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  connected_account_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                  user_identifier_key: { type: 'string' },
                  user_identity_ids: {
                    items: { type: 'string' },
                    type: 'array',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_session: {
                      $ref: '#/components/schemas/client_session',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/grant_access',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'grant_access',
        'x-response-key': null,
      },
    },
    '/client_sessions/list': {
      post: {
        operationId: 'clientSessionsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { type: 'string' },
                  connect_webview_id: { type: 'string' },
                  user_identifier_key: { type: 'string' },
                  user_identity_id: { type: 'string' },
                  without_user_identifier_key: { type: 'boolean' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    client_sessions: {
                      items: { $ref: '#/components/schemas/client_session' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['client_sessions', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/list',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'client_sessions',
        'x-response-key': 'client_sessions',
      },
    },
    '/client_sessions/revoke': {
      post: {
        operationId: 'clientSessionsRevokePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  client_session_id: { format: 'uuid', type: 'string' },
                },
                required: ['client_session_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/client_sessions/revoke',
        tags: ['/client_sessions'],
        'x-fern-sdk-group-name': ['client_sessions'],
        'x-fern-sdk-method-name': 'revoke',
        'x-response-key': null,
      },
    },
    '/connect_webviews/create': {
      post: {
        operationId: 'connectWebviewsCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  accepted_providers: {
                    items: {
                      enum: [
                        'dormakaba_community',
                        'legic_connect',
                        'akuvox',
                        'august',
                        'avigilon_alta',
                        'brivo',
                        'butterflymx',
                        'schlage',
                        'smartthings',
                        'yale',
                        'genie',
                        'doorking',
                        'salto',
                        'salto_ks',
                        'lockly',
                        'ttlock',
                        'linear',
                        'noiseaware',
                        'nuki',
                        'seam_relay_admin',
                        'igloo',
                        'kwikset',
                        'minut',
                        'my_2n',
                        'controlbyweb',
                        'nest',
                        'igloohome',
                        'ecobee',
                        'hubitat',
                        'four_suites',
                        'dormakaba_oracode',
                        'pti',
                        'wyze',
                        'seam_passport',
                        'visionline',
                        'assa_abloy_credential_service',
                        'seam_bridge',
                        'tedee',
                        'honeywell_resideo',
                        'latch',
                        'akiles',
                        'assa_abloy_vostio',
                        'assa_abloy_vostio_credential_service',
                        'tado',
                        'salto_space',
                        'yale_access',
                        'hid_cm',
                        'google_nest',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                  },
                  automatically_manage_new_devices: {
                    default: true,
                    type: 'boolean',
                  },
                  custom_metadata: {
                    additionalProperties: {
                      nullable: true,
                      oneOf: [
                        { maxLength: 500, type: 'string' },
                        { type: 'boolean' },
                      ],
                    },
                    type: 'object',
                  },
                  custom_redirect_failure_url: { type: 'string' },
                  custom_redirect_url: { type: 'string' },
                  device_selection_mode: {
                    enum: ['none', 'single', 'multiple'],
                    type: 'string',
                  },
                  provider_category: {
                    enum: [
                      'stable',
                      'consumer_smartlocks',
                      'thermostats',
                      'noise_sensors',
                      'access_control_systems',
                      'internal_beta',
                    ],
                    type: 'string',
                  },
                  wait_for_device_creation: { default: false, type: 'boolean' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connect_webview: {
                      $ref: '#/components/schemas/connect_webview',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connect_webview', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/connect_webviews/create',
        tags: ['/connect_webviews'],
        'x-fern-sdk-group-name': ['connect_webviews'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'connect_webview',
        'x-response-key': 'connect_webview',
      },
    },
    '/connect_webviews/delete': {
      post: {
        operationId: 'connectWebviewsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: { format: 'uuid', type: 'string' },
                },
                required: ['connect_webview_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/connect_webviews/delete',
        tags: ['/connect_webviews'],
        'x-fern-sdk-group-name': ['connect_webviews'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/connect_webviews/get': {
      post: {
        operationId: 'connectWebviewsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: { format: 'uuid', type: 'string' },
                },
                required: ['connect_webview_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connect_webview: {
                      $ref: '#/components/schemas/connect_webview',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connect_webview', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/connect_webviews/get',
        tags: ['/connect_webviews'],
        'x-fern-sdk-group-name': ['connect_webviews'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'connect_webview',
        'x-response-key': 'connect_webview',
      },
    },
    '/connect_webviews/list': {
      post: {
        operationId: 'connectWebviewsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Returns webviews whose custom_metadata contains all of the provided key/value pairs.',
                    type: 'object',
                  },
                  limit: { default: 500, format: 'float', type: 'number' },
                  user_identifier_key: {
                    description:
                      'Returns webviews that can be accessed by the provided user_identifier_key.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connect_webviews: {
                      items: { $ref: '#/components/schemas/connect_webview' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connect_webviews', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/connect_webviews/list',
        tags: ['/connect_webviews'],
        'x-fern-sdk-group-name': ['connect_webviews'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'connect_webviews',
        'x-response-key': 'connect_webviews',
      },
    },
    '/connected_accounts/delete': {
      post: {
        operationId: 'connectedAccountsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connected_account_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['connected_account_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/connected_accounts/delete',
        tags: ['/connected_accounts'],
        'x-fern-sdk-group-name': ['connected_accounts'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/connected_accounts/get': {
      post: {
        operationId: 'connectedAccountsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    properties: {
                      connected_account_id: { format: 'uuid', type: 'string' },
                    },
                    required: ['connected_account_id'],
                    type: 'object',
                  },
                  {
                    properties: { email: { format: 'email', type: 'string' } },
                    required: ['email'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connected_account: {
                      $ref: '#/components/schemas/connected_account',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connected_account', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/connected_accounts/get',
        tags: ['/connected_accounts'],
        'x-fern-sdk-group-name': ['connected_accounts'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'connected_account',
        'x-response-key': 'connected_account',
      },
    },
    '/connected_accounts/list': {
      post: {
        operationId: 'connectedAccountsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Returns accounts whose custom_metadata contains all of the provided key/value pairs.',
                    type: 'object',
                  },
                  user_identifier_key: {
                    description:
                      'Returns accounts that can be accessed by the provided user_identifier_key.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connected_accounts: {
                      items: { $ref: '#/components/schemas/connected_account' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connected_accounts', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/connected_accounts/list',
        tags: ['/connected_accounts'],
        'x-fern-sdk-group-name': ['connected_accounts'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'connected_accounts',
        'x-response-key': 'connected_accounts',
      },
    },
    '/connected_accounts/update': {
      post: {
        operationId: 'connectedAccountsUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  automatically_manage_new_devices: { type: 'boolean' },
                  connected_account_id: { format: 'uuid', type: 'string' },
                  custom_metadata: {
                    additionalProperties: {
                      nullable: true,
                      oneOf: [
                        { maxLength: 500, type: 'string' },
                        { type: 'boolean' },
                      ],
                    },
                    type: 'object',
                  },
                },
                required: ['connected_account_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    connected_account: {
                      $ref: '#/components/schemas/connected_account',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['connected_account', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/connected_accounts/update',
        tags: ['/connected_accounts'],
        'x-fern-sdk-group-name': ['connected_accounts'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
    },
    '/devices/delete': {
      post: {
        operationId: 'devicesDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/delete',
        tags: ['/devices'],
        'x-deprecated':
          'Deleting a device is no longer supported and will be removed.',
        'x-fern-sdk-group-name': ['devices'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-undocumented':
          'Deleting a device is no longer supported and will be removed.',
      },
    },
    '/devices/get': {
      post: {
        operationId: 'devicesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  name: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    device: { $ref: '#/components/schemas/device' },
                    ok: { type: 'boolean' },
                  },
                  required: ['device', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/devices/get',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'device',
        'x-response-key': 'device',
      },
    },
    '/devices/list': {
      post: {
        description:
          'Returns a list of all [devices](https://docs.seam.co/latest/core-concepts/devices).',
        operationId: 'devicesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: {
                    description:
                      'ID of the Connect Webview by which to filter devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_ids: {
                    description:
                      'Array of IDs of the connected accounts by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  created_before: {
                    description:
                      'Date threshold for devices to return. If specified, returns only devices created before the specified date.',
                    format: 'date-time',
                    type: 'string',
                  },
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Set of key:value [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) pairs by which you want to filter devices.',
                    type: 'object',
                  },
                  device_ids: {
                    description:
                      'Array of device IDs by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_type: {
                    description: 'Device type by which to filter devices.',
                    oneOf: [
                      {
                        enum: [
                          'akuvox_lock',
                          'august_lock',
                          'brivo_access_point',
                          'butterflymx_panel',
                          'avigilon_alta_entry',
                          'doorking_lock',
                          'genie_door',
                          'igloo_lock',
                          'linear_lock',
                          'lockly_lock',
                          'kwikset_lock',
                          'nuki_lock',
                          'salto_lock',
                          'schlage_lock',
                          'seam_relay',
                          'smartthings_lock',
                          'wyze_lock',
                          'yale_lock',
                          'two_n_intercom',
                          'controlbyweb_device',
                          'ttlock_lock',
                          'igloohome_lock',
                          'hubitat_lock',
                          'four_suites_door',
                          'dormakaba_oracode_door',
                          'tedee_lock',
                          'akiles_lock',
                        ],
                        type: 'string',
                      },
                      {
                        enum: ['noiseaware_activity_zone', 'minut_sensor'],
                        type: 'string',
                      },
                      {
                        enum: [
                          'ecobee_thermostat',
                          'nest_thermostat',
                          'honeywell_resideo_thermostat',
                          'tado_thermostat',
                        ],
                        type: 'string',
                      },
                      {
                        description: 'Type of phone.',
                        enum: ['ios_phone', 'android_phone'],
                        type: 'string',
                      },
                    ],
                  },
                  device_types: {
                    description:
                      'Array of device types by which to filter devices.',
                    items: {
                      oneOf: [
                        {
                          enum: [
                            'akuvox_lock',
                            'august_lock',
                            'brivo_access_point',
                            'butterflymx_panel',
                            'avigilon_alta_entry',
                            'doorking_lock',
                            'genie_door',
                            'igloo_lock',
                            'linear_lock',
                            'lockly_lock',
                            'kwikset_lock',
                            'nuki_lock',
                            'salto_lock',
                            'schlage_lock',
                            'seam_relay',
                            'smartthings_lock',
                            'wyze_lock',
                            'yale_lock',
                            'two_n_intercom',
                            'controlbyweb_device',
                            'ttlock_lock',
                            'igloohome_lock',
                            'hubitat_lock',
                            'four_suites_door',
                            'dormakaba_oracode_door',
                            'tedee_lock',
                            'akiles_lock',
                          ],
                          type: 'string',
                        },
                        {
                          enum: ['noiseaware_activity_zone', 'minut_sensor'],
                          type: 'string',
                        },
                        {
                          enum: [
                            'ecobee_thermostat',
                            'nest_thermostat',
                            'honeywell_resideo_thermostat',
                            'tado_thermostat',
                          ],
                          type: 'string',
                        },
                        {
                          description: 'Type of phone.',
                          enum: ['ios_phone', 'android_phone'],
                          type: 'string',
                        },
                      ],
                    },
                    type: 'array',
                  },
                  exclude_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  include_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  limit: {
                    default: 500,
                    description:
                      'Numerical limit on the number of devices to return.',
                    format: 'float',
                    type: 'number',
                  },
                  manufacturer: {
                    description: 'Manufacturer by which to filter devices.',
                    enum: [
                      'akuvox',
                      'august',
                      'avigilon_alta',
                      'brivo',
                      'butterflymx',
                      'doorking',
                      'four_suites',
                      'genie',
                      'igloo',
                      'keywe',
                      'kwikset',
                      'linear',
                      'lockly',
                      'nuki',
                      'philia',
                      'salto',
                      'samsung',
                      'schlage',
                      'seam',
                      'unknown',
                      'wyze',
                      'yale',
                      'minut',
                      'two_n',
                      'ttlock',
                      'nest',
                      'igloohome',
                      'ecobee',
                      'hubitat',
                      'controlbyweb',
                      'smartthings',
                      'dormakaba_oracode',
                      'tedee',
                      'honeywell_resideo',
                      'akiles',
                      'tado',
                    ],
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'Your own internal user ID for the user by which to filter devices.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    devices: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/devices/list',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
        'x-title': 'List Devices',
      },
    },
    '/devices/list_device_providers': {
      post: {
        operationId: 'devicesListDeviceProvidersPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  provider_category: {
                    enum: [
                      'stable',
                      'consumer_smartlocks',
                      'thermostats',
                      'noise_sensors',
                      'access_control_systems',
                    ],
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    device_providers: {
                      items: { $ref: '#/components/schemas/device_provider' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['device_providers', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/devices/list_device_providers',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices'],
        'x-fern-sdk-method-name': 'list_device_providers',
        'x-fern-sdk-return-value': 'device_providers',
        'x-response-key': 'device_providers',
      },
    },
    '/devices/simulate/connect': {
      post: {
        operationId: 'devicesSimulateConnectPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/simulate/connect',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'simulate'],
        'x-fern-sdk-method-name': 'connect',
        'x-response-key': null,
      },
    },
    '/devices/simulate/disconnect': {
      post: {
        operationId: 'devicesSimulateDisconnectPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/simulate/disconnect',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'simulate'],
        'x-fern-sdk-method-name': 'disconnect',
        'x-response-key': null,
      },
    },
    '/devices/simulate/remove': {
      post: {
        operationId: 'devicesSimulateRemovePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/simulate/remove',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'simulate'],
        'x-fern-sdk-method-name': 'remove',
        'x-response-key': null,
      },
    },
    '/devices/unmanaged/get': {
      post: {
        operationId: 'devicesUnmanagedGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  name: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    device: { $ref: '#/components/schemas/unmanaged_device' },
                    ok: { type: 'boolean' },
                  },
                  required: ['device', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/devices/unmanaged/get',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'unmanaged'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'device',
        'x-response-key': 'device',
      },
    },
    '/devices/unmanaged/list': {
      post: {
        operationId: 'devicesUnmanagedListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: {
                    description:
                      'ID of the Connect Webview by which to filter devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_ids: {
                    description:
                      'Array of IDs of the connected accounts by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  created_before: {
                    description:
                      'Date threshold for devices to return. If specified, returns only devices created before the specified date.',
                    format: 'date-time',
                    type: 'string',
                  },
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Set of key:value [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) pairs by which you want to filter devices.',
                    type: 'object',
                  },
                  device_ids: {
                    description:
                      'Array of device IDs by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_type: {
                    description: 'Device type by which to filter devices.',
                    oneOf: [
                      {
                        enum: [
                          'akuvox_lock',
                          'august_lock',
                          'brivo_access_point',
                          'butterflymx_panel',
                          'avigilon_alta_entry',
                          'doorking_lock',
                          'genie_door',
                          'igloo_lock',
                          'linear_lock',
                          'lockly_lock',
                          'kwikset_lock',
                          'nuki_lock',
                          'salto_lock',
                          'schlage_lock',
                          'seam_relay',
                          'smartthings_lock',
                          'wyze_lock',
                          'yale_lock',
                          'two_n_intercom',
                          'controlbyweb_device',
                          'ttlock_lock',
                          'igloohome_lock',
                          'hubitat_lock',
                          'four_suites_door',
                          'dormakaba_oracode_door',
                          'tedee_lock',
                          'akiles_lock',
                        ],
                        type: 'string',
                      },
                      {
                        enum: ['noiseaware_activity_zone', 'minut_sensor'],
                        type: 'string',
                      },
                      {
                        enum: [
                          'ecobee_thermostat',
                          'nest_thermostat',
                          'honeywell_resideo_thermostat',
                          'tado_thermostat',
                        ],
                        type: 'string',
                      },
                      {
                        description: 'Type of phone.',
                        enum: ['ios_phone', 'android_phone'],
                        type: 'string',
                      },
                    ],
                  },
                  device_types: {
                    description:
                      'Array of device types by which to filter devices.',
                    items: {
                      oneOf: [
                        {
                          enum: [
                            'akuvox_lock',
                            'august_lock',
                            'brivo_access_point',
                            'butterflymx_panel',
                            'avigilon_alta_entry',
                            'doorking_lock',
                            'genie_door',
                            'igloo_lock',
                            'linear_lock',
                            'lockly_lock',
                            'kwikset_lock',
                            'nuki_lock',
                            'salto_lock',
                            'schlage_lock',
                            'seam_relay',
                            'smartthings_lock',
                            'wyze_lock',
                            'yale_lock',
                            'two_n_intercom',
                            'controlbyweb_device',
                            'ttlock_lock',
                            'igloohome_lock',
                            'hubitat_lock',
                            'four_suites_door',
                            'dormakaba_oracode_door',
                            'tedee_lock',
                            'akiles_lock',
                          ],
                          type: 'string',
                        },
                        {
                          enum: ['noiseaware_activity_zone', 'minut_sensor'],
                          type: 'string',
                        },
                        {
                          enum: [
                            'ecobee_thermostat',
                            'nest_thermostat',
                            'honeywell_resideo_thermostat',
                            'tado_thermostat',
                          ],
                          type: 'string',
                        },
                        {
                          description: 'Type of phone.',
                          enum: ['ios_phone', 'android_phone'],
                          type: 'string',
                        },
                      ],
                    },
                    type: 'array',
                  },
                  exclude_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  include_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  limit: {
                    default: 500,
                    description:
                      'Numerical limit on the number of devices to return.',
                    format: 'float',
                    type: 'number',
                  },
                  manufacturer: {
                    description: 'Manufacturer by which to filter devices.',
                    enum: [
                      'akuvox',
                      'august',
                      'avigilon_alta',
                      'brivo',
                      'butterflymx',
                      'doorking',
                      'four_suites',
                      'genie',
                      'igloo',
                      'keywe',
                      'kwikset',
                      'linear',
                      'lockly',
                      'nuki',
                      'philia',
                      'salto',
                      'samsung',
                      'schlage',
                      'seam',
                      'unknown',
                      'wyze',
                      'yale',
                      'minut',
                      'two_n',
                      'ttlock',
                      'nest',
                      'igloohome',
                      'ecobee',
                      'hubitat',
                      'controlbyweb',
                      'smartthings',
                      'dormakaba_oracode',
                      'tedee',
                      'honeywell_resideo',
                      'akiles',
                      'tado',
                    ],
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'Your own internal user ID for the user by which to filter devices.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    devices: {
                      items: { $ref: '#/components/schemas/unmanaged_device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/unmanaged/list',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'unmanaged'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
      },
    },
    '/devices/unmanaged/update': {
      patch: {
        operationId: 'devicesUnmanagedUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  is_managed: { enum: [true], type: 'boolean' },
                },
                required: ['device_id', 'is_managed'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/unmanaged/update',
        tags: ['/devices'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'devicesUnmanagedUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  is_managed: { enum: [true], type: 'boolean' },
                },
                required: ['device_id', 'is_managed'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/devices/unmanaged/update',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices', 'unmanaged'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
    },
    '/devices/update': {
      patch: {
        operationId: 'devicesUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  custom_metadata: {
                    additionalProperties: {
                      nullable: true,
                      oneOf: [
                        { maxLength: 500, type: 'string' },
                        { type: 'boolean' },
                      ],
                    },
                    type: 'object',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  is_managed: { default: true, type: 'boolean' },
                  name: { nullable: true, type: 'string' },
                  properties: {
                    properties: { name: { nullable: true, type: 'string' } },
                    type: 'object',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
        ],
        summary: '/devices/update',
        tags: ['/devices'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'devicesUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  custom_metadata: {
                    additionalProperties: {
                      nullable: true,
                      oneOf: [
                        { maxLength: 500, type: 'string' },
                        { type: 'boolean' },
                      ],
                    },
                    type: 'object',
                  },
                  device_id: { format: 'uuid', type: 'string' },
                  is_managed: { default: true, type: 'boolean' },
                  name: { nullable: true, type: 'string' },
                  properties: {
                    properties: { name: { nullable: true, type: 'string' } },
                    type: 'object',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
        ],
        summary: '/devices/update',
        tags: ['/devices'],
        'x-fern-sdk-group-name': ['devices'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
    },
    '/events/get': {
      post: {
        operationId: 'eventsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  event_id: { format: 'uuid', type: 'string' },
                  event_type: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    event: { $ref: '#/components/schemas/event' },
                    message: { type: 'string' },
                    ok: { type: 'boolean' },
                  },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/events/get',
        tags: ['/events'],
        'x-fern-sdk-group-name': ['events'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'event',
        'x-response-key': 'event',
      },
    },
    '/events/list': {
      post: {
        operationId: 'eventsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  access_code_id: { format: 'uuid', type: 'string' },
                  access_code_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  acs_system_id: { format: 'uuid', type: 'string' },
                  acs_system_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  between: {
                    items: {
                      oneOf: [
                        { type: 'string' },
                        { format: 'date-time', type: 'string' },
                      ],
                    },
                    maxItems: 2,
                    minItems: 2,
                    type: 'array',
                  },
                  connect_webview_id: { format: 'uuid', type: 'string' },
                  connected_account_id: { format: 'uuid', type: 'string' },
                  device_id: { format: 'uuid', type: 'string' },
                  device_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  event_ids: {
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  event_type: {
                    enum: [
                      'access_code.created',
                      'access_code.changed',
                      'access_code.scheduled_on_device',
                      'access_code.set_on_device',
                      'access_code.removed_from_device',
                      'access_code.delay_in_setting_on_device',
                      'access_code.failed_to_set_on_device',
                      'access_code.deleted',
                      'access_code.delay_in_removing_from_device',
                      'access_code.failed_to_remove_from_device',
                      'access_code.modified_external_to_seam',
                      'access_code.deleted_external_to_seam',
                      'access_code.backup_access_code_pulled',
                      'access_code.unmanaged.converted_to_managed',
                      'access_code.unmanaged.failed_to_convert_to_managed',
                      'access_code.unmanaged.created',
                      'access_code.unmanaged.removed',
                      'acs_system.connected',
                      'acs_system.added',
                      'acs_system.disconnected',
                      'acs_credential.deleted',
                      'acs_credential.issued',
                      'acs_credential.reissued',
                      'acs_user.deleted',
                      'acs_encoder.added',
                      'acs_encoder.removed',
                      'acs_access_group.deleted',
                      'client_session.deleted',
                      'connected_account.connected',
                      'connected_account.created',
                      'connected_account.successful_login',
                      'connected_account.disconnected',
                      'connected_account.completed_first_sync',
                      'connected_account.deleted',
                      'connected_account.completed_first_sync_after_reconnection',
                      'action_attempt.lock_door.succeeded',
                      'action_attempt.lock_door.failed',
                      'action_attempt.unlock_door.succeeded',
                      'action_attempt.unlock_door.failed',
                      'connect_webview.login_succeeded',
                      'connect_webview.login_failed',
                      'device.connected',
                      'device.added',
                      'device.converted_to_unmanaged',
                      'device.unmanaged.converted_to_managed',
                      'device.unmanaged.connected',
                      'device.disconnected',
                      'device.unmanaged.disconnected',
                      'device.tampered',
                      'device.low_battery',
                      'device.battery_status_changed',
                      'device.removed',
                      'device.deleted',
                      'device.third_party_integration_detected',
                      'device.third_party_integration_no_longer_detected',
                      'device.salto.privacy_mode_activated',
                      'device.salto.privacy_mode_deactivated',
                      'device.connection_became_flaky',
                      'device.connection_stabilized',
                      'device.error.subscription_required',
                      'device.error.subscription_required.resolved',
                      'device.accessory_keypad_connected',
                      'device.accessory_keypad_disconnected',
                      'noise_sensor.noise_threshold_triggered',
                      'lock.locked',
                      'lock.unlocked',
                      'lock.access_denied',
                      'thermostat.climate_preset_activated',
                      'thermostat.manually_adjusted',
                      'thermostat.temperature_threshold_exceeded',
                      'thermostat.temperature_threshold_no_longer_exceeded',
                      'thermostat.temperature_reached_set_point',
                      'thermostat.temperature_changed',
                      'enrollment_automation.deleted',
                      'phone.deactivated',
                    ],
                    type: 'string',
                  },
                  event_types: {
                    items: {
                      enum: [
                        'access_code.created',
                        'access_code.changed',
                        'access_code.scheduled_on_device',
                        'access_code.set_on_device',
                        'access_code.removed_from_device',
                        'access_code.delay_in_setting_on_device',
                        'access_code.failed_to_set_on_device',
                        'access_code.deleted',
                        'access_code.delay_in_removing_from_device',
                        'access_code.failed_to_remove_from_device',
                        'access_code.modified_external_to_seam',
                        'access_code.deleted_external_to_seam',
                        'access_code.backup_access_code_pulled',
                        'access_code.unmanaged.converted_to_managed',
                        'access_code.unmanaged.failed_to_convert_to_managed',
                        'access_code.unmanaged.created',
                        'access_code.unmanaged.removed',
                        'acs_system.connected',
                        'acs_system.added',
                        'acs_system.disconnected',
                        'acs_credential.deleted',
                        'acs_credential.issued',
                        'acs_credential.reissued',
                        'acs_user.deleted',
                        'acs_encoder.added',
                        'acs_encoder.removed',
                        'acs_access_group.deleted',
                        'client_session.deleted',
                        'connected_account.connected',
                        'connected_account.created',
                        'connected_account.successful_login',
                        'connected_account.disconnected',
                        'connected_account.completed_first_sync',
                        'connected_account.deleted',
                        'connected_account.completed_first_sync_after_reconnection',
                        'action_attempt.lock_door.succeeded',
                        'action_attempt.lock_door.failed',
                        'action_attempt.unlock_door.succeeded',
                        'action_attempt.unlock_door.failed',
                        'connect_webview.login_succeeded',
                        'connect_webview.login_failed',
                        'device.connected',
                        'device.added',
                        'device.converted_to_unmanaged',
                        'device.unmanaged.converted_to_managed',
                        'device.unmanaged.connected',
                        'device.disconnected',
                        'device.unmanaged.disconnected',
                        'device.tampered',
                        'device.low_battery',
                        'device.battery_status_changed',
                        'device.removed',
                        'device.deleted',
                        'device.third_party_integration_detected',
                        'device.third_party_integration_no_longer_detected',
                        'device.salto.privacy_mode_activated',
                        'device.salto.privacy_mode_deactivated',
                        'device.connection_became_flaky',
                        'device.connection_stabilized',
                        'device.error.subscription_required',
                        'device.error.subscription_required.resolved',
                        'device.accessory_keypad_connected',
                        'device.accessory_keypad_disconnected',
                        'noise_sensor.noise_threshold_triggered',
                        'lock.locked',
                        'lock.unlocked',
                        'lock.access_denied',
                        'thermostat.climate_preset_activated',
                        'thermostat.manually_adjusted',
                        'thermostat.temperature_threshold_exceeded',
                        'thermostat.temperature_threshold_no_longer_exceeded',
                        'thermostat.temperature_reached_set_point',
                        'thermostat.temperature_changed',
                        'enrollment_automation.deleted',
                        'phone.deactivated',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                  },
                  limit: { default: 500, format: 'float', type: 'number' },
                  since: { type: 'string' },
                  unstable_offset: { format: 'float', type: 'number' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    events: {
                      items: { $ref: '#/components/schemas/event' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['events', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/events/list',
        tags: ['/events'],
        'x-fern-sdk-group-name': ['events'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'events',
        'x-response-key': 'events',
      },
    },
    '/locks/get': {
      post: {
        operationId: 'locksGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  name: { type: 'string' },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    device: { $ref: '#/components/schemas/device' },
                    lock: { $ref: '#/components/schemas/device' },
                    ok: { type: 'boolean' },
                  },
                  required: ['lock', 'device', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/locks/get',
        tags: ['/locks'],
        'x-deprecated': 'Use `/devices/get` instead.',
        'x-fern-sdk-group-name': ['locks'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'device',
        'x-response-key': 'device',
      },
    },
    '/locks/list': {
      post: {
        operationId: 'locksListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: {
                    description:
                      'ID of the Connect Webview by which to filter devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_ids: {
                    description:
                      'Array of IDs of the connected accounts by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  created_before: {
                    description:
                      'Date threshold for devices to return. If specified, returns only devices created before the specified date.',
                    format: 'date-time',
                    type: 'string',
                  },
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Set of key:value [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) pairs by which you want to filter devices.',
                    type: 'object',
                  },
                  device_ids: {
                    description:
                      'Array of device IDs by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_type: {
                    description: 'Device type by which to filter devices.',
                    oneOf: [
                      {
                        enum: [
                          'akuvox_lock',
                          'august_lock',
                          'brivo_access_point',
                          'butterflymx_panel',
                          'avigilon_alta_entry',
                          'doorking_lock',
                          'genie_door',
                          'igloo_lock',
                          'linear_lock',
                          'lockly_lock',
                          'kwikset_lock',
                          'nuki_lock',
                          'salto_lock',
                          'schlage_lock',
                          'seam_relay',
                          'smartthings_lock',
                          'wyze_lock',
                          'yale_lock',
                          'two_n_intercom',
                          'controlbyweb_device',
                          'ttlock_lock',
                          'igloohome_lock',
                          'hubitat_lock',
                          'four_suites_door',
                          'dormakaba_oracode_door',
                          'tedee_lock',
                          'akiles_lock',
                        ],
                        type: 'string',
                      },
                      {
                        enum: ['noiseaware_activity_zone', 'minut_sensor'],
                        type: 'string',
                      },
                      {
                        enum: [
                          'ecobee_thermostat',
                          'nest_thermostat',
                          'honeywell_resideo_thermostat',
                          'tado_thermostat',
                        ],
                        type: 'string',
                      },
                      {
                        description: 'Type of phone.',
                        enum: ['ios_phone', 'android_phone'],
                        type: 'string',
                      },
                    ],
                  },
                  device_types: {
                    description:
                      'Array of device types by which to filter devices.',
                    items: {
                      oneOf: [
                        {
                          enum: [
                            'akuvox_lock',
                            'august_lock',
                            'brivo_access_point',
                            'butterflymx_panel',
                            'avigilon_alta_entry',
                            'doorking_lock',
                            'genie_door',
                            'igloo_lock',
                            'linear_lock',
                            'lockly_lock',
                            'kwikset_lock',
                            'nuki_lock',
                            'salto_lock',
                            'schlage_lock',
                            'seam_relay',
                            'smartthings_lock',
                            'wyze_lock',
                            'yale_lock',
                            'two_n_intercom',
                            'controlbyweb_device',
                            'ttlock_lock',
                            'igloohome_lock',
                            'hubitat_lock',
                            'four_suites_door',
                            'dormakaba_oracode_door',
                            'tedee_lock',
                            'akiles_lock',
                          ],
                          type: 'string',
                        },
                        {
                          enum: ['noiseaware_activity_zone', 'minut_sensor'],
                          type: 'string',
                        },
                        {
                          enum: [
                            'ecobee_thermostat',
                            'nest_thermostat',
                            'honeywell_resideo_thermostat',
                            'tado_thermostat',
                          ],
                          type: 'string',
                        },
                        {
                          description: 'Type of phone.',
                          enum: ['ios_phone', 'android_phone'],
                          type: 'string',
                        },
                      ],
                    },
                    type: 'array',
                  },
                  exclude_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  include_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  limit: {
                    default: 500,
                    description:
                      'Numerical limit on the number of devices to return.',
                    format: 'float',
                    type: 'number',
                  },
                  manufacturer: {
                    description: 'Manufacturer by which to filter devices.',
                    enum: [
                      'akuvox',
                      'august',
                      'avigilon_alta',
                      'brivo',
                      'butterflymx',
                      'doorking',
                      'four_suites',
                      'genie',
                      'igloo',
                      'keywe',
                      'kwikset',
                      'linear',
                      'lockly',
                      'nuki',
                      'philia',
                      'salto',
                      'samsung',
                      'schlage',
                      'seam',
                      'unknown',
                      'wyze',
                      'yale',
                      'minut',
                      'two_n',
                      'ttlock',
                      'nest',
                      'igloohome',
                      'ecobee',
                      'hubitat',
                      'controlbyweb',
                      'smartthings',
                      'dormakaba_oracode',
                      'tedee',
                      'honeywell_resideo',
                      'akiles',
                      'tado',
                    ],
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'Your own internal user ID for the user by which to filter devices.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    devices: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    locks: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['locks', 'devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/locks/list',
        tags: ['/locks'],
        'x-fern-sdk-group-name': ['locks'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
      },
    },
    '/locks/lock_door': {
      post: {
        operationId: 'locksLockDoorPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/locks/lock_door',
        tags: ['/locks'],
        'x-action-attempt-type': 'LOCK_DOOR',
        'x-fern-sdk-group-name': ['locks'],
        'x-fern-sdk-method-name': 'lock_door',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
      },
    },
    '/locks/unlock_door': {
      post: {
        operationId: 'locksUnlockDoorPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/locks/unlock_door',
        tags: ['/locks'],
        'x-action-attempt-type': 'UNLOCK_DOOR',
        'x-fern-sdk-group-name': ['locks'],
        'x-fern-sdk-method-name': 'unlock_door',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
      },
    },
    '/networks/get': {
      post: {
        operationId: 'networksGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { network_id: { format: 'uuid', type: 'string' } },
                required: ['network_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    network: { $ref: '#/components/schemas/network' },
                    ok: { type: 'boolean' },
                  },
                  required: ['network', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/networks/get',
        tags: ['/networks'],
        'x-fern-sdk-group-name': ['networks'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'network',
        'x-response-key': 'network',
      },
    },
    '/networks/list': {
      post: {
        operationId: 'networksListPost',
        requestBody: {
          content: {
            'application/json': { schema: { properties: {}, type: 'object' } },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    networks: {
                      items: { $ref: '#/components/schemas/network' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['networks', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/networks/list',
        tags: ['/networks'],
        'x-fern-sdk-group-name': ['networks'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'networks',
        'x-response-key': 'networks',
      },
    },
    '/noise_sensors/list': {
      post: {
        operationId: 'noiseSensorsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: {
                    description:
                      'ID of the Connect Webview by which to filter devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_ids: {
                    description:
                      'Array of IDs of the connected accounts by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  created_before: {
                    description:
                      'Date threshold for devices to return. If specified, returns only devices created before the specified date.',
                    format: 'date-time',
                    type: 'string',
                  },
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Set of key:value [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) pairs by which you want to filter devices.',
                    type: 'object',
                  },
                  device_ids: {
                    description:
                      'Array of device IDs by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_type: {
                    description: 'Device type by which to filter devices.',
                    oneOf: [
                      {
                        enum: [
                          'akuvox_lock',
                          'august_lock',
                          'brivo_access_point',
                          'butterflymx_panel',
                          'avigilon_alta_entry',
                          'doorking_lock',
                          'genie_door',
                          'igloo_lock',
                          'linear_lock',
                          'lockly_lock',
                          'kwikset_lock',
                          'nuki_lock',
                          'salto_lock',
                          'schlage_lock',
                          'seam_relay',
                          'smartthings_lock',
                          'wyze_lock',
                          'yale_lock',
                          'two_n_intercom',
                          'controlbyweb_device',
                          'ttlock_lock',
                          'igloohome_lock',
                          'hubitat_lock',
                          'four_suites_door',
                          'dormakaba_oracode_door',
                          'tedee_lock',
                          'akiles_lock',
                        ],
                        type: 'string',
                      },
                      {
                        enum: ['noiseaware_activity_zone', 'minut_sensor'],
                        type: 'string',
                      },
                      {
                        enum: [
                          'ecobee_thermostat',
                          'nest_thermostat',
                          'honeywell_resideo_thermostat',
                          'tado_thermostat',
                        ],
                        type: 'string',
                      },
                      {
                        description: 'Type of phone.',
                        enum: ['ios_phone', 'android_phone'],
                        type: 'string',
                      },
                    ],
                  },
                  device_types: {
                    description:
                      'Array of device types by which to filter devices.',
                    items: {
                      oneOf: [
                        {
                          enum: [
                            'akuvox_lock',
                            'august_lock',
                            'brivo_access_point',
                            'butterflymx_panel',
                            'avigilon_alta_entry',
                            'doorking_lock',
                            'genie_door',
                            'igloo_lock',
                            'linear_lock',
                            'lockly_lock',
                            'kwikset_lock',
                            'nuki_lock',
                            'salto_lock',
                            'schlage_lock',
                            'seam_relay',
                            'smartthings_lock',
                            'wyze_lock',
                            'yale_lock',
                            'two_n_intercom',
                            'controlbyweb_device',
                            'ttlock_lock',
                            'igloohome_lock',
                            'hubitat_lock',
                            'four_suites_door',
                            'dormakaba_oracode_door',
                            'tedee_lock',
                            'akiles_lock',
                          ],
                          type: 'string',
                        },
                        {
                          enum: ['noiseaware_activity_zone', 'minut_sensor'],
                          type: 'string',
                        },
                        {
                          enum: [
                            'ecobee_thermostat',
                            'nest_thermostat',
                            'honeywell_resideo_thermostat',
                            'tado_thermostat',
                          ],
                          type: 'string',
                        },
                        {
                          description: 'Type of phone.',
                          enum: ['ios_phone', 'android_phone'],
                          type: 'string',
                        },
                      ],
                    },
                    type: 'array',
                  },
                  exclude_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  include_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  limit: {
                    default: 500,
                    description:
                      'Numerical limit on the number of devices to return.',
                    format: 'float',
                    type: 'number',
                  },
                  manufacturer: {
                    description: 'Manufacturer by which to filter devices.',
                    enum: [
                      'akuvox',
                      'august',
                      'avigilon_alta',
                      'brivo',
                      'butterflymx',
                      'doorking',
                      'four_suites',
                      'genie',
                      'igloo',
                      'keywe',
                      'kwikset',
                      'linear',
                      'lockly',
                      'nuki',
                      'philia',
                      'salto',
                      'samsung',
                      'schlage',
                      'seam',
                      'unknown',
                      'wyze',
                      'yale',
                      'minut',
                      'two_n',
                      'ttlock',
                      'nest',
                      'igloohome',
                      'ecobee',
                      'hubitat',
                      'controlbyweb',
                      'smartthings',
                      'dormakaba_oracode',
                      'tedee',
                      'honeywell_resideo',
                      'akiles',
                      'tado',
                    ],
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'Your own internal user ID for the user by which to filter devices.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    devices: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    noise_sensors: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['noise_sensors', 'devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/noise_sensors/list',
        tags: ['/noise_sensors'],
        'x-fern-sdk-group-name': ['noise_sensors'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
      },
    },
    '/noise_sensors/noise_thresholds/create': {
      post: {
        operationId: 'noiseSensorsNoiseThresholdsCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  ends_daily_at: { type: 'string' },
                  name: { type: 'string' },
                  noise_threshold_decibels: { format: 'float', type: 'number' },
                  noise_threshold_nrs: { format: 'float', type: 'number' },
                  starts_daily_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['device_id', 'starts_daily_at', 'ends_daily_at'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    noise_threshold: {
                      $ref: '#/components/schemas/noise_threshold',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'noise_threshold', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/create',
        tags: ['/noise_sensors'],
        'x-action-attempt-type': 'CREATE_NOISE_THRESHOLD',
        'x-fern-sdk-group-name': ['noise_sensors', 'noise_thresholds'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'noise_threshold',
        'x-response-key': 'noise_threshold',
      },
    },
    '/noise_sensors/noise_thresholds/delete': {
      post: {
        operationId: 'noiseSensorsNoiseThresholdsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  noise_threshold_id: { format: 'uuid', type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['noise_threshold_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/delete',
        tags: ['/noise_sensors'],
        'x-action-attempt-type': 'DELETE_NOISE_THRESHOLD',
        'x-fern-sdk-group-name': ['noise_sensors', 'noise_thresholds'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/noise_sensors/noise_thresholds/get': {
      post: {
        operationId: 'noiseSensorsNoiseThresholdsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  noise_threshold_id: { format: 'uuid', type: 'string' },
                },
                required: ['noise_threshold_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    noise_threshold: {
                      $ref: '#/components/schemas/noise_threshold',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['noise_threshold', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/get',
        tags: ['/noise_sensors'],
        'x-fern-sdk-group-name': ['noise_sensors', 'noise_thresholds'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'noise_threshold',
        'x-response-key': 'noise_threshold',
      },
    },
    '/noise_sensors/noise_thresholds/list': {
      post: {
        operationId: 'noiseSensorsNoiseThresholdsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  is_programmed: { type: 'boolean' },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    noise_thresholds: {
                      items: { $ref: '#/components/schemas/noise_threshold' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['noise_thresholds', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/list',
        tags: ['/noise_sensors'],
        'x-fern-sdk-group-name': ['noise_sensors', 'noise_thresholds'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'noise_thresholds',
        'x-response-key': 'noise_thresholds',
      },
    },
    '/noise_sensors/noise_thresholds/update': {
      patch: {
        operationId: 'noiseSensorsNoiseThresholdsUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  ends_daily_at: { type: 'string' },
                  name: { type: 'string' },
                  noise_threshold_decibels: { format: 'float', type: 'number' },
                  noise_threshold_id: { format: 'uuid', type: 'string' },
                  noise_threshold_nrs: { format: 'float', type: 'number' },
                  starts_daily_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['noise_threshold_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/update',
        tags: ['/noise_sensors'],
        'x-action-attempt-type': 'UPDATE_NOISE_THRESHOLD',
        'x-fern-ignore': true,
        'x-response-key': null,
      },
      post: {
        operationId: 'noiseSensorsNoiseThresholdsUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  ends_daily_at: { type: 'string' },
                  name: { type: 'string' },
                  noise_threshold_decibels: { format: 'float', type: 'number' },
                  noise_threshold_id: { format: 'uuid', type: 'string' },
                  noise_threshold_nrs: { format: 'float', type: 'number' },
                  starts_daily_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['noise_threshold_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/update',
        tags: ['/noise_sensors'],
        'x-action-attempt-type': 'UPDATE_NOISE_THRESHOLD',
        'x-fern-sdk-group-name': ['noise_sensors', 'noise_thresholds'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
      put: {
        operationId: 'noiseSensorsNoiseThresholdsUpdatePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  ends_daily_at: { type: 'string' },
                  name: { type: 'string' },
                  noise_threshold_decibels: { format: 'float', type: 'number' },
                  noise_threshold_id: { format: 'uuid', type: 'string' },
                  noise_threshold_nrs: { format: 'float', type: 'number' },
                  starts_daily_at: { type: 'string' },
                  sync: { default: false, type: 'boolean' },
                },
                required: ['noise_threshold_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/noise_thresholds/update',
        tags: ['/noise_sensors'],
        'x-action-attempt-type': 'UPDATE_NOISE_THRESHOLD',
        'x-fern-ignore': true,
        'x-response-key': null,
      },
    },
    '/noise_sensors/simulate/trigger_noise_threshold': {
      post: {
        operationId: 'noiseSensorsSimulateTriggerNoiseThresholdPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { device_id: { format: 'uuid', type: 'string' } },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/noise_sensors/simulate/trigger_noise_threshold',
        tags: ['/noise_sensors'],
        'x-fern-sdk-group-name': ['noise_sensors', 'simulate'],
        'x-fern-sdk-method-name': 'trigger_noise_threshold',
        'x-response-key': null,
      },
    },
    '/phones/deactivate': {
      post: {
        description:
          'Deactivates a phone, which is useful, for example, if a user has lost their phone. For more information, see [App User Lost Phone Process](https://docs.seam.co/latest/capability-guides/mobile-access/managing-phones-for-a-user-identity#app-user-lost-phone-process).',
        operationId: 'phonesDeactivatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'Device ID of the desired phone.',
                    type: 'string',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/phones/deactivate',
        tags: ['/phones'],
        'x-fern-sdk-group-name': ['phones'],
        'x-fern-sdk-method-name': 'deactivate',
        'x-response-key': null,
        'x-title': 'Deactivate a Phone',
      },
    },
    '/phones/get': {
      post: {
        description:
          'Returns a single phone entry matching the provided `device_id`.',
        operationId: 'phonesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'Device ID of the desired phone.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    phone: { $ref: '#/components/schemas/phone' },
                  },
                  required: ['phone', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/phones/get',
        tags: ['/phones'],
        'x-fern-sdk-group-name': ['phones'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'phone',
        'x-response-key': 'phone',
        'x-title': 'Get Phone',
      },
    },
    '/phones/list': {
      post: {
        description:
          'Returns a list of all phones. To filter the list of returned phones by a specific owner user identity or credential, include the `owner_user_identity_id` or `acs_credential_id`, respectively, in the request body.',
        operationId: 'phonesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_id: {
                    description:
                      'ID of the [credential](https://docs.seam.co/latest/capability-guides/access-systems/managing-credentials) by which to filter the list of returned phones.',
                    format: 'uuid',
                    type: 'string',
                  },
                  owner_user_identity_id: {
                    description:
                      'ID of the user identity that represents the owner by which to filter the list of returned phones.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    phones: {
                      items: { $ref: '#/components/schemas/phone' },
                      type: 'array',
                    },
                  },
                  required: ['phones', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/phones/list',
        tags: ['/phones'],
        'x-fern-sdk-group-name': ['phones'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'phones',
        'x-response-key': 'phones',
        'x-title': 'List Phones',
      },
    },
    '/phones/simulate/create_sandbox_phone': {
      post: {
        description:
          'Creates a new simulated phone in a [sandbox workspace](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces). For more information, see [Creating a Simulated Phone for a User Identity](https://docs.seam.co/latest/capability-guides/mobile-access/developing-in-a-sandbox-workspace#creating-a-simulated-phone-for-a-user-identity).',
        operationId: 'phonesSimulateCreateSandboxPhonePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  assa_abloy_metadata: {
                    default: {},
                    description:
                      'ASSA ABLOY metadata to associate with the simulated phone.',
                    properties: {
                      application_version: {
                        default: '1.0.0',
                        description:
                          'Application version that you want to use for the simulated phone.',
                        type: 'string',
                      },
                      ble_capability: {
                        default: true,
                        description:
                          'Indicates whether the simulated phone should have Bluetooth low energy (BLE) capability.',
                        type: 'boolean',
                      },
                      hce_capability: {
                        default: false,
                        description:
                          'Indicates whether the simulated phone should have host card emulation (HCE) capability.',
                        type: 'boolean',
                      },
                      nfc_capability: {
                        default: false,
                        description:
                          'Indicates whether the simulated phone should have near-field communication (NFC) capability.',
                        type: 'boolean',
                      },
                      seos_applet_version: {
                        default: '1.0.0',
                        description:
                          'SEOS applet version that you want to use for the simulated phone.',
                        type: 'string',
                      },
                      seos_tsm_endpoint_id: {
                        default: 1,
                        description:
                          'ID of the SEOS trusted service manager (TSM) endpoint that you want to use for the simulated phone.',
                        format: 'float',
                        type: 'number',
                      },
                    },
                    type: 'object',
                  },
                  custom_sdk_installation_id: {
                    description:
                      'ID of the custom SDK installation to use for the simulated phone.',
                    type: 'string',
                  },
                  phone_metadata: {
                    default: {},
                    description:
                      'Metadata to associate with the simulated phone.',
                    properties: {
                      device_manufacturer: {
                        default: 'Samsung',
                        description:
                          'Manufacturer that you want to use for the simulated phone.',
                        type: 'string',
                      },
                      device_model: {
                        default: 'Samsung Galaxy S10',
                        description:
                          'Device model that you want to use for the simulated phone.',
                        type: 'string',
                      },
                      operating_system: {
                        default: 'android',
                        description:
                          'Mobile operating system that you want to use for the simulated phone.',
                        enum: ['android', 'ios'],
                        type: 'string',
                      },
                      os_version: {
                        default: '10',
                        description:
                          'Mobile operating system version that you want to use for the simulated phone.',
                        type: 'string',
                      },
                    },
                    type: 'object',
                  },
                  user_identity_id: {
                    description:
                      'ID of the user identity to associate with the simulated phone.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    phone: { $ref: '#/components/schemas/phone' },
                  },
                  required: ['phone', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/phones/simulate/create_sandbox_phone',
        tags: ['/phones'],
        'x-fern-sdk-group-name': ['phones', 'simulate'],
        'x-fern-sdk-method-name': 'create_sandbox_phone',
        'x-fern-sdk-return-value': 'phone',
        'x-response-key': 'phone',
        'x-title': 'Create a Sandbox Phone',
      },
    },
    '/seam/bridge/v1/bridge_client_sessions/create': {
      post: {
        description: 'Creates a new bridge client session.',
        operationId: 'seamBridgeV1BridgeClientSessionsCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  bridge_client_machine_identifier_key: { type: 'string' },
                  bridge_client_name: { type: 'string' },
                  bridge_client_time_zone: { type: 'string' },
                },
                required: [
                  'bridge_client_name',
                  'bridge_client_time_zone',
                  'bridge_client_machine_identifier_key',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridge_client_session: {
                      properties: {
                        bridge_client_machine_identifier_key: {
                          type: 'string',
                        },
                        bridge_client_name: { type: 'string' },
                        bridge_client_session_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        bridge_client_session_token: { type: 'string' },
                        bridge_client_time_zone: { type: 'string' },
                        created_at: { format: 'date-time', type: 'string' },
                        pairing_code: {
                          maxLength: 6,
                          minLength: 6,
                          type: 'string',
                        },
                        pairing_code_expires_at: {
                          format: 'date-time',
                          type: 'string',
                        },
                        tailscale_auth_key: { nullable: true, type: 'string' },
                        tailscale_hostname: { type: 'string' },
                      },
                      required: [
                        'created_at',
                        'bridge_client_session_id',
                        'bridge_client_session_token',
                        'pairing_code',
                        'pairing_code_expires_at',
                        'tailscale_hostname',
                        'tailscale_auth_key',
                        'bridge_client_name',
                        'bridge_client_time_zone',
                        'bridge_client_machine_identifier_key',
                      ],
                      type: 'object',
                      'x-route-path': '/seam/bridge/v1/bridge_client_sessions',
                      'x-undocumented': 'Seam Bridge Client only.',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridge_client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [{ certified_client: [] }],
        summary: '/seam/bridge/v1/bridge_client_sessions/create',
        tags: [],
        'x-fern-sdk-group-name': [
          'seam',
          'bridge',
          'v1',
          'bridge_client_sessions',
        ],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'bridge_client_session',
        'x-response-key': 'bridge_client_session',
        'x-title': 'Create a Bridge Client Session',
        'x-undocumented': 'Seam Bridge Client only.',
      },
    },
    '/seam/bridge/v1/bridge_client_sessions/get': {
      get: {
        description:
          'Returns the bridge client session associated with the session token used.',
        operationId: 'seamBridgeV1BridgeClientSessionsGetGet',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridge_client_session: {
                      properties: {
                        bridge_client_machine_identifier_key: {
                          type: 'string',
                        },
                        bridge_client_name: { type: 'string' },
                        bridge_client_session_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        bridge_client_session_token: { type: 'string' },
                        bridge_client_time_zone: { type: 'string' },
                        created_at: { format: 'date-time', type: 'string' },
                        pairing_code: {
                          maxLength: 6,
                          minLength: 6,
                          type: 'string',
                        },
                        pairing_code_expires_at: {
                          format: 'date-time',
                          type: 'string',
                        },
                        tailscale_auth_key: { nullable: true, type: 'string' },
                        tailscale_hostname: { type: 'string' },
                      },
                      required: [
                        'created_at',
                        'bridge_client_session_id',
                        'bridge_client_session_token',
                        'pairing_code',
                        'pairing_code_expires_at',
                        'tailscale_hostname',
                        'tailscale_auth_key',
                        'bridge_client_name',
                        'bridge_client_time_zone',
                        'bridge_client_machine_identifier_key',
                      ],
                      type: 'object',
                      'x-route-path': '/seam/bridge/v1/bridge_client_sessions',
                      'x-undocumented': 'Seam Bridge Client only.',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridge_client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [{ bridge_client_session: [] }],
        summary: '/seam/bridge/v1/bridge_client_sessions/get',
        tags: [],
        'x-fern-ignore': true,
        'x-response-key': 'bridge_client_session',
        'x-title': 'Get a Bridge Client Session',
        'x-undocumented': 'Seam Bridge Client only.',
      },
      post: {
        description:
          'Returns the bridge client session associated with the session token used.',
        operationId: 'seamBridgeV1BridgeClientSessionsGetPost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridge_client_session: {
                      properties: {
                        bridge_client_machine_identifier_key: {
                          type: 'string',
                        },
                        bridge_client_name: { type: 'string' },
                        bridge_client_session_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        bridge_client_session_token: { type: 'string' },
                        bridge_client_time_zone: { type: 'string' },
                        created_at: { format: 'date-time', type: 'string' },
                        pairing_code: {
                          maxLength: 6,
                          minLength: 6,
                          type: 'string',
                        },
                        pairing_code_expires_at: {
                          format: 'date-time',
                          type: 'string',
                        },
                        tailscale_auth_key: { nullable: true, type: 'string' },
                        tailscale_hostname: { type: 'string' },
                      },
                      required: [
                        'created_at',
                        'bridge_client_session_id',
                        'bridge_client_session_token',
                        'pairing_code',
                        'pairing_code_expires_at',
                        'tailscale_hostname',
                        'tailscale_auth_key',
                        'bridge_client_name',
                        'bridge_client_time_zone',
                        'bridge_client_machine_identifier_key',
                      ],
                      type: 'object',
                      'x-route-path': '/seam/bridge/v1/bridge_client_sessions',
                      'x-undocumented': 'Seam Bridge Client only.',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridge_client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [{ bridge_client_session: [] }],
        summary: '/seam/bridge/v1/bridge_client_sessions/get',
        tags: [],
        'x-fern-sdk-group-name': [
          'seam',
          'bridge',
          'v1',
          'bridge_client_sessions',
        ],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'bridge_client_session',
        'x-response-key': 'bridge_client_session',
        'x-title': 'Get a Bridge Client Session',
        'x-undocumented': 'Seam Bridge Client only.',
      },
    },
    '/seam/bridge/v1/bridge_client_sessions/regenerate_pairing_code': {
      post: {
        description:
          'Generate a new pairing code and return the updated bridge client session.',
        operationId:
          'seamBridgeV1BridgeClientSessionsRegeneratePairingCodePost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    bridge_client_session: {
                      properties: {
                        bridge_client_machine_identifier_key: {
                          type: 'string',
                        },
                        bridge_client_name: { type: 'string' },
                        bridge_client_session_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        bridge_client_session_token: { type: 'string' },
                        bridge_client_time_zone: { type: 'string' },
                        created_at: { format: 'date-time', type: 'string' },
                        pairing_code: {
                          maxLength: 6,
                          minLength: 6,
                          type: 'string',
                        },
                        pairing_code_expires_at: {
                          format: 'date-time',
                          type: 'string',
                        },
                        tailscale_auth_key: { nullable: true, type: 'string' },
                        tailscale_hostname: { type: 'string' },
                      },
                      required: [
                        'created_at',
                        'bridge_client_session_id',
                        'bridge_client_session_token',
                        'pairing_code',
                        'pairing_code_expires_at',
                        'tailscale_hostname',
                        'tailscale_auth_key',
                        'bridge_client_name',
                        'bridge_client_time_zone',
                        'bridge_client_machine_identifier_key',
                      ],
                      type: 'object',
                      'x-route-path': '/seam/bridge/v1/bridge_client_sessions',
                      'x-undocumented': 'Seam Bridge Client only.',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['bridge_client_session', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [{ bridge_client_session: [] }],
        summary:
          '/seam/bridge/v1/bridge_client_sessions/regenerate_pairing_code',
        tags: [],
        'x-fern-sdk-group-name': [
          'seam',
          'bridge',
          'v1',
          'bridge_client_sessions',
        ],
        'x-fern-sdk-method-name': 'regenerate_pairing_code',
        'x-fern-sdk-return-value': 'bridge_client_session',
        'x-response-key': 'bridge_client_session',
        'x-title': 'Regenerate a Bridge Client Session Pairing Code',
        'x-undocumented': 'Seam Bridge Client only.',
      },
    },
    '/thermostats/activate_climate_preset': {
      post: {
        description:
          'Activates a specified [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsActivateClimatePresetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Climate preset key of the desired climate preset.',
                    type: 'string',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['device_id', 'climate_preset_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/activate_climate_preset',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'ACTIVATE_CLIMATE_PRESET',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'activate_climate_preset',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Activate a Climate Preset',
      },
    },
    '/thermostats/cool': {
      post: {
        description:
          'Sets a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) to [cool mode](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings).',
        operationId: 'thermostatsCoolPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  cooling_set_point_celsius: {
                    description:
                      'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `cooling_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  cooling_set_point_fahrenheit: {
                    description:
                      'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `cooling_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  sync: {
                    default: false,
                    type: 'boolean',
                    'x-undocumented': 'Only used internally.',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/cool',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_HVAC_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'cool',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set to Cool Mode',
      },
    },
    '/thermostats/create_climate_preset': {
      post: {
        description:
          'Creates a [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsCreateClimatePresetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description: 'Unique key to identify the climate preset.',
                    type: 'string',
                  },
                  cooling_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                    format: 'float',
                    type: 'number',
                  },
                  cooling_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should cool (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  fan_mode_setting: {
                    description:
                      'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                    enum: ['auto', 'on', 'circulate'],
                    type: 'string',
                  },
                  heating_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should heat (in °C).',
                    format: 'float',
                    type: 'number',
                  },
                  heating_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should heat (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  hvac_mode_setting: {
                    description:
                      'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                    enum: ['off', 'heat', 'cool', 'heat_cool'],
                    type: 'string',
                  },
                  manual_override_allowed: {
                    default: true,
                    deprecated: true,
                    description:
                      "Indicates whether a person at the thermostat or using the API can change the thermostat's settings.",
                    type: 'boolean',
                    'x-deprecated':
                      "Use 'thermostat_schedule.is_override_allowed'",
                  },
                  name: {
                    default: null,
                    description:
                      'User-friendly name to identify the climate preset.',
                    nullable: true,
                    type: 'string',
                  },
                },
                required: ['device_id', 'climate_preset_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/create_climate_preset',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'create_climate_preset',
        'x-response-key': null,
        'x-title': 'Create a Climate Preset',
      },
    },
    '/thermostats/delete_climate_preset': {
      post: {
        description:
          'Deletes a specified [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsDeleteClimatePresetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Climate preset key of the desired climate preset.',
                    type: 'string',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['device_id', 'climate_preset_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/delete_climate_preset',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'delete_climate_preset',
        'x-response-key': null,
        'x-title': 'Delete a Climate Preset',
      },
    },
    '/thermostats/get': {
      post: {
        description:
          'Returns a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  name: {
                    description:
                      'User-friendly name of the desired thermostat device.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    thermostat: { $ref: '#/components/schemas/device' },
                  },
                  required: ['thermostat', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/get',
        tags: ['/thermostats'],
        'x-deprecated': 'Use `/devices/get` instead.',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'thermostat',
        'x-response-key': 'thermostat',
        'x-title': 'Get a Thermostat',
        'x-undocumented': 'Will be removed.',
      },
    },
    '/thermostats/heat': {
      post: {
        description:
          'Sets a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) to [heat mode](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings).',
        operationId: 'thermostatsHeatPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  heating_set_point_celsius: {
                    description:
                      'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `heating_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  heating_set_point_fahrenheit: {
                    description:
                      'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `heating_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  sync: {
                    default: false,
                    type: 'boolean',
                    'x-undocumented': 'Only used internally.',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/heat',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_HVAC_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'heat',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set to Heat Mode',
      },
    },
    '/thermostats/heat_cool': {
      post: {
        description:
          'Sets a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) to [heat-cool ("auto") mode](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings).',
        operationId: 'thermostatsHeatCoolPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  cooling_set_point_celsius: {
                    description:
                      'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `cooling_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  cooling_set_point_fahrenheit: {
                    description:
                      'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `cooling_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  heating_set_point_celsius: {
                    description:
                      'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `heating_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  heating_set_point_fahrenheit: {
                    description:
                      'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `heating_set_point` parameters.',
                    format: 'float',
                    type: 'number',
                  },
                  sync: {
                    default: false,
                    type: 'boolean',
                    'x-undocumented': 'Only used internally.',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/heat_cool',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_HVAC_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'heat_cool',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set to Heat-Cool (Auto) Mode',
      },
    },
    '/thermostats/list': {
      post: {
        description:
          'Returns a list of all [thermostats](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  connect_webview_id: {
                    description:
                      'ID of the Connect Webview by which to filter devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_id: {
                    description:
                      'ID of the connected account by which to filter.',
                    format: 'uuid',
                    type: 'string',
                  },
                  connected_account_ids: {
                    description:
                      'Array of IDs of the connected accounts by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  created_before: {
                    description:
                      'Date threshold for devices to return. If specified, returns only devices created before the specified date.',
                    format: 'date-time',
                    type: 'string',
                  },
                  custom_metadata_has: {
                    additionalProperties: {
                      oneOf: [{ type: 'string' }, { type: 'boolean' }],
                    },
                    description:
                      'Set of key:value [custom metadata](https://docs.seam.co/latest/core-concepts/devices/adding-custom-metadata-to-a-device) pairs by which you want to filter devices.',
                    type: 'object',
                  },
                  device_ids: {
                    description:
                      'Array of device IDs by which to filter devices.',
                    items: { format: 'uuid', type: 'string' },
                    type: 'array',
                  },
                  device_type: {
                    description: 'Device type by which to filter devices.',
                    oneOf: [
                      {
                        enum: [
                          'akuvox_lock',
                          'august_lock',
                          'brivo_access_point',
                          'butterflymx_panel',
                          'avigilon_alta_entry',
                          'doorking_lock',
                          'genie_door',
                          'igloo_lock',
                          'linear_lock',
                          'lockly_lock',
                          'kwikset_lock',
                          'nuki_lock',
                          'salto_lock',
                          'schlage_lock',
                          'seam_relay',
                          'smartthings_lock',
                          'wyze_lock',
                          'yale_lock',
                          'two_n_intercom',
                          'controlbyweb_device',
                          'ttlock_lock',
                          'igloohome_lock',
                          'hubitat_lock',
                          'four_suites_door',
                          'dormakaba_oracode_door',
                          'tedee_lock',
                          'akiles_lock',
                        ],
                        type: 'string',
                      },
                      {
                        enum: ['noiseaware_activity_zone', 'minut_sensor'],
                        type: 'string',
                      },
                      {
                        enum: [
                          'ecobee_thermostat',
                          'nest_thermostat',
                          'honeywell_resideo_thermostat',
                          'tado_thermostat',
                        ],
                        type: 'string',
                      },
                      {
                        description: 'Type of phone.',
                        enum: ['ios_phone', 'android_phone'],
                        type: 'string',
                      },
                    ],
                  },
                  device_types: {
                    description:
                      'Array of device types by which to filter devices.',
                    items: {
                      oneOf: [
                        {
                          enum: [
                            'akuvox_lock',
                            'august_lock',
                            'brivo_access_point',
                            'butterflymx_panel',
                            'avigilon_alta_entry',
                            'doorking_lock',
                            'genie_door',
                            'igloo_lock',
                            'linear_lock',
                            'lockly_lock',
                            'kwikset_lock',
                            'nuki_lock',
                            'salto_lock',
                            'schlage_lock',
                            'seam_relay',
                            'smartthings_lock',
                            'wyze_lock',
                            'yale_lock',
                            'two_n_intercom',
                            'controlbyweb_device',
                            'ttlock_lock',
                            'igloohome_lock',
                            'hubitat_lock',
                            'four_suites_door',
                            'dormakaba_oracode_door',
                            'tedee_lock',
                            'akiles_lock',
                          ],
                          type: 'string',
                        },
                        {
                          enum: ['noiseaware_activity_zone', 'minut_sensor'],
                          type: 'string',
                        },
                        {
                          enum: [
                            'ecobee_thermostat',
                            'nest_thermostat',
                            'honeywell_resideo_thermostat',
                            'tado_thermostat',
                          ],
                          type: 'string',
                        },
                        {
                          description: 'Type of phone.',
                          enum: ['ios_phone', 'android_phone'],
                          type: 'string',
                        },
                      ],
                    },
                    type: 'array',
                  },
                  exclude_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  include_if: {
                    items: {
                      enum: [
                        'can_remotely_unlock',
                        'can_remotely_lock',
                        'can_program_offline_access_codes',
                        'can_program_online_access_codes',
                        'can_hvac_heat',
                        'can_hvac_cool',
                        'can_hvac_heat_cool',
                        'can_turn_off_hvac',
                        'can_simulate_removal',
                        'can_simulate_connection',
                        'can_simulate_disconnection',
                      ],
                      type: 'string',
                    },
                    type: 'array',
                    'x-undocumented': 'Only used internally.',
                  },
                  limit: {
                    default: 500,
                    description:
                      'Numerical limit on the number of devices to return.',
                    format: 'float',
                    type: 'number',
                  },
                  manufacturer: {
                    description: 'Manufacturer by which to filter devices.',
                    enum: [
                      'akuvox',
                      'august',
                      'avigilon_alta',
                      'brivo',
                      'butterflymx',
                      'doorking',
                      'four_suites',
                      'genie',
                      'igloo',
                      'keywe',
                      'kwikset',
                      'linear',
                      'lockly',
                      'nuki',
                      'philia',
                      'salto',
                      'samsung',
                      'schlage',
                      'seam',
                      'unknown',
                      'wyze',
                      'yale',
                      'minut',
                      'two_n',
                      'ttlock',
                      'nest',
                      'igloohome',
                      'ecobee',
                      'hubitat',
                      'controlbyweb',
                      'smartthings',
                      'dormakaba_oracode',
                      'tedee',
                      'honeywell_resideo',
                      'akiles',
                      'tado',
                    ],
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'Your own internal user ID for the user by which to filter devices.',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    devices: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                    thermostats: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                  },
                  required: ['thermostats', 'devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
        ],
        summary: '/thermostats/list',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
        'x-title': 'List Thermostats',
      },
    },
    '/thermostats/off': {
      post: {
        description:
          'Sets a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) to ["off" mode](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings).',
        operationId: 'thermostatsOffPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  sync: {
                    default: false,
                    type: 'boolean',
                    'x-undocumented': 'Only used internally.',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/off',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_HVAC_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'off',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set to Off Mode',
      },
    },
    '/thermostats/schedules/create': {
      post: {
        description:
          'Creates a [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSchedulesCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to use for the thermostat schedule.',
                    type: 'string',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Date and time at which the thermostat schedule ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                  is_override_allowed: {
                    default: false,
                    description:
                      "Indicates whether a person at the thermostat or using the API can change the thermostat's settings while the schedule is active. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    type: 'boolean',
                  },
                  max_override_period_minutes: {
                    default: 0,
                    description:
                      "Number of minutes for which a person at the thermostat or using the API can change the thermostat's settings after the activation of the scheduled climate preset. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    minimum: 0,
                    type: 'integer',
                  },
                  name: {
                    description:
                      'User-friendly name to identify the thermostat schedule.',
                    type: 'string',
                  },
                  starts_at: {
                    description:
                      'Date and time at which the thermostat schedule starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                },
                required: [
                  'device_id',
                  'climate_preset_key',
                  'starts_at',
                  'ends_at',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    thermostat_schedule: {
                      $ref: '#/components/schemas/thermostat_schedule',
                    },
                  },
                  required: ['thermostat_schedule', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/schedules/create',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'schedules'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'thermostat_schedule',
        'x-response-key': 'thermostat_schedule',
        'x-title': 'Create a Thermostat Schedule',
      },
    },
    '/thermostats/schedules/delete': {
      post: {
        description:
          'Deletes a [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSchedulesDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  thermostat_schedule_id: {
                    description: 'ID of the desired thermostat schedule.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['thermostat_schedule_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/schedules/delete',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'schedules'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-title': 'Delete a Thermostat Schedule',
      },
    },
    '/thermostats/schedules/get': {
      post: {
        description:
          'Returns a specified [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules).',
        operationId: 'thermostatsSchedulesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  thermostat_schedule_id: {
                    description: 'ID of the desired thermostat schedule.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['thermostat_schedule_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    thermostat_schedule: {
                      $ref: '#/components/schemas/thermostat_schedule',
                    },
                  },
                  required: ['thermostat_schedule', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/schedules/get',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'schedules'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'thermostat_schedule',
        'x-response-key': 'thermostat_schedule',
        'x-title': 'Get a Thermostat Schedule',
      },
    },
    '/thermostats/schedules/list': {
      post: {
        description:
          'Returns a list of all [thermostat schedules](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSchedulesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identifier_key: {
                    description:
                      'User identifier key by which to filter the list of returned thermostat schedules.',
                    type: 'string',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    thermostat_schedules: {
                      items: {
                        $ref: '#/components/schemas/thermostat_schedule',
                      },
                      type: 'array',
                    },
                  },
                  required: ['thermostat_schedules', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/thermostats/schedules/list',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'schedules'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'thermostat_schedules',
        'x-response-key': 'thermostat_schedules',
        'x-title': 'List Thermostat Schedules',
      },
    },
    '/thermostats/schedules/update': {
      patch: {
        description:
          'Updates a specified [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules).',
        operationId: 'thermostatsSchedulesUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to use for the thermostat schedule.',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Date and time at which the thermostat schedule ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                  is_override_allowed: {
                    description:
                      "Indicates whether a person at the thermostat or using the API can change the thermostat's settings while the schedule is active. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    type: 'boolean',
                  },
                  max_override_period_minutes: {
                    description:
                      "Number of minutes for which a person at the thermostat or using the API can change the thermostat's settings after the activation of the scheduled climate preset. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    minimum: 0,
                    type: 'integer',
                  },
                  name: {
                    description:
                      'User-friendly name to identify the thermostat schedule.',
                    type: 'string',
                  },
                  starts_at: {
                    description:
                      'Date and time at which the thermostat schedule starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                  thermostat_schedule_id: {
                    description: 'ID of the desired thermostat schedule.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['thermostat_schedule_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/schedules/update',
        tags: ['/thermostats'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Update a Thermostat Schedule',
      },
      post: {
        description:
          'Updates a specified [thermostat schedule](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules).',
        operationId: 'thermostatsSchedulesUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Key of the [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) to use for the thermostat schedule.',
                    type: 'string',
                  },
                  ends_at: {
                    description:
                      'Date and time at which the thermostat schedule ends, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                  is_override_allowed: {
                    description:
                      "Indicates whether a person at the thermostat or using the API can change the thermostat's settings while the schedule is active. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    type: 'boolean',
                  },
                  max_override_period_minutes: {
                    description:
                      "Number of minutes for which a person at the thermostat or using the API can change the thermostat's settings after the activation of the scheduled climate preset. See also [Specifying Manual Override Permissions](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-thermostat-schedules#specifying-manual-override-permissions).",
                    minimum: 0,
                    type: 'integer',
                  },
                  name: {
                    description:
                      'User-friendly name to identify the thermostat schedule.',
                    type: 'string',
                  },
                  starts_at: {
                    description:
                      'Date and time at which the thermostat schedule starts, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.',
                    type: 'string',
                  },
                  thermostat_schedule_id: {
                    description: 'ID of the desired thermostat schedule.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['thermostat_schedule_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/schedules/update',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'schedules'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
        'x-title': 'Update a Thermostat Schedule',
      },
    },
    '/thermostats/set_fallback_climate_preset': {
      post: {
        description:
          'Sets a specified [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) as the ["fallback"](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets/setting-the-fallback-climate-preset) preset for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSetFallbackClimatePresetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description:
                      'Climate preset key of the desired climate preset.',
                    type: 'string',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['device_id', 'climate_preset_key'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/set_fallback_climate_preset',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'set_fallback_climate_preset',
        'x-response-key': null,
        'x-title': 'Set the Fallback Climate Preset',
      },
    },
    '/thermostats/set_fan_mode': {
      post: {
        description:
          'Sets the [fan mode setting](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings#fan-mode-settings) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSetFanModePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: { format: 'uuid', type: 'string' },
                  fan_mode: {
                    deprecated: true,
                    enum: ['auto', 'on', 'circulate'],
                    type: 'string',
                    'x-deprecated': 'Use `fan_mode_setting` instead.',
                  },
                  fan_mode_setting: {
                    description:
                      'Desired [fan mode setting](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings#fan-mode-settings) for the thermostat.',
                    enum: ['auto', 'on', 'circulate'],
                    type: 'string',
                  },
                  sync: {
                    default: false,
                    type: 'boolean',
                    'x-undocumented': 'Only used internally.',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/set_fan_mode',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_FAN_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'set_fan_mode',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set the Fan Mode Setting',
      },
    },
    '/thermostats/set_hvac_mode': {
      post: {
        description:
          'Sets the [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/configure-current-climate-settings) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsSetHvacModePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                discriminator: { propertyName: 'hvac_mode_setting' },
                oneOf: [
                  {
                    properties: {
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      hvac_mode_setting: { enum: ['off'], type: 'string' },
                    },
                    required: ['hvac_mode_setting', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      cooling_set_point_celsius: {
                        description:
                          'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `cooling_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      cooling_set_point_fahrenheit: {
                        description:
                          'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `cooling_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      hvac_mode_setting: { enum: ['cool'], type: 'string' },
                    },
                    required: ['hvac_mode_setting', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      heating_set_point_celsius: {
                        description:
                          'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `heating_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      heating_set_point_fahrenheit: {
                        description:
                          'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `heating_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      hvac_mode_setting: { enum: ['heat'], type: 'string' },
                    },
                    required: ['hvac_mode_setting', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      cooling_set_point_celsius: {
                        description:
                          'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `cooling_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      cooling_set_point_fahrenheit: {
                        description:
                          'Desired [cooling set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `cooling_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      heating_set_point_celsius: {
                        description:
                          'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set one of the `heating_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      heating_set_point_fahrenheit: {
                        description:
                          'Desired [heating set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set one of the `heating_set_point` parameters.',
                        format: 'float',
                        type: 'number',
                      },
                      hvac_mode_setting: {
                        enum: ['heat_cool'],
                        type: 'string',
                      },
                    },
                    required: ['hvac_mode_setting', 'device_id'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/set_hvac_mode',
        tags: ['/thermostats'],
        'x-action-attempt-type': 'SET_HVAC_MODE',
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'set_hvac_mode',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
        'x-title': 'Set the HVAC Mode',
      },
    },
    '/thermostats/set_temperature_threshold': {
      patch: {
        description:
          'Sets a [temperature threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds) for a specified thermostat. Seam emits a `thermostat.temperature_threshold_exceeded` event and adds a warning on a thermostat if it reports a temperature outside the threshold range.',
        operationId: 'thermostatsSetTemperatureThresholdPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  lower_limit_celsius: {
                    default: null,
                    description:
                      'Lower temperature limit in in °C. Seam alerts you if the reported temperature is lower than this value. You can specify either `lower_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  lower_limit_fahrenheit: {
                    default: null,
                    description:
                      'Lower temperature limit in in °F. Seam alerts you if the reported temperature is lower than this value. You can specify either `lower_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  upper_limit_celsius: {
                    default: null,
                    description:
                      'Upper temperature limit in in °C. Seam alerts you if the reported temperature is higher than this value. You can specify either `upper_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  upper_limit_fahrenheit: {
                    default: null,
                    description:
                      'Upper temperature limit in in °C. Seam alerts you if the reported temperature is higher than this value. You can specify either `upper_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/thermostats/set_temperature_threshold',
        tags: ['/thermostats'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Set a Temperature Threshold',
      },
      post: {
        description:
          'Sets a [temperature threshold](https://docs.seam.co/latest/capability-guides/thermostats/setting-and-monitoring-temperature-thresholds) for a specified thermostat. Seam emits a `thermostat.temperature_threshold_exceeded` event and adds a warning on a thermostat if it reports a temperature outside the threshold range.',
        operationId: 'thermostatsSetTemperatureThresholdPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  lower_limit_celsius: {
                    default: null,
                    description:
                      'Lower temperature limit in in °C. Seam alerts you if the reported temperature is lower than this value. You can specify either `lower_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  lower_limit_fahrenheit: {
                    default: null,
                    description:
                      'Lower temperature limit in in °F. Seam alerts you if the reported temperature is lower than this value. You can specify either `lower_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  upper_limit_celsius: {
                    default: null,
                    description:
                      'Upper temperature limit in in °C. Seam alerts you if the reported temperature is higher than this value. You can specify either `upper_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                  upper_limit_fahrenheit: {
                    default: null,
                    description:
                      'Upper temperature limit in in °C. Seam alerts you if the reported temperature is higher than this value. You can specify either `upper_limit` but not both.',
                    format: 'float',
                    nullable: true,
                    type: 'number',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/thermostats/set_temperature_threshold',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'set_temperature_threshold',
        'x-response-key': null,
        'x-title': 'Set a Temperature Threshold',
      },
    },
    '/thermostats/simulate/hvac_mode_adjusted': {
      post: {
        description:
          'Simulates having adjusted the [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) for a [thermostat](https://docs.seam.co/latest/capability-guides/thermostats). Only applicable for [sandbox devices](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces). See also [Testing Your Thermostat App with Simulate Endpoints](https://docs.seam.co/latest/capability-guides/thermostats/testing-your-thermostat-app-with-simulate-endpoints).',
        operationId: 'thermostatsSimulateHvacModeAdjustedPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                discriminator: { propertyName: 'hvac_mode' },
                oneOf: [
                  {
                    properties: {
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      hvac_mode: {
                        description:
                          'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) to simulate.',
                        enum: ['off'],
                        type: 'string',
                      },
                    },
                    required: ['hvac_mode', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      cooling_set_point_celsius: {
                        description:
                          'Desired simulated cooling [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set `cooling_set_point_celsius` or `cooling_set_point_fahrenheit`.',
                        format: 'float',
                        type: 'number',
                      },
                      cooling_set_point_fahrenheit: {
                        description:
                          'Desired simulated cooling [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set `cooling_set_point_fahrenheit` or `cooling_set_point_celsius`.',
                        format: 'float',
                        type: 'number',
                      },
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      hvac_mode: {
                        description:
                          'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) to simulate.',
                        enum: ['cool'],
                        type: 'string',
                      },
                    },
                    required: ['hvac_mode', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      heating_set_point_celsius: {
                        description:
                          'Desired simulated heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set `heating_set_point_celsius` or `heating_set_point_fahrenheit`.',
                        format: 'float',
                        type: 'number',
                      },
                      heating_set_point_fahrenheit: {
                        description:
                          'Desired simulated heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set `heating_set_point_fahrenheit` or `heating_set_point_celsius`.',
                        format: 'float',
                        type: 'number',
                      },
                      hvac_mode: {
                        description:
                          'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) to simulate.',
                        enum: ['heat'],
                        type: 'string',
                      },
                    },
                    required: ['hvac_mode', 'device_id'],
                    type: 'object',
                  },
                  {
                    properties: {
                      cooling_set_point_celsius: {
                        description:
                          'Desired simulated cooling [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set `cooling_set_point_celsius` or `cooling_set_point_fahrenheit`.',
                        format: 'float',
                        type: 'number',
                      },
                      cooling_set_point_fahrenheit: {
                        description:
                          'Desired simulated cooling [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set `cooling_set_point_fahrenheit` or `cooling_set_point_celsius`.',
                        format: 'float',
                        type: 'number',
                      },
                      device_id: {
                        description: 'ID of the desired thermostat device.',
                        format: 'uuid',
                        type: 'string',
                      },
                      heating_set_point_celsius: {
                        description:
                          'Desired simulated heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °C. You must set `heating_set_point_celsius` or `heating_set_point_fahrenheit`.',
                        format: 'float',
                        type: 'number',
                      },
                      heating_set_point_fahrenheit: {
                        description:
                          'Desired simulated heating [set point](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points) in °F. You must set `heating_set_point_fahrenheit` or `heating_set_point_celsius`.',
                        format: 'float',
                        type: 'number',
                      },
                      hvac_mode: {
                        description:
                          'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) to simulate.',
                        enum: ['heat_cool'],
                        type: 'string',
                      },
                    },
                    required: ['hvac_mode', 'device_id'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/thermostats/simulate/hvac_mode_adjusted',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'simulate'],
        'x-fern-sdk-method-name': 'hvac_mode_adjusted',
        'x-response-key': null,
        'x-title': 'HVAC Mode Adjusted',
      },
    },
    '/thermostats/simulate/temperature_reached': {
      post: {
        description:
          'Simulates a [thermostat](https://docs.seam.co/latest/capability-guides/thermostats) reaching a specified temperature. Only applicable for [sandbox devices](https://docs.seam.co/latest/core-concepts/workspaces#sandbox-workspaces). See also [Testing Your Thermostat App with Simulate Endpoints](https://docs.seam.co/latest/capability-guides/thermostats/testing-your-thermostat-app-with-simulate-endpoints).',
        operationId: 'thermostatsSimulateTemperatureReachedPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  temperature_celsius: {
                    description:
                      'Desired simulated temperature in °C. You must set `temperature_celsius` or `temperature_fahrenheit`.',
                    format: 'float',
                    type: 'number',
                  },
                  temperature_fahrenheit: {
                    description:
                      'Desired simulated temperature in °F. You must set `temperature_fahrenheit` or `temperature_celsius`.',
                    format: 'float',
                    type: 'number',
                  },
                },
                required: ['device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/thermostats/simulate/temperature_reached',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats', 'simulate'],
        'x-fern-sdk-method-name': 'temperature_reached',
        'x-response-key': null,
        'x-title': 'Temperature Reached',
      },
    },
    '/thermostats/update_climate_preset': {
      patch: {
        description:
          'Updates a specified [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsUpdateClimatePresetPatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description: 'Unique key to identify the climate preset.',
                    type: 'string',
                  },
                  cooling_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                    format: 'float',
                    type: 'number',
                  },
                  cooling_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should cool (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  fan_mode_setting: {
                    description:
                      'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                    enum: ['auto', 'on', 'circulate'],
                    type: 'string',
                  },
                  heating_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should heat (in °C).',
                    format: 'float',
                    type: 'number',
                  },
                  heating_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should heat (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  hvac_mode_setting: {
                    description:
                      'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                    enum: ['off', 'heat', 'cool', 'heat_cool'],
                    type: 'string',
                  },
                  manual_override_allowed: {
                    deprecated: true,
                    description:
                      "Indicates whether a person at the thermostat can change the thermostat's settings.",
                    type: 'boolean',
                    'x-deprecated':
                      "Use 'thermostat_schedule.is_override_allowed'",
                  },
                  name: {
                    default: null,
                    description:
                      'User-friendly name to identify the climate preset.',
                    nullable: true,
                    type: 'string',
                  },
                },
                required: [
                  'device_id',
                  'climate_preset_key',
                  'manual_override_allowed',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/update_climate_preset',
        tags: ['/thermostats'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Update a Climate Preset',
      },
      post: {
        description:
          'Updates a specified [climate preset](https://docs.seam.co/latest/capability-guides/thermostats/creating-and-managing-climate-presets) for a specified [thermostat](https://docs.seam.co/latest/capability-guides/thermostats).',
        operationId: 'thermostatsUpdateClimatePresetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  climate_preset_key: {
                    description: 'Unique key to identify the climate preset.',
                    type: 'string',
                  },
                  cooling_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should cool (in °C). See also [Set Points](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/set-points).',
                    format: 'float',
                    type: 'number',
                  },
                  cooling_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should cool (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  device_id: {
                    description: 'ID of the desired thermostat device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  fan_mode_setting: {
                    description:
                      'Desired fan mode setting, such as `on`, `auto`, or `circulate`.',
                    enum: ['auto', 'on', 'circulate'],
                    type: 'string',
                  },
                  heating_set_point_celsius: {
                    description:
                      'Temperature to which the thermostat should heat (in °C).',
                    format: 'float',
                    type: 'number',
                  },
                  heating_set_point_fahrenheit: {
                    description:
                      'Temperature to which the thermostat should heat (in °F).',
                    format: 'float',
                    type: 'number',
                  },
                  hvac_mode_setting: {
                    description:
                      'Desired [HVAC mode](https://docs.seam.co/latest/capability-guides/thermostats/understanding-thermostat-concepts/hvac-mode) setting, such as `heat`, `cool`, `heat_cool`, or `off`.',
                    enum: ['off', 'heat', 'cool', 'heat_cool'],
                    type: 'string',
                  },
                  manual_override_allowed: {
                    deprecated: true,
                    description:
                      "Indicates whether a person at the thermostat can change the thermostat's settings.",
                    type: 'boolean',
                    'x-deprecated':
                      "Use 'thermostat_schedule.is_override_allowed'",
                  },
                  name: {
                    default: null,
                    description:
                      'User-friendly name to identify the climate preset.',
                    nullable: true,
                    type: 'string',
                  },
                },
                required: [
                  'device_id',
                  'climate_preset_key',
                  'manual_override_allowed',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/thermostats/update_climate_preset',
        tags: ['/thermostats'],
        'x-fern-sdk-group-name': ['thermostats'],
        'x-fern-sdk-method-name': 'update_climate_preset',
        'x-response-key': null,
        'x-title': 'Update a Climate Preset',
      },
    },
    '/user_identities/add_acs_user': {
      post: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesAddAcsUserPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired ACS user.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/add_acs_user',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'add_acs_user',
        'x-response-key': null,
        'x-title': 'Add an ACS User to a User Identity',
      },
      put: {
        description:
          'Adds a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) to a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesAddAcsUserPut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the desired ACS user.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/add_acs_user',
        tags: ['/user_identities'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Add an ACS User to a User Identity',
      },
    },
    '/user_identities/create': {
      post: {
        description:
          'Creates a new [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  email_address: {
                    description: 'Unique email address for the user identity.',
                    format: 'email',
                    nullable: true,
                    type: 'string',
                  },
                  full_name: {
                    description:
                      'Full name of the user associated with the user identity.',
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                  },
                  phone_number: {
                    description:
                      'Unique phone number for the user identity in E.164 format (for example, +15555550100).',
                    nullable: true,
                    type: 'string',
                  },
                  user_identity_key: {
                    description: 'Unique key for the user identity.',
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    user_identity: {
                      $ref: '#/components/schemas/user_identity',
                    },
                  },
                  required: ['user_identity', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/create',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'user_identity',
        'x-response-key': 'user_identity',
        'x-title': 'Create a User Identity',
      },
    },
    '/user_identities/delete': {
      post: {
        description:
          'Deletes a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity). To delete a user identity, you must first delete any [ACS credentials](https://docs.seam.co/latest/api/access-control-systems/credentials) and [enrollment automations](https://docs.seam.co/latest/api/user_identities/enrollment_automations/delete) associated with the user identity. You must also deactivate any associated phones.',
        operationId: 'userIdentitiesDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/delete',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-title': 'Delete a User Identity',
      },
    },
    '/user_identities/enrollment_automations/delete': {
      post: {
        description:
          'Deletes a specified [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system). You must delete all enrollment automations associated with a [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity) before [deleting the user identity](https://docs.seam.co/latest/api/user_identities/delete).',
        operationId: 'userIdentitiesEnrollmentAutomationsDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  enrollment_automation_id: {
                    description: 'ID of the desired enrollment automation.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['enrollment_automation_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/enrollment_automations/delete',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities', 'enrollment_automations'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
        'x-title': 'Delete an Enrollment Automation',
      },
    },
    '/user_identities/enrollment_automations/get': {
      post: {
        description:
          'Returns a specified [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system).',
        operationId: 'userIdentitiesEnrollmentAutomationsGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  enrollment_automation_id: {
                    description: 'ID of the desired enrollment automation.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['enrollment_automation_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    enrollment_automation: {
                      $ref: '#/components/schemas/enrollment_automation',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['enrollment_automation', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/enrollment_automations/get',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities', 'enrollment_automations'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'enrollment_automation',
        'x-response-key': 'enrollment_automation',
        'x-title': 'Get an Enrollment Automation',
      },
    },
    '/user_identities/enrollment_automations/launch': {
      post: {
        description:
          'Sets up a new [enrollment automation](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system) for a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity) with a specified [credential manager](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system).',
        operationId: 'userIdentitiesEnrollmentAutomationsLaunchPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_credential_pool_id: {
                    description:
                      'ID of the ACS credential pool from which to obtain credentials for the user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                  create_credential_manager_user: {
                    description:
                      'Indicates whether to create an associated credential manager user. If you set `create_credential_manager_user` to `true`, you cannot specify a `credential_manager_acs_user_id`.',
                    type: 'boolean',
                  },
                  credential_manager_acs_system_id: {
                    description:
                      'ID of the desired ACS system that serves as the credential manager.',
                    format: 'uuid',
                    type: 'string',
                  },
                  credential_manager_acs_user_id: {
                    description:
                      'ID of the associated ACS user within the credential manager. If you specify a `credential_manager_acs_user_id`, you cannot set `create_credential_manager_user` to `true`.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: [
                  'user_identity_id',
                  'credential_manager_acs_system_id',
                ],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    enrollment_automation: {
                      properties: {
                        acs_credential_provisioning_automation_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        created_at: { format: 'date-time', type: 'string' },
                        credential_manager_acs_system_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        enrollment_automation_id: {
                          format: 'uuid',
                          type: 'string',
                        },
                        user_identity_id: { format: 'uuid', type: 'string' },
                        workspace_id: { format: 'uuid', type: 'string' },
                      },
                      required: [
                        'acs_credential_provisioning_automation_id',
                        'credential_manager_acs_system_id',
                        'user_identity_id',
                        'created_at',
                        'workspace_id',
                        'enrollment_automation_id',
                      ],
                      type: 'object',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['enrollment_automation', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/enrollment_automations/launch',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities', 'enrollment_automations'],
        'x-fern-sdk-method-name': 'launch',
        'x-fern-sdk-return-value': 'enrollment_automation',
        'x-response-key': 'enrollment_automation',
        'x-title': 'Launch an Enrollment Automation',
      },
    },
    '/user_identities/enrollment_automations/list': {
      post: {
        description:
          'Returns a list of all [enrollment automations](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/issuing-mobile-credentials-from-an-access-control-system) for a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesEnrollmentAutomationsListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  user_identity_id: {
                    description:
                      'ID of the user identity for which you want to retrieve all enrollment automations.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    enrollment_automations: {
                      items: {
                        $ref: '#/components/schemas/enrollment_automation',
                      },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['enrollment_automations', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/enrollment_automations/list',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities', 'enrollment_automations'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'enrollment_automations',
        'x-response-key': 'enrollment_automations',
        'x-title': 'List Enrollment Automations',
      },
    },
    '/user_identities/get': {
      post: {
        description:
          'Returns a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    properties: {
                      user_identity_id: {
                        description: 'ID of the desired user identity.',
                        format: 'uuid',
                        type: 'string',
                      },
                    },
                    required: ['user_identity_id'],
                    type: 'object',
                  },
                  {
                    properties: { user_identity_key: { type: 'string' } },
                    required: ['user_identity_key'],
                    type: 'object',
                  },
                ],
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    user_identity: {
                      $ref: '#/components/schemas/user_identity',
                    },
                  },
                  required: ['user_identity', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/get',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'user_identity',
        'x-response-key': 'user_identity',
        'x-title': 'Get a User Identity',
      },
    },
    '/user_identities/grant_access_to_device': {
      post: {
        description:
          'Grants a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity) access to a specified [device](https://docs.seam.co/latest/core-concepts/devices/).',
        operationId: 'userIdentitiesGrantAccessToDevicePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired managed device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/grant_access_to_device',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'grant_access_to_device',
        'x-response-key': null,
        'x-title': 'Grant a User Identity Access to a Device',
      },
      put: {
        description:
          'Grants a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity) access to a specified [device](https://docs.seam.co/latest/core-concepts/devices/).',
        operationId: 'userIdentitiesGrantAccessToDevicePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired managed device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/grant_access_to_device',
        tags: ['/user_identities'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Grant a User Identity Access to a Device',
      },
    },
    '/user_identities/list': {
      post: {
        description:
          'Returns a list of all [user identities](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesListPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  credential_manager_acs_system_id: {
                    format: 'uuid',
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    user_identities: {
                      items: { $ref: '#/components/schemas/user_identity' },
                      type: 'array',
                    },
                  },
                  required: ['user_identities', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/list',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'user_identities',
        'x-response-key': 'user_identities',
        'x-title': 'List User Identities',
      },
    },
    '/user_identities/list_accessible_devices': {
      post: {
        description:
          'Returns a list of all [devices](https://docs.seam.co/latest/core-concepts/devices) associated with a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesListAccessibleDevicesPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  user_identity_id: {
                    description:
                      'ID of the user identity for which you want to retrieve all accessible devices.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    accessible_devices: {
                      deprecated: true,
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                      'x-deprecated': 'use devices.',
                    },
                    devices: {
                      items: { $ref: '#/components/schemas/device' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['devices', 'accessible_devices', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/list_accessible_devices',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'list_accessible_devices',
        'x-fern-sdk-return-value': 'devices',
        'x-response-key': 'devices',
        'x-title': 'List Accessible Devices for a User Identity',
      },
    },
    '/user_identities/list_acs_systems': {
      post: {
        description:
          'Returns a list of all [access control systems](https://docs.seam.co/latest/capability-guides/access-systems) associated with a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesListAcsSystemsPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  user_identity_id: {
                    description:
                      'ID of the user identity for which you want to retrieve all access control systems.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_systems: {
                      items: { $ref: '#/components/schemas/acs_system' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_systems', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { client_session: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/list_acs_systems',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'list_acs_systems',
        'x-fern-sdk-return-value': 'acs_systems',
        'x-response-key': 'acs_systems',
        'x-title': 'List ACS Systems Associated with a User Identity',
      },
    },
    '/user_identities/list_acs_users': {
      post: {
        description:
          'Returns a list of all [ACS users](https://docs.seam.co/latest/capability-guides/access-systems/user-management) assigned to a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesListAcsUsersPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  user_identity_id: {
                    description:
                      'ID of the user identity for which you want to retrieve all ACS users.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    acs_users: {
                      items: { $ref: '#/components/schemas/acs_user' },
                      type: 'array',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['acs_users', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/list_acs_users',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'list_acs_users',
        'x-fern-sdk-return-value': 'acs_users',
        'x-response-key': 'acs_users',
        'x-title': 'List ACS Users Associated with a User Identity',
      },
    },
    '/user_identities/remove_acs_user': {
      post: {
        description:
          'Removes a specified [ACS user](https://docs.seam.co/latest/capability-guides/access-systems/user-management) from a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesRemoveAcsUserPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  acs_user_id: {
                    description: 'ID of the ACS user.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'acs_user_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/remove_acs_user',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'remove_acs_user',
        'x-response-key': null,
        'x-title': 'Remove an ACS User from a User Identity',
      },
    },
    '/user_identities/revoke_access_to_device': {
      post: {
        description:
          'Revokes access to a specified [device](https://docs.seam.co/latest/core-concepts/devices/) from a specified [user identity](https://docs.seam.co/latest/capability-guides/mobile-access-in-development/managing-mobile-app-user-accounts-with-user-identities#what-is-a-user-identity).',
        operationId: 'userIdentitiesRevokeAccessToDevicePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  device_id: {
                    description: 'ID of the desired managed device.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the desired user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                },
                required: ['user_identity_id', 'device_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/user_identities/revoke_access_to_device',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'revoke_access_to_device',
        'x-response-key': null,
        'x-title': 'Revoke Access to a Device from a User Identity',
      },
    },
    '/user_identities/update': {
      patch: {
        operationId: 'userIdentitiesUpdatePatch',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  email_address: {
                    description: 'Unique email address for the user identity.',
                    format: 'email',
                    nullable: true,
                    type: 'string',
                  },
                  full_name: { minLength: 1, nullable: true, type: 'string' },
                  phone_number: {
                    description:
                      'Unique phone number for the user identity in [E.164 format](https://www.itu.int/rec/T-REC-E.164/en) (for example, +15555550100).',
                    nullable: true,
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_key: {
                    description: 'Unique key for the user identity.',
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/update',
        tags: ['/user_identities'],
        'x-fern-ignore': true,
        'x-response-key': null,
        'x-title': 'Update a User Identity',
      },
      post: {
        operationId: 'userIdentitiesUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  email_address: {
                    description: 'Unique email address for the user identity.',
                    format: 'email',
                    nullable: true,
                    type: 'string',
                  },
                  full_name: { minLength: 1, nullable: true, type: 'string' },
                  phone_number: {
                    description:
                      'Unique phone number for the user identity in [E.164 format](https://www.itu.int/rec/T-REC-E.164/en) (for example, +15555550100).',
                    nullable: true,
                    type: 'string',
                  },
                  user_identity_id: {
                    description: 'ID of the user identity.',
                    format: 'uuid',
                    type: 'string',
                  },
                  user_identity_key: {
                    description: 'Unique key for the user identity.',
                    minLength: 1,
                    nullable: true,
                    type: 'string',
                  },
                },
                required: ['user_identity_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
          { api_key: [] },
        ],
        summary: '/user_identities/update',
        tags: ['/user_identities'],
        'x-fern-sdk-group-name': ['user_identities'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
        'x-title': 'Update a User Identity',
      },
    },
    '/webhooks/create': {
      post: {
        operationId: 'webhooksCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  event_types: {
                    default: ['*'],
                    items: { type: 'string' },
                    type: 'array',
                  },
                  url: { format: 'uri', type: 'string' },
                },
                required: ['url'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    webhook: { $ref: '#/components/schemas/webhook' },
                  },
                  required: ['webhook', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/create',
        tags: ['/webhooks'],
        'x-fern-sdk-group-name': ['webhooks'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'webhook',
        'x-response-key': 'webhook',
      },
    },
    '/webhooks/delete': {
      post: {
        operationId: 'webhooksDeletePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { webhook_id: { type: 'string' } },
                required: ['webhook_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/delete',
        tags: ['/webhooks'],
        'x-fern-sdk-group-name': ['webhooks'],
        'x-fern-sdk-method-name': 'delete',
        'x-response-key': null,
      },
    },
    '/webhooks/get': {
      post: {
        operationId: 'webhooksGetPost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: { webhook_id: { type: 'string' } },
                required: ['webhook_id'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    webhook: { $ref: '#/components/schemas/webhook' },
                  },
                  required: ['webhook', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/get',
        tags: ['/webhooks'],
        'x-fern-sdk-group-name': ['webhooks'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'webhook',
        'x-response-key': 'webhook',
      },
    },
    '/webhooks/list': {
      get: {
        operationId: 'webhooksListGet',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    webhooks: {
                      items: { $ref: '#/components/schemas/webhook' },
                      type: 'array',
                    },
                  },
                  required: ['webhooks', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/list',
        tags: ['/webhooks'],
        'x-fern-ignore': true,
        'x-response-key': 'webhooks',
      },
      post: {
        operationId: 'webhooksListPost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    webhooks: {
                      items: { $ref: '#/components/schemas/webhook' },
                      type: 'array',
                    },
                  },
                  required: ['webhooks', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/list',
        tags: ['/webhooks'],
        'x-fern-sdk-group-name': ['webhooks'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'webhooks',
        'x-response-key': 'webhooks',
      },
    },
    '/webhooks/update': {
      post: {
        operationId: 'webhooksUpdatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  event_types: { items: { type: 'string' }, type: 'array' },
                  webhook_id: { type: 'string' },
                },
                required: ['webhook_id', 'event_types'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/update',
        tags: ['/webhooks'],
        'x-fern-sdk-group-name': ['webhooks'],
        'x-fern-sdk-method-name': 'update',
        'x-response-key': null,
      },
      put: {
        operationId: 'webhooksUpdatePut',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  event_types: { items: { type: 'string' }, type: 'array' },
                  webhook_id: { type: 'string' },
                },
                required: ['webhook_id', 'event_types'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: { ok: { type: 'boolean' } },
                  required: ['ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/webhooks/update',
        tags: ['/webhooks'],
        'x-fern-ignore': true,
        'x-response-key': null,
      },
    },
    '/workspaces/create': {
      post: {
        operationId: 'workspacesCreatePost',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  company_name: { type: 'string' },
                  connect_partner_name: {
                    deprecated: true,
                    nullable: true,
                    type: 'string',
                    'x-deprecated': 'use company_name',
                  },
                  is_sandbox: { default: false, type: 'boolean' },
                  name: { type: 'string' },
                  webview_logo_shape: {
                    enum: ['circle', 'square'],
                    type: 'string',
                  },
                  webview_primary_button_color: { type: 'string' },
                  webview_primary_button_text_color: { type: 'string' },
                },
                required: ['name'],
                type: 'object',
              },
            },
          },
        },
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    workspace: { $ref: '#/components/schemas/workspace' },
                  },
                  required: ['workspace', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_without_workspace: [] },
          { console_session_with_workspace: [] },
          { console_session_without_workspace: [] },
        ],
        summary: '/workspaces/create',
        tags: ['/workspaces'],
        'x-fern-sdk-group-name': ['workspaces'],
        'x-fern-sdk-method-name': 'create',
        'x-fern-sdk-return-value': 'workspace',
        'x-response-key': 'workspace',
      },
    },
    '/workspaces/get': {
      get: {
        operationId: 'workspacesGetGet',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    workspace: { $ref: '#/components/schemas/workspace' },
                  },
                  required: ['workspace', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
        ],
        summary: '/workspaces/get',
        tags: ['/workspaces'],
        'x-fern-ignore': true,
        'x-response-key': 'workspace',
      },
      post: {
        operationId: 'workspacesGetPost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    workspace: { $ref: '#/components/schemas/workspace' },
                  },
                  required: ['workspace', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { console_session_with_workspace: [] },
          { client_session: [] },
          { pat_with_workspace: [] },
        ],
        summary: '/workspaces/get',
        tags: ['/workspaces'],
        'x-fern-sdk-group-name': ['workspaces'],
        'x-fern-sdk-method-name': 'get',
        'x-fern-sdk-return-value': 'workspace',
        'x-response-key': 'workspace',
      },
    },
    '/workspaces/list': {
      get: {
        operationId: 'workspacesListGet',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    workspaces: {
                      items: { $ref: '#/components/schemas/workspace' },
                      type: 'array',
                    },
                  },
                  required: ['workspaces', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { pat_without_workspace: [] },
          { api_key: [] },
          { client_session: [] },
          { console_session_with_workspace: [] },
          { console_session_without_workspace: [] },
        ],
        summary: '/workspaces/list',
        tags: ['/workspaces'],
        'x-fern-ignore': true,
        'x-response-key': 'workspaces',
      },
      post: {
        operationId: 'workspacesListPost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    ok: { type: 'boolean' },
                    workspaces: {
                      items: { $ref: '#/components/schemas/workspace' },
                      type: 'array',
                    },
                  },
                  required: ['workspaces', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { pat_with_workspace: [] },
          { pat_without_workspace: [] },
          { api_key: [] },
          { client_session: [] },
          { console_session_with_workspace: [] },
          { console_session_without_workspace: [] },
        ],
        summary: '/workspaces/list',
        tags: ['/workspaces'],
        'x-fern-sdk-group-name': ['workspaces'],
        'x-fern-sdk-method-name': 'list',
        'x-fern-sdk-return-value': 'workspaces',
        'x-response-key': 'workspaces',
      },
    },
    '/workspaces/reset_sandbox': {
      post: {
        operationId: 'workspacesResetSandboxPost',
        responses: {
          200: {
            content: {
              'application/json': {
                schema: {
                  properties: {
                    action_attempt: {
                      $ref: '#/components/schemas/action_attempt',
                    },
                    ok: { type: 'boolean' },
                  },
                  required: ['action_attempt', 'ok'],
                  type: 'object',
                },
              },
            },
            description: 'OK',
          },
          400: { description: 'Bad Request' },
          401: { description: 'Unauthorized' },
        },
        security: [
          { api_key: [] },
          { pat_with_workspace: [] },
          { console_session_with_workspace: [] },
        ],
        summary: '/workspaces/reset_sandbox',
        tags: ['/workspaces'],
        'x-action-attempt-type': 'RESET_SANDBOX_WORKSPACE',
        'x-fern-sdk-group-name': ['workspaces'],
        'x-fern-sdk-method-name': 'reset_sandbox',
        'x-fern-sdk-return-value': 'action_attempt',
        'x-response-key': 'action_attempt',
      },
    },
  },
  servers: [{ url: 'https://connect.getseam.com' }],
  tags: [
    { description: 'access_codes', name: '/access_codes' },
    { description: 'acs', name: '/acs' },
    { description: 'action_attempts', name: '/action_attempts' },
    { description: 'client_sessions', name: '/client_sessions' },
    { description: 'connected_accounts', name: '/connected_accounts' },
    { description: 'connect_webviews', name: '/connect_webviews' },
    { description: 'devices', name: '/devices' },
    { description: 'events', name: '/events' },
    { description: 'health', name: '/health' },
    { description: 'locks', name: '/locks' },
    { description: 'networks', name: '/networks' },
    { description: 'noise_sensors', name: '/noise_sensors' },
    { description: 'phones', name: '/phones' },
    { description: 'thermostats', name: '/thermostats' },
    { description: 'user_identities', name: '/user_identities' },
    { description: 'webhooks', name: '/webhooks' },
    { description: 'workspaces', name: '/workspaces' },
  ],
}
